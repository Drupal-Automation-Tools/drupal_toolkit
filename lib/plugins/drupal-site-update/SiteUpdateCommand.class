<?php
/**
 * @file Defines the SiteUpdateCommand class.
 */

/**
 * Responsible for updating a Drupal site.
 */
class SiteUpdateCommand extends GenericSiteCommand {
  
  /**
   * Array of required steps.
   * 
   * @var array
   */
  private $steps = array(
    array(
      'event' => EVENT_UPDATE_PREPARE,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_CODEBASE,
    ),
    array(
      'event' => EVENT_UPDATE_SITES,
    ),
    array(
      'event' => EVENT_UPDATE_SUBSITE_SITES,
      'type' => COMMAND_STEP_ALL_SUBSITES,
    ),
    array(
      'event' => EVENT_UPDATE_CODEBASE_COMPLETE,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_TAKE_BACKUP,
    ),
    array(
      'event' => EVENT_UPDATE_PREPARE_SUBSITE,
      'type' => COMMAND_STEP_ALL_SUBSITES,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_PREPARE_FOR_UPDATE,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_PREPARE_SERVER,
      'continue' => TRUE,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_PRIOR_ACTIONS,
      'continue' => TRUE,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_PRIOR_SUBSITE_ACTIONS,
      'continue' => TRUE,
      'optional' => TRUE,
      'type' => COMMAND_STEP_ALL_SUBSITES,
    ),
    array(
      'event' => EVENT_UPDATE_ACTIONS,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_SUBSITE,
      'type' => COMMAND_STEP_ALL_SUBSITES,
      'optional' => TRUE,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_COMPLETE,
      'continue' => TRUE,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_REFRESH_SERVER_CONFIG,
      'continue' => TRUE,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_REFRESH_SUBSITE_CONFIG,
      'type' => COMMAND_STEP_ALL_SUBSITES,
      'optional' => TRUE,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_PREPARE_FOR_REFRESH,
      'continue' => TRUE,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_PREP_SUBSITE_FOR_REFRESH,
      'continue' => TRUE,
      'optional' => TRUE,
      'type' => COMMAND_STEP_ALL_SUBSITES,
    ),
    array(
      'event' => EVENT_UPDATE_REFRESH,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_REFRESH_SUBSITE,
      'continue' => TRUE,
      'optional' => TRUE,
      'type' => COMMAND_STEP_ALL_SUBSITES,
    ),
    array(
      'event' => EVENT_UPDATE_CLEANUP_SUBSITE,
      'optional' => TRUE,
      'continue' => TRUE,
      'type' => COMMAND_STEP_ALL_SUBSITES,
    ),
    array(
      'event' => EVENT_UPDATE_CLEANUP,
      'optional' => TRUE,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_CLEANUP_BUILD,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_UPDATE_FINISH,
      'continue' => TRUE,
      'optional' => TRUE,
    ),
  );
  
  public function verifyRequirements() {
    if (!$this->requireSite()) {
      return FALSE;
    }
    if (extra_empty($this->getSite()->getSetting(SITE_IS_INSTALLED))) {
      $this->error(STRING_ERROR_SITE_NOT_INSTALLED);
      return FALSE;
    }
    return parent::verifyRequirements();
  }
  
  public function executeCommand() {
    $newID = dtk_generate_build_id();
    $this->executeAllSteps($this->steps, array(
      'type' => COMMAND_STEP_SITE,
      'vars' => array(
        'buildID' => $newID,
      ),
    ));
    $this->saveSiteConfiguration();
  }
  
}
