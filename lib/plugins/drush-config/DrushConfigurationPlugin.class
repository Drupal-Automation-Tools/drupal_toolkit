<?php
/**
 * @file Defines the DrushConfigurationPlugin class.
 */

/**
 * Takes responsibility for setting up the drush alias.
 * 
 * @ingroup plugins
 */
class DrushConfigurationPlugin extends GenericPlugin implements EventListener, ServerInteractionDependency {

  /**
   * DI variable for server interaction
   * 
   * @var ServerInteractionDependency
   */
  private $servers;
  
  public function setServerManager(ServerInteractionManagerInterface $servers) {
    $this->servers = $servers;
  }
  
  public function servers() {
    return $this->servers;
  }
  
  public function initialize() {
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_DRUSH_ALIAS_STATIC => FALSE,
      CONFIG_DRUSH_ALIAS_TEMPLATE => '@@SITE_UUID',
      CONFIG_DRUSH_ALIAS_FILE_TEMPLATE => '@@SITE_UUID.alias.drushrc.php',
      CONFIG_DRUSH_ALIAS_DIR => '/etc/drush',
      CONFIG_DRUSH_ALIAS_CREATE_FOR_LOCAL => TRUE,
      CONFIG_SERVER_LIST => array(
        SERVER_TYPE_DRUSH => array(),
      )
    ));
    $this->events()->registerListener(array(
      EVENT_UPDATE_REFRESH_SERVER_CONFIG,
      EVENT_SITE_BUILD_MORE_CONFIG,
      EVENT_SUBSITE_BUILD_SERVER_CONFIG,
      EVENT_UPDATE_REFRESH_SUBSITE_CONFIG,
      EVENT_GET_INFO,
    ), $this);
  }
  
  public function captureEvent(DtkEvent &$context, $eventType) {
    switch ($eventType) {
      case EVENT_GET_INFO:
        $entity = $context->getEntity();
        $context->appendInfo($this->str(STRING_INFO_DRUSH_ALIAS), '@' . $entity->getSetting(SITE_DRUSH_ALIAS));
        break;
      case EVENT_UPDATE_REFRESH_SUBSITE_CONFIG:
      case EVENT_UPDATE_REFRESH_SERVER_CONFIG:
        if ($context->checkExecution()) {
          $context->setResult($this->updateAliases($context->getEntity()));
        }
        break;
      case EVENT_SITE_BUILD_MORE_CONFIG:
      case EVENT_SUBSITE_BUILD_SERVER_CONFIG:
        if ($context->checkExecution()) {
          $context->setResult($this->createAliases($context->getEntity()));
        }
        break;
    }
  }
  
  /**
   * Updates the drush aliases, if applicable.
   * 
   * @param GenericDrupalEntity $site
   *   Site to update aliases for.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function updateAliases(GenericDrupalEntity $site) {
    if (extra_empty($this->config()->getConfig(CONFIG_DRUSH_ALIAS_STATIC))) {
      return $this->createAliases($site, TRUE);
    }
    else {
      return TRUE;
    }
  }
  
  /**
   * Responsible for creating the drush alias files.
   * 
   * @param DrupalSite $site
   *   The site to create an alias for.
   * @param boolean $update
   *   Whether or not this is part of the update process.
   * 
   * @return boolean
   *   TRUE if the alias was created, otherwise FALSE.
   */
  private function createAliases(GenericDrupalEntity $site, $update = FALSE) {
    $config = $this->getConfig(array(
      'template' => CONFIG_DRUSH_ALIAS_TEMPLATE,
      'default-dir' => CONFIG_DRUSH_ALIAS_DIR,
      'file-template' => CONFIG_DRUSH_ALIAS_FILE_TEMPLATE,
    ));
    if (empty($config)) { return FALSE; }    
    $this->working(STRING_WORKING_DRUSH_ALIASES_SETUP);
    $useLocal = !extra_empty($this->config()->getConfig(CONFIG_DRUSH_ALIAS_CREATE_FOR_LOCAL));
    $servers = $this->servers()->findServers(SERVER_TYPE_DRUSH, $useLocal);
    $aliasContent = $this->defaultDrushTemplate();
    $aliasList = array();
    foreach ($servers as $key => $server) {
      if ($server instanceof PhysicalServerInterface) {
        if ($update) {
          if (!extra_empty($server->getSetting(SERVER_SETTING_STATIC_ALIAS))) {
            continue;
          }
        }
        $this->working(STRING_WORKING_DRUSH_ALIAS_SETUP, array(
          '!name' => $key,
        ));
        if (!$this->writeTemplate($aliasList, $site, $server, $config['default-dir'], $config['file-template'], $aliasContent)) {
          return FALSE;
        }
      }
    }
    $alias = $site->replaceTokens($config['template']);
    if ($useLocal) {
      $site->setSetting(SITE_DRUSH_ALIAS, $alias);
    }
    $site->appendSettingValue(SITE_REMOTE_FILES, $aliasList);
    $this->success(STRING_SUCCESS_DRUSH_ALIASES_SETUP);
    return TRUE;
  }
  
  /**
   * Writes a drush alias to the server. Takes into account all the server's
   * customized settings.
   * 
   * @param array $aliasList
   *   The list of aliases, which we will append an entry to on success.
   * @param DrupalSite $site
   *   The site we're making an alias for.
   * @param PhysicalServerInterface $server
   *   The server we're making an alias on.
   * @param string $ddir
   *   The default directory, to be used if the server does not define one.
   * @param string $dfile
   *   The default file alias, to be used if the server does not define one.
   * @param string $dconfig
   *   The default configuration template, to be used if the server does not
   *   define its own config template file.
   * 
   * @return boolean
   *   TRUE if the configuration is written successfully, otherwise FALSE.
   */
  private function writeTemplate(array &$aliasList, GenericDrupalEntity $site, PhysicalServerInterface $server, $ddir, $dfile, $dconfig) {
    $dir = $server->getSetting(SERVER_SETTING_DRUSH_DIR);
    if (empty($dir)) { $dir = $ddir; }
    $rawfile = $server->getSetting(SERVER_SETTING_DRUSH_FILE_TEMPLATE);
    if (empty($rawfile)) { $rawfile = $dfile; }
    $rawconfig = $dconfig;
    $configFile = $server->getSetting(SERVER_SETTING_DRUSH_CONFIG_TEMPLATE);
    if (is_readable($configFile)) {
      $rawconfig = file_get_contents($configFile);
    }
    $file = $site->replaceTokens($rawfile);
    $config = $site->replaceTokens($rawconfig);
    $fullPath = assemble_path($dir, $file);
    if (!$server->writeFile($fullPath, $config)) {
      $this->error(STRING_COULD_NOT_WRITE_DRUSH_ALIAS);
      return FALSE;
    }
    $aliasList[] = array(
      'server' => $server,
      'file' => $fullPath,
    );
    return TRUE;
  }
  
  
  
  /**
   * Retrieves the default drush template.
   * 
   * This uses the config setting if appropriate, and falls back to a really
   * basic Drupal 7 Drush alias format.
   * 
   * @return string
   */
  private function defaultDrushTemplate() {
    $fromConfig = $this->config()->getConfig(CONFIG_DRUSH_CONFIG_TEMPLATE);
    if (is_readable($fromConfig)) {
      return file_get_contents($fromConfig);
    }
    return '<?php' . PHP_EOL .
        ' $aliases["@@BUILD_NAME"] = array(' . PHP_EOL . 
        '    "root" => "@@SITE_DOCROOT",' . PHP_EOL . 
        '    "uri" => "http://@@SITE_PRIMARY_URL",' . PHP_EOL . 
        '  );' . PHP_EOL;
  }
  
}
