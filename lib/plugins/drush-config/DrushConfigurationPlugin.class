<?php
/**
 * @file Defines the DrushConfigurationPlugin class.
 */

/**
 * Config key for the drush alias file name template.
 * 
 * @ingroup config
 */
define('CONFIG_DRUSH_ALIAS_TEMPLATE', 'drush-alias-file-template');

/**
 * Config key for the default drush configuration.
 * 
 * @ingroup config
 */
define('CONFIG_DRUSH_CONFIG_TEMPLATE', 'drush-alias-config-template-file');

/**
 * Config key for the drush alias default directory.
 * 
 * @ingroup config
 */
define('CONFIG_DRUSH_ALIAS_DIR', 'drush-alias-default-dir');

/**
 * Config key for whether or not the drush alias should be created on the 
 * local machine.
 * 
 * @ingroup config
 */
define('CONFIG_DRUSH_ALIAS_CREATE_FOR_LOCAL', 'drush-alias-local');

/**
 * Server type key indicating support for drush aliases.
 * 
 * @ingroup server_types
 */
define('SERVER_TYPE_DRUSH', 'drush');

/**
 * Server setting allowing override of the folder in which Drush aliases are
 * stored.
 * 
 * @ingroup server_settings
 */
define('SERVER_SETTING_DRUSH_DIR', 'drush-alias-dir');

/**
 * Server setting allowing override of the file name template for Drush aliases.
 * 
 * @see DrupalSite::replaceTokens()
 * @ingroup server_settings
 */
define('SERVER_SETTING_DRUSH_FILE_TEMPLATE', 'drush-file-template');

/**
 * Server setting allowing override of the configuration for Drush aliases.
 * 
 * This should be a path to a file that is a template for the configuration.
 * 
 * @see DrupalSite::replaceTokens()
 * @ingroup server_settings.
 */
define('SERVER_SETTING_DRUSH_CONFIG_TEMPLATE', 'drush-config-template-file');

/**
 * Takes responsibility for setting up the drush alias.
 */
class DrushConfigurationPlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_DRUSH_ALIAS_TEMPLATE => '@@BUILD_NAME.alias.drushrc.php',
      CONFIG_DRUSH_ALIAS_DIR => '/etc/drush',
      CONFIG_DRUSH_ALIAS_CREATE_FOR_LOCAL => TRUE,
      CONFIG_SERVER_LIST => array(
        SERVER_TYPE_DRUSH => array(),
      )
    ));
    $this->events()->registerListener(array(
      EVENT_SITE_BUILD_MORE_CONFIG,
    ), $this);
  }
  
  public function requiredPlugins() {
    return array('DrupalSitePlugin', 'ServerInteractionPlugin');
  }
  
  /**
   * Responsible for creating the drush alias files.
   * 
   * @param DrupalSite $site
   *   The site to create an alias for.
   * 
   * @return boolean
   *   TRUE if the alias was created, otherwise FALSE.
   */
  private function createAliases(DrupalSite $site) {
    $config = $this->getConfig(array(
      'template' => CONFIG_DRUSH_ALIAS_TEMPLATE,
      'default-dir' => CONFIG_DRUSH_ALIAS_DIR,
    ));
    if (empty($config)) {
      return FALSE;
    }
    $context = (object) array(
      'servers' => array(),
      'type' => SERVER_TYPE_DRUSH,
      'skip-local' => extra_empty($this->config()->getConfig(CONFIG_DRUSH_ALIAS_CREATE_FOR_LOCAL)),
    );
    $this->events()->fireEvent(EVENT_FIND_SERVERS, $context);
    $defaultAlias = $this->defaultDrushTemplate();
    foreach ($context->servers as $server) {
      if ($server instanceof PhysicalServerInterface) {
        if (!$this->writeTemplate($site, $server, $config['default-dir'], $config['template'], $defaultAlias)) {
          return FALSE;
        }
      }
    }
    return TRUE;
  }
  
  /**
   * Writes a drush alias to the server. Takes into account all the server's
   * customized settings.
   * 
   * @param DrupalSite $site
   *   The site we're making an alias for.
   * @param PhysicalServerInterface $server
   *   The server we're making an alias on.
   * @param string $ddir
   *   The default directory, to be used if the server does not define one.
   * @param string $dfile
   *   The default file alias, to be used if the server does not define one.
   * @param string $dconfig
   *   The default configuration template, to be used if the server does not
   *   define its own config template file.
   * 
   * @return boolean
   *   TRUE if the configuration is written successfully, otherwise FALSE.
   */
  private function writeTemplate(DrupalSite $site, PhysicalServerInterface $server, $ddir, $dfile, $dconfig) {
    $dir = $server->getSetting(SERVER_SETTING_DRUSH_DIR);
    if (empty($dir)) { $dir = $ddir; }
    $file = $server->getSetting(SERVER_SETTING_DRUSH_FILE_TEMPLATE);
    if (empty($file)) { $file = $dfile; }
    $configFile = $server->getSetting(SERVER_SETTING_DRUSH_CONFIG_TEMPLATE);
    $config = $dconfig;
    if (is_readable($configFile)) {
      $config = file_get_contents($configFile);
    }
    $file = $site->replaceTokens($file);
    $config = $site->replaceTokens($config);
    $fullPath = assemble_path($dir, $file);
    if (!$server->writeFile($fullPath, $config)) {
      $this->error('Unable to write drush alias.');
      return FALSE;
    }
    return TRUE;
  }
  
  /**
   * Retrieves the default drush template.
   * 
   * This uses the config setting if appropriate, and falls back to a really
   * basic Drupal 7 Drush alias format.
   * 
   * @return string
   */
  private function defaultDrushTemplate() {
    $fromConfig = $this->config()->getConfig(CONFIG_DRUSH_CONFIG_TEMPLATE);
    if (is_readable($fromConfig)) {
      return file_get_contents($fromConfig);
    }
    return '<?php' . PHP_EOL .
        ' $aliases[@@BUILD_NAME] = array(' . PHP_EOL . 
        '    "root" => "@@SITE_DOCROOT",' . PHP_EOL . 
        '    "uri" => "http://@@SITE_PRIMARY_URL",' . PHP_EOL . 
        '  );' . PHP_EOL;
  }
  
  public function captureEvent(&$context, $eventType) {
    switch ($eventType) {
      case EVENT_SITE_BUILD_MORE_CONFIG:
        if ($context->success) {
          $context->success = $this->createAliases($context->site);
        }
        break;
    }
  }
  
}