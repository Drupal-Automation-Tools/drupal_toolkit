<?php
/**
 * @file Defines the DrupalSiteStandardStructurePlugin class.
 */

/**
 * Responsible for setting up the structure of a build.
 * 
 * @ingroup plugins
 */
class DrupalSiteStandardStructurePlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_SITE_BUILD_STRUCTURE,
      EVENT_DISCOVER_STRUCTURE_DIRS,
      EVENT_REMOVE_ALL,
      EVENT_DELETE_BUILD,
    ), $this);
  }
  
  public function captureEvent(DtkEvent &$context, $type) {
    switch ($type) {
      case EVENT_SITE_BUILD_STRUCTURE:
        if ($context->checkExecution()) {
          $context->setResult($this->buildSite($context->getSite()));
        }
        break;
      case EVENT_REMOVE_ALL:
        if ($context->checkExecution()) {
          $context->setResult($this->deleteSite($context->getSite()));
        }
        break;
      case EVENT_DELETE_BUILD:
        if ($context->checkExecution()) {
          $context->setResult($this->deleteCodebase($context->getSite(), $context->getVariable('buildID')));
        }
        break;
      case EVENT_DISCOVER_STRUCTURE_DIRS:
        $context->setVariable('dirs', array_merge(
            $context->getVariable('dirs'),
            $this->dirDiscovery()
        ));
        break;
    }
  }
  
  private function deleteCodebase(DrupalSite $site, $buildID) {
    $this->working(STRING_WORKING_REMOVE_OLD_CB, array(
      '!build' => $buildID,
    ));
    $cbDir = $site->getSetting(SITE_CODEBASE_DIR, NULL, TRUE);
    if (empty($cbDir)) { return FALSE; }
    $dir = assemble_path($site->getBuildFolder(), $cbDir, $buildID);
    return remove_directory($dir);
  }
  
  /**
   * Deletes a site entirely.
   * 
   * @param DrupalSite $site
   *   The site to delete.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function deleteSite(DrupalSite $site) {
    $this->working(STRING_WORKING_REMOVE_SITE);
    if (!remove_directory($site->getBuildFolder(), $site->isLocal())) {
      $this->warn(STRING_COULD_NOT_REMOVE_BUILD_DIR);
      return FALSE;
    }
    $this->success(STRING_SUCCESS_REMOVE_SITE);
    return TRUE;
  }
  
  /**
   * Provides a list of default directories for sites.
   * 
   * @return array
   *   An array of folders
   */
  private function dirDiscovery() {
    // @todo should this be moved to the drush_backup plugin?
    return array(
      'backups',
      'restored',
      'reverted',
    );
  }
  
  /**
   * Responsible for creating the site structure.
   * 
   * @param DrupalSite $site
   *   The site to build.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function buildSite(DrupalSite $site) {
    $this->working(STRING_WORKING_BUILD_STRUCTURE);
    $event = new DtkEvent(FALSE, array(
      'dirs' => array(
        '/',
        'codebases',
        'sites',
        'rootlinks',
      ),
      'codebaseDir' => 'codebases',
      'sitesDir' => 'sites',
      'rootlinkDir' => 'rootlinks',
    ));
    $this->events()->fireEvent(EVENT_DISCOVER_STRUCTURE_DIRS, $event);
    $root = $site->getBuildFolder();
    foreach ($event->getVariable('dirs') as $dir) {
      $full = assemble_path($root, $dir);
      if (!is_dir($full)) {
        mkdir($full);
        var_dump($full);
        if (!is_dir($full)) {
          $this->error(STRING_STRUCTURE_DIR_FAILURE, array(
            '!dir' => $full,
          ));
          return FALSE;
        }
      }
    }
    $site->setSetting(SITE_CODEBASE_DIR, $event->getVariable('codebaseDir'));
    $site->setSetting(SITE_SITES_DIR, $event->getVariable('sitesDir'));
    $site->setSetting(SITE_ROOTLINKS_DIR, $event->getVariable('rootlinkDir'));

    $this->success(STRING_SUCCESS_BUILD_STRUCTURE);
    
    $context = new DrupalSiteEvent($site, TRUE);
    $this->events()->fireEvent(EVENT_CONTINUE_STANDARD_STRUCTURE, $context);
    
    return $context->success();
  }
  
}
