<?php
/**
 * @file Defines the GenericHostFileManager class.
 */

/**
 * Responsible for managing the hosts file of a server.
 */
abstract class GenericHostFileManager implements HostFileManagerInterface {
  
  /**
   * The path to the host file.
   * 
   * @var string
   */
  private $hostfile = '';
  
  /**
   * The physical machine.
   * 
   * @var PhysicalServerInterface
   */
  private $machine = NULL;
  
  /**
   * Whether or not host files should be compacted.
   * 
   * @var boolean
   */
  private $compact = FALSE;
  
  /**
   * Line ending to use.
   * 
   * @var string
   */
  private $lineEnding = PHP_EOL;
  
  /**
   * The definitions as loaded.
   * 
   * @var array
   */
  private $defs = NULL;
  
  /**
   * Constructor.
   * 
   * @param PhysicalServerInterface $server
   *   The physical machine.
   * @param string $hostfile
   *   The location of the host file for this machine.
   */
  public function __construct(PhysicalServerInterface $server, $hostfile, $lineEnding = PHP_EOL) {
    $this->hostfile = $server->getSetting(SERVER_SETTING_HOSTS_FILE, $hostfile);
    $this->machine = $server;
    $this->lineEnding = $lineEnding;
  }
  
  public function setCompactHostFile($compact) {
    $this->compact = $compact;
  }
  
  public function machine() {
    return $this->machine;
  }
  
  public function loadHostFile() {
    if (!is_array($this->defs)) {
      $content = $this->machine()->readFile($this->hostfile);
      if ($content === '') {
        $this->defs = array();
      }
      elseif (!empty($content)) {
        $this->defs = hosts_file_parse($content);
      }
    }
    return is_array($this->defs);
  }
  
  public function saveHostFile() {
    if (empty($this->defs)) {
      return TRUE;
    }
    if ($this->compact) {
      $this->defs = hosts_file_compact($this->defs, TRUE);
    }
    $results = $this->machine()->writeFile($this->hostfile, hosts_file_build($this->defs, "\t", " ", $this->lineEnding));
    if ($results) {
      unset($this->defs);
    }
    return $results;
  }
  
  public function addHostFileEntries(array $map) {
    $this->loadHostFile();
    $remap = array();
    foreach ($map as $host => $ip) {
      $currentIP = hosts_file_ip_lookup($this->defs, $host);
      if (empty($currentIP) || ($ip !== $currentIP)) {
        if (!isset($remap[$ip])) {
          $remap[$ip] = array();
        }
        $remap[$ip][] = $host;
      }
    }
    foreach ($remap as $ip => $hosts) {
      hosts_file_add($this->defs, $ip, $hosts);
    }
    return TRUE;
  }
  
  public function addHostFileEntry($host, $ip) {
    return $this->addHostFileEntries(array($host => $ip));
  }
  
  public function getHostFileEntry($domain) {
    $this->loadHostFile();
    return hosts_file_ip_lookup($this->defs, $domain);
  }
  
  public function cleanHostEntries(array $map) {
    $this->loadHostFile();
    foreach ($map as $host => $ip) {
      hosts_file_remove_hosts($this->defs, $host, $ip);
    }
    return TRUE;
  }
  
}