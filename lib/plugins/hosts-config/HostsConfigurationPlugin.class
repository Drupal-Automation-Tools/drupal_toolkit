<?php
/**
 * @file Defines the HostsConfigurationPlugin class.
 * 
 * @defgroup managed_host_types "Managed Host Server Types"
 * The different types of managed hosts that can be set. 
 */

/**
 * Config key for whether or not the local server needs its host file 
 * managed.
 */
define('CONFIG_MANAGED_HOSTS_USE_LOCAL', 'managed-host-local');

/**
 * Config key for the fallback type for managed host servers.
 * 
 * @see @ref managed_host_types "Managed Host Types"
 * @ingroup config
 */
define('CONFIG_MANAGED_HOSTS_DEFAULT_TYPE', 'managed-host-default-type');

/**
 * Config key for the target IP address for host files.
 * 
 * @ingroup config
 */
define('CONFIG_MANAGED_HOSTS_TARGET_IP_ADDRESS', 'managed-host-ip-address');

/**
 * Config key to prevent the hosts files from being updated during the site
 * update process.
 * 
 * @ingroup config
 */
define('CONFIG_MANAGED_HOSTS_STATIC', 'managed-host-static');

/**
 * Server type for servers that want to have their host files managed by
 * the toolkit.
 * 
 * @ingroup server_types
 */
define('SERVER_TYPE_MANAGED_HOST', 'managed-host');

/**
 * Set to TRUE to prevent the local server from being used as a managed host
 * server.
 * 
 * @ingroup config
 */
define('CONFIG_DISABLE_LOCAL_MANAGED_HOST', 'si-disable-local-managed-host');

/**
 * Fired when a managed host needs to be cast into a HostFileManagerInterface
 * object.
 * 
 * @ingroup events
 */
define('EVENT_CAST_MANAGED_HOST_SERVER', 'cast-managed-host-server');

/**
 * Fired when a list of managed hosts is needed.
 * 
 * @ingroup events
 */
define('EVENT_FIND_MANAGED_HOST_SERVERS', 'find-managed-host-servers');

/**
 * Allows changing the managed host type.
 * 
 * @ingroup server_settings
 * @see @ref managed_host_types "Managed Host Types"
 */
define('SERVER_SETTING_ENVIRONMENT', 'managed-host-type');

/**
 * Server setting to prevent the hosts file from being updated during the 
 * update process.
 * 
 * @ingroup server_settings
 */
define('SERVER_SETTING_STATIC_HOSTS', 'managed-host-static');

/**
 * Config key to compact the hosts files.
 * 
 * If set to TRUE, all hosts files will be compacted preserving comments. See
 * hosts_file_compact() for the impact of this.
 * 
 * @ingroup config
 */
define('CONFIG_MANAGED_HOSTS_COMPACT', 'compact-hosts-file');

/**
 * Indicates that the host is a Linux machine.
 * 
 * @ingroup managed_host_types
 */
define('MANAGED_HOST_TYPE_LINUX', 'linux');

/**
 * String token for when there was an error writing out the hosts file.
 * 
 * @ingroup strings
 */
define('STRING_HOSTS_FILE_BAD_WRITE', 'hosts_config.error.bad_write');

/**
 * Site setting for the list of machines where we need to remove this site
 * from the hosts file.
 * 
 * @ingroup site_settings
 */
define('SITE_HOST_FILES', 'host-files');

/**
 * String token for the message when there was an error cleaning up the hosts 
 * file.
 * 
 * @ingroup strings
 */
define('STRING_HOST_REMOVAL_ERROR', 'hosts_config.error.unable-to-clean-host-file');

/**
 * String token for when all the host files are about to be sanitizied.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_REMOVING_HOSTS', 'hosts_config.working.removing-hosts');

/**
 * String token for when a specific server's host file is about to be modified
 * to remove specific entries.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_REMOVING_HOSTS_ITEM', 'hosts_config.working-removing-hosts-item');

/**
 * String token for when all relevant host file entries have been removed.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_REMOVING_HOSTS', 'hosts_config.success.removing-hosts');

/**
 * String token for when all host files are about to be updated.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_UPDATING_HOSTS', 'hosts_config.working.updating-hosts');

/**
 * String token for when a specific server's host file is about to be updated.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_UPDATING_HOSTS_ITEM', 'hosts_config.working.updating-hosts-item');

/**
 * String token for when all host files have been updated.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_UPDATING_HOSTS', 'hosts_config.success.updating-hosts');

/**
 * Plugin to manage the hosts file configuration of one or more servers.
 */
class HostsConfigurationPlugin extends GenericPlugin implements EventListener, ServerInteractionDependency {

  /**
   * Dependency injection variable for the server interaction manager.
   * 
   * @var ServerInteractionManagerInterface
   */
  private $servers;
  
  public function setServerManager(ServerInteractionManagerInterface $servers) {
    $this->servers = $servers;
  }
  
  public function servers() {
    return $this->servers;
  }
  
  public function __construct() {
    $this->includeFiles(dirname(__FILE__), array(
      'HostFileManagerInterface.iface',
      'GenericHostFileManager.class',
      'LinuxHostFileManager.class',
    ));
  }
  
  public function initialize() {
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_MANAGED_HOSTS_COMPACT => FALSE,
      CONFIG_MANAGED_HOSTS_USE_LOCAL => TRUE,
      CONFIG_MANAGED_HOSTS_DEFAULT_TYPE => MANAGED_HOST_TYPE_LINUX,
      CONFIG_MANAGED_HOSTS_TARGET_IP_ADDRESS => '127.0.0.1',
      CONFIG_SERVER_LIST => array(
        SERVER_TYPE_MANAGED_HOST => array(),
      ),
    ));
    $this->events()->registerListener(array(
      EVENT_UPDATE_REFRESH_SERVER_CONFIG,
      EVENT_CAST_MANAGED_HOST_SERVER,
      EVENT_SITE_BUILD_MORE_CONFIG,
      EVENT_FIND_MANAGED_HOST_SERVERS,
      EVENT_REMOVE_ALL,
      EVENT_SUBSITE_BUILD_PARENT_SERVER_REFRESH,
      EVENT_REMOVE_SUBSITE_CLEANUP,
    ), $this);
  }
  
  public function requiredPlugins() {
    return array('ServerInteractionPlugin', 'DrupalSitePlugin');
  }
  
  public function captureEvent(DtkEvent &$context, $eventType) {
    switch ($eventType) {
      case EVENT_REMOVE_SUBSITE_CLEANUP:
      case EVENT_REMOVE_ALL:
      case EVENT_SITE_BUILD_MORE_CONFIG:
      case EVENT_SUBSITE_BUILD_PARENT_SERVER_REFRESH:
        if ($context->checkExecution()) {
          $context->setResult($this->updateHostFile($context->getSite()));
        }
        break;
      case EVENT_UPDATE_REFRESH_SERVER_CONFIG:
        if ($context->checkExecution()) {
          $context->setResult($this->refreshHostFiles($context->getSite()));
        }
        break;
      case EVENT_CAST_MANAGED_HOST_SERVER:
        if ($context->checkExecution()) {
          $context->setCastedServer($this->castManagedHostServer($context->server, $context->type));
        }
        break;
    }
  }
  
  /**
   * Refreshes the hosts file configuration.
   * 
   * @param DrupalSite $site
   *   Site to refresh.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function refreshHostFiles(DrupalSite $site) {
    if (extra_empty($this->config()->getConfig(CONFIG_MANAGED_HOSTS_STATIC))) {
      return $this->updateHostFile($site, TRUE);
    }
    else {
      return TRUE;
    }
  }
  
  /**
   * Responsible for updating the hosts file of many servers.
   * 
   * @param DrupalSite $site
   *   The site we're creating host file entries for.
   * @param boolean $update
   *   Whether or not this is an update process.
   * 
   * @return boolean
   *   TRUE if all the hosts files were updated successfully, otherwise FALSE.
   */
  private function updateHostFile(DrupalSite $site, $update = FALSE) {
    $config = $this->getConfig(array(
      'ip' => CONFIG_MANAGED_HOSTS_TARGET_IP_ADDRESS,
    ));
    if (empty($config)) {
      return FALSE;
    }
    $map = array();
    foreach ($site->getSetting(SITE_SETTING_ALL_DOMAINS) as $host) {
      $map[$host] = $config['ip'];
    }
    $context = (object) array(
      'servers' => array(),
    );
    $this->events()->fireEvent(EVENT_FIND_MANAGED_HOST_SERVERS, $context);
    $registry = array(
      'servers' => array(),
      'map' => $map,
    );
    $this->working(STRING_WORKING_UPDATING_HOSTS);
    foreach ($context->servers as $key => $server) {
      if ($server instanceof HostFileManagerInterface) {
        if ($update) {
          if (!extra_empty($server->machine()->getSetting(SERVER_SETTING_STATIC_HOSTS))) {
            continue;
          }
        }
        $this->working(STRING_WORKING_UPDATING_HOSTS_ITEM, array(
          '!name' => $key,
        ));
        if (!$server->addHostFileEntries($map)) {
          $this->error(STRING_HOSTS_FILE_BAD_WRITE);
          return FALSE;
        }
        $registry['servers'][$key] = $server;
      }
    }
    $site->setSetting(SITE_HOST_FILES, $registry);
    $this->success(STRING_SUCCESS_UPDATING_HOSTS);
    return TRUE;
  }
  
  private function castManagedHostServer(PhysicalServerInterface $server, $type) {
    switch ($type) {
      case MANAGED_HOST_TYPE_LINUX:
        return new LinuxHostFileManager($server);
        break;
    }
    return NULL;
  }
  
}