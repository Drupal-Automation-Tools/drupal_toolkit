<?php
/**
 * @file Defines the LocalMachine class.
 */

/**
 * Represents the local machine.
 */
class LocalMachine extends GenericMachine {
  
  public function __construct(array $vars = array()) {
    parent::__construct($vars);
    $this->setNameKey('auto-localhost');
  }
  
  public function executeCommand($command, $args = array(), &$out = array(), &$exit = 0) {
    return execute_system_command($command, $args, $out, $exit);
  }
  
  public function initialize() {
    return TRUE;
  }
  
  public function writeFile($location, $contents) {
    return file_put_contents($location, $contents);
  }
  
  public function readFile($file) {
    return file_get_contents($file);
  }
  
  public function deleteFile($file) {
    if (file_exists($file)) {
      return unlink($file);
    }
    return TRUE;
  }
  
  public function downloadFile($file, $destination = NULL) {
    if (!is_readable($file)) {
      return FALSE;
    }
    if (!empty($destination)) {
      copy($file, $destination);
      return $destination;
    }
    return $file;
  }
  
  public function copyDirectory($dir, $destination) {
    if ($dir !== $destination) {
      return copy_all($dir, $destination);
    }
    return TRUE;
  }
  
  public function listFiles($dir) {
    $h = opendir($dir);
    if (empty($h)) {
      return FALSE;
    }
    $files = array();
    while (($file = readdir($h)) !== FALSE) {
      if ($file !== '.' && $file !== '..') {
        $full = assemble_path($dir, $file);
        if (!is_dir($full)) {
          $files[] = $full;
        }
      }
    }
    return $files;
  }
  
  public function listDirectories($dir) {
    $h = opendir($dir);
    if (empty($h)) {
      return FALSE;
    }
    $dirs = array();
    while (($file = readdir($h)) !== FALSE) {
      if ($file !== '.' && $file !== '..') {
        $full = assemble_path($dir, $file);
        if (is_dir($full)) {
          $dirs[] = $full;
        }
      }
    }
    return $dirs;
  }
  
}