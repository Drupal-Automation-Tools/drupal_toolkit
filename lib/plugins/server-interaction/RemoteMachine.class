<?php
/**
 * @file Defines the RemoteMachine class.
 */

/**
 * Implements PhysicalServerInterface for a remote machine that is connected
 * to using the ssh2 family of functions.
 * 
 * For getting/putting files, this class uses the temp directory to store the 
 * files on their way up/down.
 * 
 * @see ssh2_connect()
 */
class RemoteMachine extends GenericMachine {
  
  /**
   * Resource for the SSH2 connection to the remote machine.
   * 
   * @var resource
   */
  private $handle;
  
  public function initialize() {
    if (is_resource($this->handle)) {
      return TRUE;
    }
    if (!extra_empty($this->getSetting(SERVER_SETTING_DISABLED))) {
      return FALSE;
    }
    $this->handle = ssh2_connect($this->getSetting(SERVER_SETTING_HOST), $this->getSetting(SERVER_SETTING_PORT, 22));
    if (empty($this->handle)) {
      $this->handle = NULL;
      return FALSE;
    }
    $fingerprint = ssh2_fingerprint($this->handle, SSH2_FINGERPRINT_MD5 | SSH2_FINGERPRINT_HEX);
    if (strcmp($fingerprint, $this->getSetting(SERVER_SETTING_FINGERPRINT)) !== 0) {
      $this->handle = NULL;
      return FALSE;
    }
    switch ($this->getSetting(SERVER_SETTING_CONNECTION_TYPE)) {
      case SERVER_CONNECTION_PUBKEY:
        if (!ssh2_auth_pubkey_file($this->handle, 
            $this->getSetting(SERVER_SETTING_USER), 
            $this->getSetting(SERVER_SETTING_PUBKEY), 
            $this->getSetting(SERVER_SETTING_PRIVKEY), 
            $this->getSetting(SERVER_SETTING_PASSPHRASE))) {
          $this->handle = NULL;
          return FALSE;
        }
      default:
        $this->handle = NULL;
        return FALSE;
    }
    return TRUE;
  }
  
  public function sleep() {
    if (is_resource($this->handle)) {
      ssh2_exec($this->handle, 'exit');
      unset($this->handle);
    }
  }
  
  public function __destruct() {
    $this->sleep();
  }
  
  public function executeCommand($command, $args, &$out = array(), &$exit = 0) {
    $escapedCommand = escapeshellcmd(str_replace_all($command, $args, 'escapeshellarg'));
    $fullCommand = '(' . $escapedCommand . '); echo -e "\n$?"';
    $stream = ssh2_exec($this->handle, $fullCommand);
    stream_set_blocking($stream, TRUE);
    $output = stream_get_contents($stream);
    fclose($stream);
    $out = explode(PHP_EOL, $output);
    $exit = array_pop($out);
    return reset($out);
  }
  
  public function writeFile($destination, $contents, $mode=0644) {
    $temp = tempnam(sys_get_temp_dir(), 'dtk-up-');
    file_put_contents($temp, $contents);
    $result = ssh2_scp_send($this->handle, $temp, $destination, $mode);
    unlink($temp);
    return $result;
  }
  
  public function readFile($file) {
    $temp = $this->downloadFile($file);
    if (empty($temp)) {
      return FALSE;
    }
    $contents = file_get_contents($temp);
    unlink($temp);
    return $contents;
  }
  
  public function downloadFile($file, $destination = NULL) {
    if (empty($destination)) {
      $destination = tempnam(sys_get_temp_dir(), 'dtk-down-');
    }
    $result = ssh2_scp_recv($this->handle, $file, $destination);
    if ($result) {
      return $destination;
    }
    return FALSE;
  }
  
  public function deleteFile($file) {
    // Prevent deletion of the system root.
    if (extra_empty(trim($file, '/\\'))) {
      return FALSE;
    }
    $this->executeCommand('rm -rf !file', array(
      '!file' => $file,
    ), $out, $exit);
    return extra_empty($exit);
  }
  
  public function listFiles($dir) {
    $dir = trim($dir);
    $cmd = 'find !dir -type f';
    $args = array(
      '!dir' => $dir,
    );
    $this->executeCommand($cmd, $args, $out, $exit);
    if (!extra_empty($exit)) {
      return FALSE;
    }
    return $out;
  }
  
  public function listDirectories($dir) {
    $dir = trim($dir, " /\\\r\n");
    $cmd = 'find !dir -type d';
    $args = array(
      '!dir' => $dir,
    );
    $this->executeCommand($cmd, $args, $out, $exit);
    if (!extra_empty($exit)) {
      return FALSE;
    }
    $dirs = array();
    foreach ($out as $rdir) {
      $rdir = trim($rdir, " /\\\r\n");
      if (!empty($rdir)) {
        if ($rdir !== $dir) {
          $dirs[] = $rdir;
        }
      }
    }
    return $dirs;
  }
  
  public function copyDirectory($dir, $destination, $recurse = TRUE) {
    if (extra_empty(trim($dir, " /\\\r\n"))) {
      return FALSE;
    }
    if (extra_empty(trim($destination, " /\\\r\n"))) {
      return FALSE;
    }
    $files = $this->listFiles($dir);
    if (empty($files)) {
      return FALSE;
    }
    $success = TRUE;
    foreach ($files as $file) {
      $dest = assemble_path($destination, basename($file));
      if (!$this->downloadFile($file, $dest)) {
        $success = FALSE;
      }
    }
    if ($recurse) {
      $dirs = $this->listDirectories($dir);
      if (!empty($dirs)) {
        foreach ($dirs as $subdir) {
          $success = $this->copyDirectory($subdir, assemble_path($destination, basename($subdir)), TRUE) && $success;
        }
      }
    }
    return $success;
  }
  
}