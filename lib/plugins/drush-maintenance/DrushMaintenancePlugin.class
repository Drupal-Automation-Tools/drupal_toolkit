<?php
/**
 * @file Defines the DrushMaintenancePlugin class.
 */

/**
 * Responsible for various functions relating to the update process.
 */
class DrushMaintenancePlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $this->events()->registerListener(array(
      dtk_constant('EVENT_UPDATE_PREPARE_FOR_UPDATE'),
      dtk_constant('EVENT_UPDATE_PREPARE_FOR_REFRESH'),
      dtk_constant('EVENT_ROLLBACK_FINISH'),
      dtk_constant('EVENT_ROLLBACK_PREPARE'),
      dtk_constant('EVENT_UPDATE_PREPARE_SUBSITE'),
      dtk_constant('EVENT_UPDATE_PREP_SUBSITE_FOR_REFRESH'),
      dtk_constant('EVENT_ROLLBACK_SUBSITE_PREP'),
      dtk_constant('EVENT_ROLLBACK_SUBSITE_FINISH'),
      dtk_constant('EVENT_PRE_RESET_DRUPAL_PASSWORD'),
      dtk_constant('EVENT_POST_RESET_DRUPAL_PASSWORD'),
    ), $this);
  }
  
  public function captureEvent(DtkEvent &$context, $eventType) {
    switch ($eventType) {
      case EVENT_ROLLBACK_SUBSITE_FINISH:
      case EVENT_ROLLBACK_FINISH:
      case EVENT_UPDATE_PREPARE_FOR_REFRESH:
      case EVENT_UPDATE_PREP_SUBSITE_FOR_REFRESH:
      case EVENT_POST_RESET_DRUPAL_PASSWORD:
        if ($context->checkExecution()) {
          $context->setResult($this->setMaintenanceMode($context->getEntity(), FALSE));
        }
        break;
      case EVENT_PRE_RESET_DRUPAL_PASSWORD:
      case EVENT_ROLLBACK_SUBSITE_PREP:
      case EVENT_ROLLBACK_PREPARE:
      case EVENT_UPDATE_PREPARE_FOR_UPDATE:
      case EVENT_UPDATE_PREPARE_SUBSITE:
        if ($context->checkExecution()) {
          $context->setResult($this->setMaintenanceMode($context->getEntity(), TRUE));
        }
        break;
    }
  }
  
  /**
   * Manages the maintenance mode for a site.
   * 
   * @param DrupalSite $site
   *   The DrupalSite to change the maintenance mode on.
   * @param boolean $on
   *   TRUE to engage maintenance mode, FALSE to disengage it.
   * 
   * @return boolean
   *   TRUE if the maintenance mode was correctly set on all aliases, otherwise
   *   FALSE.
   */
  private function setMaintenanceMode(GenericDrupalEntity $site, $on = TRUE) {
    $alias = $site->getDrushAlias(TRUE);
    if (empty($alias)) { return FALSE; }
    if ($on) {
      $this->working(STRING_WORKING_MAINTENANCE_MODE_ENGAGE_ITEM, array(
        '!alias' => $alias,
      ));
    }
    else {
      $this->working(STRING_WORKING_MAINTENANCE_MODE_DISENGAGE_ITEM, array(
        '!alias' => $alias,
      ));
    }
    if (!drush_maintenance_mode(!!$on, $alias)) {
      $this->error(STRING_MAINTENANCE_MODE_FAILURE, array(
        '!state' => $on ? 1 : 0,
        '!alias' => $alias,
      ));
      return FALSE;
    }
    if ($on) {
      $this->working(STRING_SUCCESS_MAINTENANCE_MODE_ENGAGE);
    }
    else {
      $this->working(STRING_SUCCESS_MAINTENANCE_MODE_DISENGAGE);
    }
    return TRUE;
  }
  
}