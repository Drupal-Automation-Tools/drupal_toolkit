<?php
/**
 * @file Defines the LinuxCrontab class.
 */

/**
 * Specific implementation of a cron manager that is aimed at linux. 
 * Specifically, this uses the /etc/cron.d folder and drops in files for each
 * task that needs to be created.
 */
class LinuxCrontab extends GenericCronManager {
  
  public function scheduleTask($identifier, $task) {
    $frequency = $this->getCronFrequency();
    $line = $frequency . ' ' . $task;
    return $this->machine()->writeFile($this->normalizeFilename($identifier), $line);
  }
  
  public function deleteScheduledTask($identifier) {
    return $this->machine()->deleteFile($this->normalizeFilename($identifier));
  }
  
  /**
   * Converts the identifier into a filename.
   * 
   * @param string $identifier
   *   The unique identifier for a task.
   * 
   * @return string
   *   The path to a file that can be used for the definition.
   */
  private function normalizeFilename($identifier) {
    $s1 = preg_replace('`[^A-Za-z0-9_.-]`', '_', $identifier);
    $s2 = preg_replace('`_{2,}`', '_', $s1);
    return assemble_path('/etc/cron.d', trim($s2, '_'));
  }
  
  /**
   * Retrieves the cron frequency.
   * 
   * @return string
   *   The cron frequency.
   */
  private function getCronFrequency() {
    $components = array(
      'minute' => '*',
      'hour' => '*',
      'day' => '*',
      'month' => '*',
      'weekday' => '*',
    );
    switch ($this->config()->getConfig(CONFIG_CRONTAB_FREQUENCY)) {
      case '@yearly':
      case '@annually':
        $components['month'] = '@';
        $components['day'] = '@';
        break;
      case '@monthly':
        $components['day'] = '@';
        break;
      case '@weekly':
        $components['weekday'] = '@';
        break;
      case '@hourly':
        $components['hour'] = '@';
        break;
      case '@minute':
        $components['minute'] = '@';
        break;
      default:
        $pieces = explode(' ', $this->config()->getConfig(CONFIG_CRONTAB_FREQUENCY));
        $keys = array_keys($components);
        foreach ($pieces as $k => $pattern) {
          $components[$keys[$k]] = $pattern;
        }
        break;
    }
    foreach ($components as $element => $pattern) {
      $components[$element] = crontab_simplify($element, $pattern);
    }
    return implode(' ', $components);
  }
  
}
