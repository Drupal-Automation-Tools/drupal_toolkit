<?php
/**
 * @file Defines the CronPlugin class.
 * 
 * @defgroup cron_types "Cron Types"
 * The different type of cron jobs that can be installed.
 */

/**
 * Responsible for installing cron tasks for Drupal.
 * 
 * @ingroup plugins
 */
class CronPlugin extends GenericPlugin implements EventListener, ServerInteractionDependency {

  private $servers;
    
  public function setServerManager(ServerInteractionManagerInterface $servers) {
    $this->servers = $servers;
  }
  
  public function servers() {
    return $this->servers;
  }
  
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_INSTALL_EXTRAS,
      EVENT_CAST_CRON_SERVER,
      EVENT_REMOVE_ALL,
      EVENT_UPDATE_PRIOR_ACTIONS,
      EVENT_REMOVE_SUBSITE_ALL,
    ), $this);
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_CRONTAB_FREQUENCY => '@daily',
      CONFIG_DEFAULT_CRON_TYPE => CRON_TYPE_CRONTAB,
      CONFIG_STATIC_CRON => FALSE,
    ));
    $this->config()->extendFromOption(CONFIG_CRONTAB_FREQUENCY, OPTION_CRONTAB_FREQUENCY);
  }
  
  public function captureEvent(DtkEvent &$context, $eventType) {
    switch($eventType) {
      case EVENT_UPDATE_PRIOR_ACTIONS:
        if ($context->checkExecution()) {
          $context->setResult($this->updateAll($context->getSite()));
        }
        break;
      case EVENT_REMOVE_SUBSITE_ALL:
      case EVENT_REMOVE_ALL:
        if ($context->checkExecution()) {
          $context->setResult($this->deleteCronTasks($context->getEntity()));
        }
        break;
      case EVENT_INSTALL_EXTRAS:
        if ($context->checkExecution()) {
          $context->setResult($this->installCronJob($context->getEntity()));
        }
        break;
      case EVENT_CAST_CRON_SERVER:
        $server = $this->castCronMachine($context->getServer(), $context->getType());
        if (!empty($server)) {
          $context->setCastedServer($server);
        }
        break;
    }
  }
  
  /**
   * Casts a server for cron usage.
   * 
   * @param PhysicalServerInterface $server
   *   The server being cast.
   * 
   * @param string $type
   *   The type string to cast the server based on.
   * 
   * @return CronManagerInterface
   *   A cron manager object, or NULL if $type is not appropriate.
   */
  private function castCronMachine(PhysicalServerInterface $server, $type) {
    switch ($type) {
      case CRON_TYPE_CRONTAB:
        return new LinuxCrontab($server);
    }
    return NULL;
  }
  
  /**
   * Fetches a list of machines to use for cron.
   * 
   * @return array
   *   An array of CronManagerInterface objects
   */
  private function getCronMachines() {
    $type = $this->config()->getConfig(CONFIG_DEFAULT_CRON_TYPE);
    return $this->servers()->getServerList(
        SERVER_TYPE_CRON, 
        EVENT_CAST_CRON_SERVER,
        SERVER_SETTING_CRON_TYPE,
        $type,
        TRUE
    );
  }
  
  /**
   * Updates all the cron tasks associated with a site.
   * 
   * @param DrupalSite $site
   *   The site to update cron tasks.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function updateAll(DrupalSite $site) {
    if (extra_empty($this->config()->getConfig(CONFIG_STATIC_CRON))) {
      return $this->installCronJob($site, TRUE);
    }
    return TRUE;
  }
  
  /**
   * Deletes all the cron tasks from a site.
   * 
   * @param GenericDrupalEntity $site
   *   The site to delete cron tasks.
   * 
   * @return boolean
   *   TRUE if success, otherwise FALSE.
   */
  private function deleteCronTasks(GenericDrupalEntity $site) {
    $machines = $site->getSetting(SITE_CRON_MACHINES);
    if (empty($machines)) { return TRUE; }
    $this->working(STRING_WORKING_CRON_DELETE);
    $alias = $site->getSetting(SITE_DRUSH_ALIAS, NULL, TRUE);
    if (empty($alias)) { return FALSE; }
    $ret = TRUE;
    foreach ($machines as $key => $machine) {
      $this->working(STRING_WORKING_CRON_DELETE_ITEM, array(
        '!name' => $key,
      ));
      if (!$this->deleteCronTask($key, $machine, $alias, $site->uuid())) {
        $ret = FALSE;
      }
    }
    if ($ret) { $this->success(STRING_SUCCESS_CRON_DELETE); }
    return $ret;
  }
  
  /**
   * Deletes a cron task from a site.
   * 
   * @param string $machinename
   *   The machine name of the machine.
   * @param CronManagerInterface $machine
   *   The server instance.
   * @param string $identifier
   *   The identifier used to build the cron task.
   * @param string $sitename
   *   The name of the site.
   * 
   * @return boolean
   *   Whether or not creating the cron task was successful.
   */
  private function deleteCronTask($machinename, $machine, $identifier, $sitename) {
    if ($machine instanceof CronManagerInterface) {
      if ($machine->machine()->initialize()) {
        if (!$machine->deleteScheduledTask($identifier)) {
            $this->warn(STRING_COULD_NOT_DELETE_CRON, array(
              '!site' => $sitename,
              '!alias' => $identifier,
              '!name' => $machinename,
            ));
          return FALSE;
        }
        return TRUE;
      }
    }
    $this->warn(STRING_COULD_NOT_INIT_SERVER, array(
      '!site' => $sitename,
      '!name' => $machinename,
    ));
    return FALSE;
  }
  
  /**
   * Installs a cron job for the site.
   * 
   * @param DrupalSite $site
   *   The site to install cron tasks for.
   * 
   * @return boolean
   *   TRUE if the cron tabs were installed successfully, otherwise FALSE.
   */
  private function installCronJob(GenericDrupalEntity $site, $update = FALSE) {
    $this->working(STRING_WORKING_CRON_SETUP);
    $alias = $site->getDrushAlias(TRUE);
    if (empty($alias)) { return FALSE; }
    $cron = drush_get_cron_url($alias);
    if (empty($cron)) { $this->error(STRING_ERROR_NO_CRON_URL); return FALSE; }
    $command = '/usr/bin/wget ' . escapeshellarg($cron);
    $machines = $this->getCronMachines();
    $frequencies = $site->getSetting(SITE_SETTING_CRONTAB_FREQUENCY, array());
    foreach ($machines as $key => $machine) {
      if ($machine instanceof CronManagerInterface) {
        if ($update) {
          if (!extra_empty($machine->machine()->getSetting(SERVER_SETTING_STATIC_CRON))) {
            continue;
          }
        }
        $this->working(STRING_WORKING_CRON_SETUP_ITEM, array(
          '!name' => $key,
        ));
        $frequency = NULL;
        if (isset($frequencies[$key])) {
          $frequency = $frequencies[$key];
        }
        if (!$machine->scheduleTask($alias, $command, $frequency)) {
          $this->error(STRING_ERROR_COULD_NOT_CREATE_CRON, array(
            '!server' => $key,
            '!alias' => $alias,
          ));
          return FALSE;
        }
        else {
          $frequencies[$key] = $frequency;
        }
      }
    }
    $site->setSetting(SITE_SETTING_CRONTAB_FREQUENCY, $frequencies);
    $site->setSetting(SITE_CRON_MACHINES, $machines);
    $this->success(STRING_SUCCESS_CRON_SETUP);
    return TRUE;
  }
  
}