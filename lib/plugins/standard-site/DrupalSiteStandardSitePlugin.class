<?php
/**
 * @file Defines the DrupalSiteStandardSitePlugin class.
 */

/**
 * Config setting to skip the redundant symlinks.
 * 
 * If set, symlinks for the default domains won't be created.
 * 
 * @ingroup config
 */
define('CONFIG_SKIP_REDUNDANT_SYMLINKS', 'skip-redundant-symlinks');

/**
 * Option to override CONFIG_SKIP_REDUNDANT_SYMLINKS.
 * 
 * @ingroup args
 */
define('OPTION_SKIP_REDUNDANT_SYMLINKS', 'skip-redundant-symlinks');

/**
 * String token for if the settings.php file was not found.
 * 
 * @ingroup strings
 */
define('STRING_COULD_NOT_FIND_SETTINGS_PHP', 'standard_site.error.no-settings-file');

/**
 * String token for if a redundant symlink was not created (these are symlinks
 * to the default site).
 * 
 * @ingroup strings
 */
define('STRING_COULD_NOT_SYMLINK_SITE', 'standard_site.error.redundant-symlink-failure');

/**
 * String token for if there is an error while updating the settings.php file.
 * 
 * @ingroup strings
 */
define('STRING_UNABLE_TO_APPEND_SETTINGS', 'standard_site.error.unable-to-update-settings');

/**
 * String token for if there is an error while saying the settings.php template.
 * 
 * @ingroup strings
 */
define('STRING_UNABLE_TO_CREATE_SETTINGS_TEMPLATE', 'standard_site.error.unable-to-create-settings-template');

/**
 * String token for if there is an error reading the sites directory.
 * 
 * @ingroup strings
 */
define('STRING_COULD_NOT_READ_SITES_DIR', 'standard_site.error.could-not-read-sites-dir');

/**
 * String token for if the site could not be symlinked into the build.
 * 
 * @ingroup strings
 */
define('STRING_UNABLE_TO_SYMLINK_SITE', 'standard_site.error.unable-to-symlink');

/**
 * Fired to retrieve extra settings from other plugins.
 * 
 * @ingroup events
 */
define('EVENT_GET_EXTRA_SETTINGS', 'get-extra-settings');

/**
 * Fired to allow other plugins to extend this process.
 * 
 * @ingroup events
 */
define('EVENT_CONTINUE_STANDARD_SITES', 'standard-site-setup-continue');

/**
 * Site setting for the location of the settings.php file.
 * 
 * @ingroup site_settings
 */
define('SITE_SETTINGS_FILE', 'settings-file');

/**
 * Site setting for the location of the settings.php template file.
 * 
 * @ingroup site_settings
 */
define('SITE_SETTINGS_TEMPLATE', 'settings-template');

/**
 * String token for if we cannot delete the default directory.
 * 
 * @ingroup strings
 */
define('STRING_UNABLE_TO_DELETE_DEFAULT', 'standard_site.error.unable-to-delete-default');

/**
 * String token for when the default site is about to be removed.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_REMOVE_DEFAULT_SITE', 'standard_site.working.remove-default');

/**
 * String token for when the subsite's sites directory is about to be built.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CREATE_SUBSITE_SITES', 'standard_site.working.create-subsite-sites');

/**
 * String token for when the subsite's settings.php file is about to be built.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CREATE_SUBSITE_SETTINGS', 'standard_site.working.create-subsite-settings');

/**
 * String token for when the site's sites directory is about to be built.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CREATE_SITES', 'standard_site.working.create-sites');

/**
 * String token for when the site's settings.php file is about to be built.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CREATE_SITE_SETTINGS', 'standard_site.working.create-site-settings');

/**
 * String token for when redundant symlinks are about to be created.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CREATE_REDUNDANT_SYMLINKS', 'standard_site.working.create-redundant-symlinks');

/**
 * String token for when all the sites are about to be symlinked.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_SYMLINK_SITES', 'standard_site.working.symlink-sites');

/**
 * String token for when a specific site is about to be symlinked.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_SYMLINK_SITE', 'standard_site.working.symlink-site');

/**
 * String token for when a redundant symlink is about to be created.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CREATE_REDUNDANT_SYMLINK', 'standard_site.working.create-redundant-symlink');

/**
 * String token for when the default site was removed successfully.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_REMOVE_DEFAULT_SITE', 'standard_site.success.remove-default');

/**
 * String token for when the subsite's sites were created successfully.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_CREATE_SUBSITE_SITES', 'standard_site.success.create-subsite-sites');

/**
 * String token for when the site's sites were created successfully.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_CREATE_SITES', 'standard_site.success.create-sites');

/**
 * String token for when the redundant symlinks were created successfully.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_CREATE_REDUNDANT_SYMLINKS', 'standard_site.success.create-redundant-symlinks');

/**
 * String token for when all the sites were created successfully.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_SYMLINK_SITES', 'standard_site.success.symlink-sites');

/**
 * Site setting that holds the list of root symlinks.
 * 
 * @ingroup site_settings
 */
define('SITE_ROOT_SYMLINKS', 'root-symlinks');

/**
 * String token for when creating root symlinks.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CREATING_ROOT_SYMLINKS', 'standard_site.working.creating-root-symlinks');

/**
 * String token for when creating a root symlink.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CREATING_ROOT_SYMLINK', 'standard_site.working.creating-root-symlink');

/**
 * String token for when all the root symlinks are created.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_CREATING_ROOT_SYMLINKS', 'standard_site.success.creating-root-symlinks');

/**
 * String token for when there is an error creating a root symlink.
 * 
 * @ingroup strings
 */
define('STRING_ERROR_UNABLE_TO_CREATE_ROOT_SYMLINK', 'standard_site.error.unable-to-create-root-symlink');

/**
 * Responsible for managing the basic sites configuration for Drupal sites.
 * 
 * This refers mostly to the contents of the Drupal sites folder, except for the
 * "all" folder (which is managed by the build). These folders are kept in
 * another location and symlinked to on build.
 * 
 * Certain directories are created for the initial site as symlinks of 
 * 'default'. This behaviour prevents the default site from being overridden
 * by a subsite.
 */
class DrupalSiteStandardSitePlugin extends GenericPlugin implements EventListener {
  
  private static $defaultSettingsName = 'default.settings.php';
  private static $settingsName = 'settings.php';
  private static $defaultDirectory = 'default';
  private static $filesDirectory = 'files';
  private static $sitesDirectory = 'sites';
    
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_SITE_BUILD_SITES,
      EVENT_UPDATE_SITES,
      EVENT_ROLLBACK_PHASE3,
      EVENT_SUBSITE_BUILD_CODEBASE,
      EVENT_UPDATE_SUBSITE_SITES,
      EVENT_ROLLBACK_SUBSITE_CLEAN,
    ), $this);
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_SKIP_REDUNDANT_SYMLINKS => FALSE,
    ));
    $this->config()->extendFromOption(CONFIG_SKIP_REDUNDANT_SYMLINKS, OPTION_SKIP_REDUNDANT_SYMLINKS);
  }
    
  public function captureEvent(DtkEvent &$context, $type) {
    switch ($type) {
      case EVENT_ROLLBACK_SUBSITE_CLEAN:
      case EVENT_UPDATE_SUBSITE_SITES:
        if ($context->checkExecution()) {
          $context->setResult($this->refreshSubsiteSymlinks($context->getSubSite()));
        }
        break;
      case EVENT_UPDATE_SITES:
        if ($context->checkExecution()) {
          $context->setResult($this->updateSites($context->getSite()));
        }
        break;
      case EVENT_SITE_BUILD_SITES:
        if ($context->checkExecution()) {
          $context->setResult($this->initializeSites($context->getSite()));
        }
        break;
      case EVENT_ROLLBACK_PHASE3:
        if ($context->checkExecution()) {
          $context->setResult($this->refreshSiteSymlinks($context->getSite(), $context->getVariable('revertBuild')));
        }
        break;
      case EVENT_SUBSITE_BUILD_CODEBASE:
        if ($context->checkExecution()) {
          $context->setResult($this->initializeSubSites($context->getSubSite()));
        }
        break;
    }
  }
  
  private function refreshSubsiteSymlinks(DrupalSubSite $subsite) {
    $currentBase = $subsite->getSetting(SITE_SETTING_CURRENT_BUILD, NULL, TRUE);
    if (empty($currentBase)) { return FALSE; }
    if (!$this->createRootSymlinks($currentBase, $subsite)) {
      return FALSE;
    }
    return TRUE;
  }
  
  /**
   * Responsible for updating all the site symlinks
   * 
   * @param DrupalSite $site
   *   The site to update symlinks for.
   * 
   * @return boolean
   *   TRUE if all the sites were updated successfully, otherwise FALSE.
   */
  private function updateSites(DrupalSite $site) {
    $this->working(STRING_WORKING_REMOVE_DEFAULT_SITE);
    $defaultSite = $site->getSetting(SITE_SETTING_CURRENT_BUILD, NULL, TRUE);
    if (empty($defaultSite)) { return FALSE; }
    $defaultDirectory = assemble_path($defaultSite, self::$sitesDirectory, self::$defaultDirectory);
    remove_directory($defaultDirectory);
    if (is_dir($defaultDirectory)) {
      $this->error(STRING_UNABLE_TO_DELETE_DEFAULT);
      return FALSE;
    }
    $this->success(STRING_SUCCESS_REMOVE_DEFAULT_SITE);
    return $this->symlinkAllSites($site);
  }
  
  /**
   * Responsible for initializing the sites upon build.
   * 
   * @param DrupalSite $site
   *   The site to initialize sites for.
   * 
   * @return boolean
   *   TRUE if they were initialized successfully, otherwise FALSE.
   */
  private function initializeSites(DrupalSite $site) {
    $this->working(STRING_WORKING_CREATE_SITES);
    
    // Variable initialization
    $currentBase = $site->getSetting(SITE_SETTING_CURRENT_BUILD, NULL, TRUE);
    if (empty($currentBase)) { return FALSE; }
    $structureSites = $site->getSetting(SITE_SITES_DIR, NULL, TRUE);
    if (empty($structureSites)) { return FALSE; }
    
    // Move default site to where we want it to be.
    $realDefault = assemble_path($site->getBuildFolder(), $structureSites, self::$defaultDirectory);
    rename(assemble_path($currentBase, 'sites', self::$defaultDirectory), $realDefault);
    
    // Make symlinks out of all the URLs if desired
    $makeSymlinks = extra_empty($this->config()->getConfig(CONFIG_SKIP_REDUNDANT_SYMLINKS));
    if ($makeSymlinks) {
      if (!$this->createRedundantSymlinks($site, self::$defaultDirectory, assemble_path($site->getBuildFolder(), $structureSites))) {
        return FALSE;
      }
    }
    if (!$this->createDefaultSettingsFile($site, $realDefault)) {
      return FALSE;
    }
    // Copy the settings to the real template file.
    if (!$this->writeSettingsFile($site, assemble_path($site->getBuildFolder(), $structureSites))) {
      return FALSE;
    }
    if (!$this->symlinkAllSites($site)) {
      return FALSE;
    }
    if (!$this->createRootSymlinks($currentBase, $site)) {
      return FALSE;
    }
    $this->success(STRING_SUCCESS_CREATE_SITES);
    return TRUE;
  }
  
  /**
   * Responsible for modifying and registering the default settings.php file.
   * 
   * @param DrupalSite $site
   *   The site to modify the settings.php file for.
   * @param boolean $realDefault
   *   The path to the sites/default folder.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function createDefaultSettingsFile(DrupalSite $site, $realDefault) {
    // Assemble the default settings.php file.
    $this->working(STRING_WORKING_CREATE_SITE_SETTINGS);
    $defaultSettingsFile = assemble_path($realDefault, self::$defaultSettingsName);
    if (!file_exists($defaultSettingsFile)) {
      $this->error(STRING_UNABLE_TO_CREATE_SETTINGS_TEMPLATE);
      return FALSE;
    }
    if (!$this->appendExtraSettings($site, $defaultSettingsFile, TRUE)) {
      return FALSE;
    }
    $site->setSetting(SITE_SETTINGS_TEMPLATE, $defaultSettingsFile);
    $site->registerServerFile($defaultSettingsFile);
    return TRUE;
  }
  
  /**
   * Writes the settings file out for the site or subsite.
   * 
   * @param GenericDrupalEntity $entity
   *   The entity we're writing a file for.
   * @param string $sitesDirectory
   *   Path to the sites directory for the build.
   * @param string $targetDirectory
   *   Name of the folder underneath $sitesDirectory where a new settings.php
   *   file is being built.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function writeSettingsFile(GenericDrupalEntity $entity, $sitesDirectory, $targetDirectory = NULL) {
    $this->working(
        $entity instanceof DrupalSubSite ? STRING_WORKING_CREATE_SUBSITE_SETTINGS : STRING_WORKING_CREATE_SITE_SETTINGS
    );
    if (empty($targetDirectory)) {
      $targetDirectory = self::$defaultDirectory;
    }
    $template = NULL;
    if ($entity instanceof DrupalSubSite) {
      $template = $entity->getParentSite()->getSetting(SITE_SETTINGS_TEMPLATE, NULL, TRUE);
    }
    else {
      $template = $entity->getSetting(SITE_SETTINGS_TEMPLATE, NULL, TRUE);
    }
    if (empty($template)) { return FALSE; }
    $target = assemble_path($sitesDirectory, $targetDirectory, self::$settingsName);
    copy($template, $target);
    if (!is_readable($target)) {
      $this->error(STRING_COULD_NOT_FIND_SETTINGS_PHP);
      return FALSE;
    }
    if (!$this->appendExtraSettings($entity, $target, FALSE)) {
      return FALSE;
    }
    $entity->setSetting(SITE_SETTINGS_FILE, $target);
    $entity->registerServerFile($target);
    $entity->registerServerFile(assemble_path($sitesDirectory, $targetDirectory, self::$filesDirectory));
    return TRUE;
  }
  
  /**
   * Adds extra settings to a settings.php or default.settings.php file.
   * 
   * @param GenericDrupalEntity $entity
   *   The entity to add lines for.
   * @param string $settingsFile
   *   The path to the file that is being updated.
   * @param boolean $default
   *   Set to TRUE if this is for a default file (that will impact all subsites).
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function appendExtraSettings(GenericDrupalEntity $entity, $settingsFile, $default = FALSE) {
    $event = new DrupalSettingsEvent($entity, $default);
    $this->events()->fireEvent(EVENT_GET_EXTRA_SETTINGS, $event);
    $settings = $event->getSettings();
    if (!empty($settings)) {
      if (!file_append_contents($settingsFile, implode(PHP_EOL, $settings))) {
        $this->error(STRING_UNABLE_TO_APPEND_SETTINGS);
        return FALSE;
      }
    }
    return TRUE;
  }
  
  /**
   * Initializes a subsite's sites directories.
   * 
   * @param DrupalSubSite $subsite
   *   The subsite to build sites for.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function initializeSubSites(DrupalSubSite $subsite) {
    $this->working(STRING_WORKING_CREATE_SUBSITE_SITES);
    
    // Variables
    $currentBase = $subsite->getParentSite()->getSetting(SITE_SETTING_CURRENT_BUILD, NULL, TRUE);
    if (empty($currentBase)) { return FALSE; }
    $structureSites = $subsite->getParentSite()->getSetting(SITE_SITES_DIR, NULL, TRUE);
    if (empty($structureSites)) { return FALSE; }
    $primary = $subsite->getSetting(SITE_PRIMARY_URL, NULL, TRUE);
    if (empty($primary)) { return FALSE; }
    
    // Build primary site folder.
    $primarySite = DrupalSite::convertURLToSiteName($primary);
    $primarySiteDirectory = assemble_path($subsite->getParentSite()->getBuildFolder(), $structureSites, $primarySite);
    mkdir($primarySiteDirectory);
    
    // Shared functionality
    if (!$this->writeSettingsFile(
        $subsite, 
        assemble_path($subsite->getParentSite()->getBuildFolder(), $structureSites), 
        $primarySite
    )) {
      return FALSE;
    }
    if (!$this->createRedundantSymlinks($subsite, $primarySite, assemble_path($subsite->getParentSite()->getBuildFolder(), $structureSites))) {
      return FALSE;
    }
    if (!$this->refreshSiteSymlinks($subsite->getParentSite())) {
      return FALSE;
    }
    if (!$this->refreshSubsiteSymlinks($subsite)) {
      return FALSE;
    }
    $this->success(STRING_SUCCESS_CREATE_SUBSITE_SITES);
    return TRUE;
  }
  
  /**
   * Creates all the necessary root symlinks for subsites and paths.
   * 
   * @param string $base
   *   Current/new codebase root directory.
   * @param GenericDrupalEntity $entity
   *   The entity to create symlinks for.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function createRootSymlinks($base, GenericDrupalEntity $entity) {
    $roots = $this->getRootSymlinks($entity);
    if (empty($roots)) {
      return TRUE;
    }
    $this->working(STRING_WORKING_CREATING_ROOT_SYMLINKS);
    $ret = TRUE;
    
    foreach ($roots as $root) {
      $this->working(STRING_WORKING_CREATING_ROOT_SYMLINK, array(
        '!link' => $root,
      ));
      $link = assemble_path($base, $root);
      if (!is_link($link)) {
        symlink($base, $link);
        if (!is_link($link)) {
          $this->error(STRING_ERROR_UNABLE_TO_CREATE_ROOT_SYMLINK, array(
            '!link' => $link,
          ));
          $ret = FALSE;
        }
      }
    }
    if ($ret) {
      $this->success(STRING_SUCCESS_CREATING_ROOT_SYMLINKS);
    }
    return $ret;
  }
  
  /**
   * Retrieves a list of root symlinks that should exist. Note that anything
   * returned by this function CANNOT be used as path in Drupal without
   * messing up the symlink pattern used.
   * 
   * @param GenericDrupalEntity $entity
   *   The entity to get paths for.
   * 
   * @return array
   *   An array of path components that need to exist as symlinks.
   */
  private function getRootSymlinks(GenericDrupalEntity $entity) {
    $dirs = array();
    foreach ($entity->getAllURLs() as $url) {
      if (strpos($url, '://') === FALSE) {
        $url = 'http://' . $url;
      }
      $path = parse_url($url, PHP_URL_PATH);
      if (!empty($path)) {
        $path = str_replace('\\' ,'/', $path);
        $pieces = explode('/', $path);
        foreach ($pieces as $piece) {
          $piece = trim($piece);
          if (!empty($piece)) {
            if (!in_array($piece, $dirs)) {
              $dirs[] = $piece;
            }
          }
        }
      }
    }
    return $dirs;
  }
  
  /**
   * Refreshes all the site symlinks.
   * 
   * @param DrupalSite $site
   *   The site to update symlinks for.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE;
   */
  private function refreshSiteSymlinks(DrupalSite $site) {
    $currentBase = $subsite->getSetting(SITE_SETTING_CURRENT_BUILD, NULL, TRUE);
    if (empty($currentBase)) { return FALSE; }
    if (!$this->createRootSymlinks($currentBase, $subsite)) {
      return FALSE;
    }
    if (!$this->symlinkAllSites($site)) {
      return FALSE;
    }
    return TRUE;
  }
  
  /**
   * Symlinks all the sites to the current build.
   * 
   * @param DrupalSite $site
   *   The site to use.
   * 
   * @return boolean
   *   TRUE if the sites could be symlinked, otherwise FALSE.
   */
  private function symlinkAllSites(DrupalSite $site) {
    $this->working(STRING_WORKING_SYMLINK_SITES);
    $staticSites = assemble_path($site->getBuildFolder(), $site->getSetting(SITE_SITES_DIR));
    $h = opendir($staticSites);
    if (empty($h)) {
      $this->error(STRING_COULD_NOT_READ_SITES_DIR);
      return FALSE;
    }
    $targetBase = assemble_path($site->getSetting(SITE_SETTING_CURRENT_BUILD), 'sites');
    while (($dir = readdir($h)) !== FALSE) {
      if ($dir != '.' && $dir != '..') {
        $this->working(STRING_WORKING_SYMLINK_SITE, array(
          '!site' => $dir,
        ));
        $full = assemble_path($staticSites, $dir);
        if (is_dir($full)) {
          $linkPath = assemble_path($targetBase, $dir);
          if (!is_link($linkPath)) {
            symlink($full, $linkPath);
            if (!is_link($linkPath)) {
              $this->error(STRING_UNABLE_TO_SYMLINK_SITE);
              return FALSE;
            }
          }
        }
      }
    }
    $this->success(STRING_SUCCESS_SYMLINK_SITES);
    return TRUE;
  }
  
  /**
   * Creates redundant symlinks within the sites directory. A redundant
   * symlink provides an alternative domain and/or path by which a site
   * can be accessed.
   * 
   * @param GenericDrupalEntity $site
   *   The entity to create symlinks for.
   * @param string $primary
   *   The name of the primary site.
   * @param string $path
   *   The root path to the sites directory.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function createRedundantSymlinks(GenericDrupalEntity $site, $primary, $path) {
    $this->working(STRING_WORKING_CREATE_REDUNDANT_SYMLINKS);
    $urls = $site->getAllURLs();
    $default = assemble_path($path, $primary);
    foreach ($urls as $url) {
      $name = DrupalSite::convertURLToSiteName($url);
      if ($name !== $primary) {
        $this->working(STRING_WORKING_CREATE_REDUNDANT_SYMLINK, array(
          '!name' => $name,
        ));
        $site->appendSettingValue(SITE_EXISTING_SITES, $name);
        $link = assemble_path($path, $name);
        symlink($default, $link);
        if (!is_link($link)) {
          $this->error(STRING_COULD_NOT_SYMLINK_SITE, array(
            '!name' => $name,
          ));
          return FALSE;
        }
      }
    }
    $this->success(STRING_SUCCESS_CREATE_REDUNDANT_SYMLINKS);
    return TRUE;
  }
  
}