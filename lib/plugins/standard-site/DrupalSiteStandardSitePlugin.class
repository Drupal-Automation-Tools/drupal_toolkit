<?php
/**
 * @file Defines the DrupalSiteStandardSitePlugin class.
 */

/**
 * Config setting to skip the redundant symlinks.
 * 
 * If set, symlinks for the default domains won't be created.
 * 
 * @ingroup config
 */
define('CONFIG_SKIP_REDUNDANT_SYMLINKS', 'skip-redundant-symlinks');

/**
 * Option to override CONFIG_SKIP_REDUNDANT_SYMLINKS.
 * 
 * @ingroup args
 */
define('OPTION_SKIP_REDUNDANT_SYMLINKS', 'skip-redundant-symlinks');

/**
 * String token for if the settings.php file was not found.
 * 
 * @ingroup strings
 */
define('STRING_COULD_NOT_FIND_SETTINGS_PHP', 'standard_site.error.no-settings-file');

/**
 * String token for if a redundant symlink was not created (these are symlinks
 * to the default site).
 * 
 * @ingroup strings
 */
define('STRING_COULD_NOT_SYMLINK_SITE', 'standard_site.error.redundant-symlink-failure');

/**
 * String token for if there is an error while updating the settings.php file.
 * 
 * @ingroup strings
 */
define('STRING_UNABLE_TO_APPEND_SETTINGS', 'standard_site.error.unable-to-update-settings');

/**
 * String token for if there is an error while saying the settings.php template.
 * 
 * @ingroup strings
 */
define('STRING_UNABLE_TO_CREATE_SETTINGS_TEMPLATE', 'standard_site.error.unable-to-create-settings-template');

/**
 * String token for if there is an error reading the sites directory.
 * 
 * @ingroup strings
 */
define('STRING_COULD_NOT_READ_SITES_DIR', 'standard_site.error.could-not-read-sites-dir');

/**
 * String token for if the site could not be symlinked into the build.
 * 
 * @ingroup strings
 */
define('STRING_UNABLE_TO_SYMLINK_SITE', 'standard_site.error.unable-to-symlink');

/**
 * Fired to retrieve extra settings from other plugins.
 * 
 * @ingroup events
 */
define('EVENT_GET_EXTRA_SETTINGS', 'get-extra-settings');

/**
 * Fired to allow other plugins to extend this process.
 * 
 * @ingroup events
 */
define('EVENT_CONTINUE_STANDARD_SITES', 'standard-site-setup-continue');

/**
 * Site setting for the location of the settings.php file.
 * 
 * @ingroup site_settings
 */
define('SITE_SETTINGS_FILE', 'settings-file');

/**
 * Site setting for the location of the settings.php template file.
 * 
 * @ingroup site_settings
 */
define('SITE_SETTINGS_TEMPLATE', 'settings-template');

/**
 * String token for if we cannot delete the default directory.
 * 
 * @ingroup strings
 */
define('STRING_UNABLE_TO_DELETE_DEFAULT', 'standard_site.error.unable-to-delete-default');

/**
 * Responsible for managing the basic sites configuration for Drupal sites.
 * 
 * This refers mostly to the contents of the Drupal sites folder, except for the
 * "all" folder (which is managed by the build). These folders are kept in
 * another location and symlinked to on build.
 * 
 * Certain directories are created for the initial site as symlinks of 
 * 'default'. This behaviour prevents the default site from being overridden
 * by a subsite.
 */
class DrupalSiteStandardSitePlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_SITE_BUILD_SITES,
      EVENT_UPDATE_SITES,
      EVENT_ROLLBACK_PHASE3,
      EVENT_SUBSITE_BUILD_CODEBASE,
    ), $this);
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_SKIP_REDUNDANT_SYMLINKS => FALSE,
    ));
    $this->config()->extendFromOption(CONFIG_SKIP_REDUNDANT_SYMLINKS, OPTION_SKIP_REDUNDANT_SYMLINKS);
  }
  
  public function requiredPlugins() {
    return array('DrupalSitePlugin');
  }
  
  public function captureEvent(&$context, $type) {
    switch ($type) {
      case EVENT_SITE_BUILD_SITES:
        $context->success = $this->initializeSites($context->site);
        $context->stopPropagation = TRUE;
        break;
      case EVENT_UPDATE_SITES:
        $context->success = $this->updateSites($context->site);
        $context->stopPropagation = TRUE;
        break;
      case EVENT_ROLLBACK_PHASE3:
        if (empty($context->handled) || $context->success) {
          $context->handled = TRUE;
          $context->success = $this->refreshSiteSymlinks($context->site, $context->revertBuild);
        }
      case EVENT_SUBSITE_BUILD_CODEBASE:
        if (empty($context->handled) || $context->success) {
          $context->handled = TRUE;
          $context->success = $this->initializeSubSites($context->subsite);
        }
        break;
    }
  }
  
  /**
   * Responsible for updating all the site symlinks
   * 
   * @param DrupalSite $site
   *   The site to update symlinks for.
   * 
   * @return boolean
   *   TRUE if all the sites were updated successfully, otherwise FALSE.
   */
  private function updateSites(DrupalSite $site) {
    $defaultSite = $site->getSetting(SITE_SETTING_CURRENT_BUILD);
    if (empty($defaultSite)) {
      $this->error(STRING_SITE_MISSING_SETTING, array(
        '!key' => SITE_SETTING_CURRENT_BUILD,
      ));
      return FALSE;
    }
    $defaultDirectory = assemble_path($defaultSite, 'sites', 'default');
    remove_directory($defaultDirectory);
    if (is_dir($defaultDirectory)) {
      $this->error(STRING_UNABLE_TO_DELETE_DEFAULT);
      return FALSE;
    }
    return $this->symlinkAllSites($site);
  }
  
  private function initializeSubSites(DrupalSubSite $subsite) {
    $currentBase = $subsite->getParentSite()->getSetting(SITE_SETTING_CURRENT_BUILD);
    if (empty($currentBase)) { 
      $this->error(STRING_SITE_MISSING_SETTING, array(
        '!key' => SITE_SETTING_CURRENT_BUILD,
      ));
      return FALSE; 
    }
    $structureSites = $subsite->getParentSite()->getSetting(SITE_SITES_DIR);
    if (empty($structureSites)) { 
      $this->error(STRING_SITE_MISSING_SETTING, array(
        '!key' => SITE_SITES_DIR,
      ));
      return FALSE;
    }
    $primary = $subsite->getSetting(SITE_PRIMARY_URL);
    if (empty($primary)) {
      $this->error(STRING_SITE_MISSING_SETTING, array(
        '!key' => SITE_PRIMARY_URL,
      ));
      return FALSE;
    }
    $primarySite = DrupalSite::convertURLToSiteName($primary);
    $primarySiteDirectory = assemble_path($subsite->getParentSite()->getBuildFolder(), $structureSites, $primarySite);
    mkdir($primarySiteDirectory);
    $newSettingsFile = assemblePath($primarySiteDirectory, 'settings.php');
    $defaultSettings = $subsite->getParentSite()->getSetting(SITE_SETTINGS_TEMPLATE);
    copy($defaultSettings, $newSettingsFile);
    if (!file_exists($newSettingsFile)) {
      $this->error(STRING_COULD_NOT_FIND_SETTINGS_PHP);
      return FALSE;
    }
    $subsite->setSetting(SITE_SETTINGS_FILE, $newSettingsFile);
    $subsite->registerServerFile($newSettingsFile);
    $subsite->registerServerFile(assemble_path($primarySiteDirectory, 'files'));
    if (!$this->createRedundantSymlinks($subsite, $primary, assemble_path($subsite->getParentSite()->getBuildFolder(), $structureSites))) {
      return FALSE;
    }
    if (!$this->symlinkAllSites($subsite->getParentSite())) {
      return FALSE;
    }
    return TRUE;
  }
  
  /**
   * Responsible for initializing the sites upon build.
   * 
   * @param DrupalSite $site
   *   The site to initialize sites for.
   * 
   * @return boolean
   *   TRUE if they were initialized successfully, otherwise FALSE.
   */
  private function initializeSites(DrupalSite $site) {
    $currentBase = $site->getSetting(SITE_SETTING_CURRENT_BUILD);
    if (empty($currentBase)) { 
      $this->error(STRING_SITE_MISSING_SETTING, array(
        '!key' => SITE_SETTING_CURRENT_BUILD,
      ));
      return FALSE; 
    }
    $structureSites = $site->getSetting(SITE_SITES_DIR);
    if (empty($structureSites)) { 
      $this->error(STRING_SITE_MISSING_SETTING, array(
        '!key' => SITE_SITES_DIR,
      ));
      return FALSE;
    }
    
    // Move default site to where we want it to be.
    $realDefault = assemble_path($site->getBuildFolder(), $structureSites, 'default');
    rename(assemble_path($currentBase, 'sites', 'default'), $realDefault);
    
    $defaultSettingsFile = assemble_path($realDefault, 'default.settings.php');
    
    if (!file_exists($defaultSettingsFile)) {
      $this->error(STRING_UNABLE_TO_CREATE_SETTINGS_TEMPLATE);
      return FALSE;
    }
    
    // Make symlinks out of all the URLs if desired
    $makeSymlinks = extra_empty($this->config()->getConfig(CONFIG_SKIP_REDUNDANT_SYMLINKS));
    if ($makeSymlinks) {
      if (!$this->createRedundantSymlinks($site, 'default', assemble_path($site->getBuildFolder(), $structureSites))) {
        return FALSE;
      }
    }

    // Allow other plugins to change the settings if needed.
    $context = (object) array(
      'extra_settings' => '',
    );
    $this->events()->fireEvent(EVENT_GET_EXTRA_SETTINGS, $context);
    if (!empty($context->extra_settings)) {
      if (!file_append_contents($defaultSettingsFile, $context->extra_settings)) {
        $this->error(STRING_UNABLE_TO_APPEND_SETTINGS);
        return FALSE;
      }
    }
    
    // Copy the settings to the real template file.
    $settingsFile = assemble_path($realDefault, 'settings.php');
    copy($defaultSettingsFile, $settingsFile);
    if (!is_readable($settingsFile)) {
      $this->error(STRING_COULD_NOT_FIND_SETTINGS_PHP);
      return FALSE;
    }
    $site->setSetting(SITE_SETTINGS_FILE, $settingsFile);
    $site->setSetting(SITE_SETTINGS_TEMPLATE, $defaultSettingsFile);
    $site->registerServerFile($defaultSettingsFile);
    $site->registerServerFile($settingsFile);
    $site->registerServerFile(assemble_path($realDefault, 'files'));
    if (!$this->symlinkAllSites($site)) {
      return FALSE;
    }
    return TRUE;
  }
  
  private function refreshSiteSymlinks(DrupalSite $site, $newBuildID) {
    return $this->symlinkAllSites($site);
  }
  
  private function createRedundantSymlinks(GenericDrupalEntity $site, $primary, $path) {
    $urls = $site->getAllURLs();
    $default = assemble_path($path, $primary);
    foreach ($urls as $url) {
      $name = DrupalSite::convertURLToSiteName($url);
      if ($name !== $primary) {
        $site->appendSettingValue(SITE_EXISTING_SITES, $name);
        $link = assemble_path($path, $name);
        symlink($default, $link);
        if (!is_link($link)) {
          $this->error(STRING_COULD_NOT_SYMLINK_SITE, array(
            '!name' => $name,
          ));
          return FALSE;
        }
      }
    }
    return TRUE;
  }
  
  /**
   * Symlinks all the sites to the current build.
   * 
   * @param DrupalSite $site
   *   The site to use.
   * 
   * @return boolean
   *   TRUE if the sites could be symlinked, otherwise FALSE.
   */
  private function symlinkAllSites(DrupalSite $site) {    
    $staticSites = assemble_path($site->getBuildFolder(), $site->getSetting(SITE_SITES_DIR));
    $h = opendir($staticSites);
    if (empty($h)) {
      $this->error(STRING_COULD_NOT_READ_SITES_DIR);
      return FALSE;
    }
    $targetBase = assemble_path($site->getSetting(SITE_SETTING_CURRENT_BUILD), 'sites');
    while (($dir = readdir($h)) !== FALSE) {
      if ($dir != '.' && $dir != '..') {
        $full = assemble_path($staticSites, $dir);
        if (is_dir($full)) {
          $linkPath = assemble_path($targetBase, $dir);
          if (!is_link($linkPath)) {
            symlink($full, $linkPath);
            if (!is_link($linkPath)) {
              $this->error(STRING_UNABLE_TO_SYMLINK_SITE);
              return FALSE;
            }
          }
        }
      }
    }
    return TRUE;
  }
  
}