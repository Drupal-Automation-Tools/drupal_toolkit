<?php
/**
 * @file Defines the DrupalSiteStandardSitePlugin class.
 */

/**
 * Responsible for managing the basic sites configuration for Drupal sites.
 * 
 * This refers mostly to the contents of the Drupal sites folder, except for the
 * "all" folder (which is managed by the build). These folders are kept in
 * another location and symlinked to on build.
 * 
 * Certain directories are created for the initial site as symlinks of 
 * 'default'. This behaviour prevents the default site from being overridden
 * by a subsite.
 * 
 * @todo At some point we should check for existing crosslinks within the site.
 * 
 * @ingroup plugins
 */
class DrupalSiteStandardSitePlugin extends GenericPlugin implements EventListener {
  
  /**
   * The name of the default settings.php file.
   * 
   * @var string
   */
  private static $defaultSettingsName = 'default.settings.php';
  
  /**
   * The name of the settings.php file.
   * 
   * @var string
   */
  private static $settingsName = 'settings.php';
  
  /**
   * The name of the default Drupal sites directory.
   * 
   * @var string
   */
  private static $defaultDirectory = 'default';
  
  /**
   * The name of the files directory within Drupal.
   * 
   * @var string
   */
  private static $filesDirectory = 'files';
  
  /**
   * The name of the sites directory within Drupal.
   * 
   * @var string
   */
  private static $sitesDirectory = 'sites';
    
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_SITE_BUILD_SITES,
      EVENT_UPDATE_SITES,
      EVENT_ROLLBACK_PHASE3,
      EVENT_SUBSITE_BUILD_CODEBASE,
      EVENT_UPDATE_SUBSITE_SITES,
      EVENT_ROLLBACK_SUBSITE_CLEAN,
      EVENT_CROSSLINK_CREATE_CROSSLINK,
      EVENT_REMOVE_ALL,
      EVENT_REMOVE_SUBSITE_ALL,
      EVENT_REFRESH_DRUPAL_CONFIGURATION,
    ), $this);
  }
    
  public function captureEvent(DtkEvent &$context, $type) {
    switch ($type) {
      case EVENT_REFRESH_DRUPAL_CONFIGURATION:
        if ($context->checkExecution()) {
          $context->setResult($this->updateSettingsFile($context->getEntity()));
        }
        break;
      case EVENT_REMOVE_ALL:
      case EVENT_REMOVE_SUBSITE_ALL:
        if ($context->checkExecution()) {
          $context->setResult($this->removeCrossLinks($context->getEntity()));
        }
        break;
      case EVENT_CROSSLINK_CREATE_CROSSLINK:
        if ($context->checkExecution()) {
          $context->setResult($this->createCrossLinks($context->getVariable('source'), $context->getVariable('target')));
        }
        break;
        /*
      case EVENT_ROLLBACK_SUBSITE_CLEAN:
      case EVENT_UPDATE_SUBSITE_SITES:
        if ($context->checkExecution()) {
          $context->setResult($this->refreshSubsiteSymlinks($context->getSubSite()));
        }
        break;*/
      case EVENT_UPDATE_SITES:
        if ($context->checkExecution()) {
          $context->setResult($this->updateSites($context->getSite()));
        }
        break;
      case EVENT_SITE_BUILD_SITES:
        if ($context->checkExecution()) {
          $context->setResult($this->initializeSites($context->getSite()));
        }
        break;
      case EVENT_ROLLBACK_PHASE3:
        if ($context->checkExecution()) {
          $context->setResult($this->refreshSiteSymlinks($context->getSite(), $context->getVariable('revertBuild')));
        }
        break;
      case EVENT_SUBSITE_BUILD_CODEBASE:
        if ($context->checkExecution()) {
          $context->setResult($this->initializeSubSites($context->getSubSite()));
        }
        break;
    }
  }
  
  /**
   * Responsible for creating a cross link between two sites.
   * 
   * @param GenericDrupalEntity $source
   *   The source site or subsite.
   * @param DrupalSite $target
   *   The target site.
   */
  private function createCrossLinks(GenericDrupalEntity $source, DrupalSite $target) {
    $rootlinks = $source->getRootLinks();
    $rootlinkBase = $target->getSetting(SITE_ROOTLINKS_DIR, NULL, TRUE);
    if (empty($rootlinkBase)) { return FALSE; }
    $targetDirectory = assemble_path($target->getBuildFolder(), $rootlinkBase);
    if (!is_writable($targetDirectory)) { 
      $this->error(STRING_ERROR_CROSSLINK_DIR_NOT_WRITABLE, array(
        '!dir' => $targetDirectory,
      ));
      return FALSE; 
    }
    $links = array();
    foreach ($rootlinks as $link) {
      $tp = assemble_path($targetDirectory, $link);
      if (file_exists($tp)) {
        $this->error(STRING_ERROR_CROSSLINK_EXISTS, array(
          '!link' => $link,
        ));
        return FALSE;
      }
      $links[] = $tp;
    }
    $success = $this->createRootLinks($targetDirectory, $source);
    if (!$success) {
      return FALSE; 
    }
    $source->setSetting(SITE_SETTING_CROSSLINKS, $links);
    $currentBase = $target->getSetting(SITE_SETTING_CURRENT_BUILD, NULL, TRUE);
    if (empty($currentBase)) { return FALSE; }
    if (!$this->linkRootLinks($currentBase, $targetDirectory)) {
      return FALSE;
    }
    return TRUE;
  }
    
  /**
   * Removes all registered cross links.
   * 
   * @param GenericDrupalEntity $source
   *   The site to remove crosslinks from.
   * 
   * @return boolean
   *   TRUE upon success, otherwise FALSE.
   */
  private function removeCrossLinks(GenericDrupalEntity $source) {
    $crosslinks = $source->getSetting(SITE_SETTING_CROSSLINKS);
    if (empty($crosslinks)) { return TRUE; }
    foreach ($crosslinks as $crosslink) {
      if (file_exists($crosslink)) {
        unlink($crosslink);
      }
    }
    return TRUE;
  }
  
  /**
   * Refreshes a subsite's symlinks.
   * 
   * @param DrupalSubSite $subsite
   *   Subsite to refresh links on.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function refreshSubsiteSymlinks(DrupalSubSite $subsite) {
    $currentBase = $subsite->getParentSite()->getSetting(SITE_SETTING_CURRENT_BUILD, NULL, TRUE);
    if (empty($currentBase)) { return FALSE; }
    $rootLinkBase = $subsite->getParentSite()->getSetting(SITE_ROOTLINKS_DIR, NULL, TRUE);
    if (empty($rootLinkBase)) { return FALSE; }
    $rootLinks = assemble_path($subsite->getBuildFolder(), $rootLinkBase);
    if (!$this->linkRootLinks($currentBase, $rootLinks)) {
      return FALSE;
    }
    return TRUE;
  }
  
  /**
   * Responsible for updating all the site symlinks
   * 
   * @param DrupalSite $site
   *   The site to update symlinks for.
   * 
   * @return boolean
   *   TRUE if all the sites were updated successfully, otherwise FALSE.
   */
  private function updateSites(DrupalSite $site) {
    $this->working(STRING_WORKING_REMOVE_DEFAULT_SITE);
    $defaultSite = $site->getSetting(SITE_SETTING_CURRENT_BUILD, NULL, TRUE);
    if (empty($defaultSite)) { return FALSE; }
    $defaultDirectory = assemble_path($defaultSite, self::$sitesDirectory, self::$defaultDirectory);
    remove_directory($defaultDirectory);
    if (is_dir($defaultDirectory)) {
      $this->error(STRING_UNABLE_TO_DELETE_DEFAULT);
      return FALSE;
    }
    $this->success(STRING_SUCCESS_REMOVE_DEFAULT_SITE);
    return $this->refreshSiteSymlinks($site);
  }
  
  /**
   * Responsible for initializing the sites upon build.
   * 
   * @param DrupalSite $site
   *   The site to initialize sites for.
   * 
   * @return boolean
   *   TRUE if they were initialized successfully, otherwise FALSE.
   */
  private function initializeSites(DrupalSite $site) {
    $this->working(STRING_WORKING_CREATE_SITES);
    
    // Variable initialization
    $currentBase = $site->getSetting(SITE_SETTING_CURRENT_BUILD, NULL, TRUE);
    if (empty($currentBase)) { return FALSE; }
    $structureSites = $site->getSetting(SITE_SITES_DIR, NULL, TRUE);
    if (empty($structureSites)) { return FALSE; }
    $rootLinks = $site->getSetting(SITE_ROOTLINKS_DIR, NULL, TRUE);
    if (empty($rootLinks)) { return FALSE; }
    $rootLinkDirectory = assemble_path($site->getBuildFolder(), $rootLinks);
    
    // Move default site to where we want it to be.
    $realDefault = assemble_path($site->getBuildFolder(), $structureSites, self::$defaultDirectory);
    rename(assemble_path($currentBase, 'sites', self::$defaultDirectory), $realDefault);
    
    if (!$this->createRedundantSymlinks($site, self::$defaultDirectory, assemble_path($site->getBuildFolder(), $structureSites))) {
      return FALSE;
    }
    
    if (!$this->createDefaultSettingsFile($site, $realDefault)) {
      return FALSE;
    }
    
    // Copy the settings to the real template file.
    if (!$this->writeSettingsFile($site, assemble_path($site->getBuildFolder(), $structureSites))) {
      return FALSE;
    }
    if (!$this->createRootLinks($rootLinkDirectory, $site)) {
      return FALSE;
    }
    if (!$this->refreshSiteSymlinks($site)) {
      return FALSE;
    }
    $this->success(STRING_SUCCESS_CREATE_SITES);
    return TRUE;
  }
  
  /**
   * Responsible for creating root symlinks in the rootlink directory.
   * 
   * @param GenericDrupalEntity $entity
   *   The entity to create rootlinks for.
   * 
   * @return boolean
   *   TRUE upon success, otherwise FALSE.
   */
  private function createRootLinks($rootLinkDirectory, GenericDrupalEntity $entity) {
    $top = $entity instanceof DrupalSubSite ? $entity->getParentSite() : $entity;
    $target = $top->getSetting(SITE_CURRENT_SYMLINK);
    $roots = $this->getRootSymlinks($entity);
    foreach ($roots as $root) {
      $path = assemble_path($rootLinkDirectory, $root);
      if (!is_link($path)) {
        if (!symlink($target, $path)) {
          $this->error(STRING_ERROR_COULD_NOT_CREATE_ROOTLINK, array(
            '!link' => $root,
          ));
          return FALSE;
        }
      }
    }
    return TRUE;
  }
  
  /**
   * Responsible for creating all the rootlinks that need to be created.
   * 
   * @param string $baseDirectory
   *   The base directory in which to create rootlinks.
   * @param string $rootLinkDirectory
   *   The path to the directory in which rootlinks are stored.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function linkRootLinks($baseDirectory, $rootLinkDirectory) {
    $this->working(STRING_WORKING_CREATING_ROOT_SYMLINKS);
    $h = opendir($rootLinkDirectory);
    if (empty($h)) { return FALSE; }
    while (($file = readdir($h)) !== FALSE) {
      if ($file !== "." && $file !== "..") {
        $this->working(STRING_WORKING_CREATING_ROOT_SYMLINK, array(
          '!link' => $file,
        ));
        $target = assemble_path($rootLinkDirectory, $file);
        $link = assemble_path($baseDirectory, $file);
        if (!file_exists($link)) {
          if (!symlink($target, $link)) {
            $this->error(STRING_ERROR_UNABLE_TO_CREATE_ROOT_SYMLINK, array(
              '!link' => $file,
            ));
            return FALSE;
          }
        }
        elseif (!is_link($link)) {
          $this->error(STRING_ERROR_UNABLE_TO_CREATE_ROOT_SYMLINK, array(
            '!link' => $file,
          ));
          return FALSE;
        }
      }
    }
    $this->success(STRING_SUCCESS_CREATING_ROOT_SYMLINKS);
    return TRUE;
  }
  
  
  /**
   * Responsible for modifying and registering the default settings.php file.
   * 
   * @param DrupalSite $site
   *   The site to modify the settings.php file for.
   * @param boolean $realDefault
   *   The path to the sites/default folder.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function createDefaultSettingsFile(DrupalSite $site, $realDefault) {
    // Assemble the default settings.php file.
    $defaultSettingsFile = assemble_path($realDefault, self::$defaultSettingsName);
    if (!file_exists($defaultSettingsFile)) {
      $this->error(STRING_UNABLE_TO_CREATE_SETTINGS_TEMPLATE);
      return FALSE;
    }
    if (!$this->appendExtraSettings($site, $defaultSettingsFile, TRUE)) {
      return FALSE;
    }
    $site->setSetting(SITE_SETTINGS_TEMPLATE, $defaultSettingsFile);
    return TRUE;
  }
  
  /**
   * Writes the settings file out for the site or subsite.
   * 
   * @param GenericDrupalEntity $entity
   *   The entity we're writing a file for.
   * @param string $sitesDirectory
   *   Path to the sites directory for the build.
   * @param string $targetDirectory
   *   Name of the folder underneath $sitesDirectory where a new settings.php
   *   file is being built.
   * @param boolean $update
   *   Set to TRUE if an update is being performed.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function writeSettingsFile(GenericDrupalEntity $entity, $sitesDirectory, $targetDirectory = NULL, $update = FALSE) {
    $this->working(
        $entity instanceof DrupalSubSite ? STRING_WORKING_CREATE_SUBSITE_SETTINGS : STRING_WORKING_CREATE_SITE_SETTINGS
    );
    if (empty($targetDirectory)) {
      $targetDirectory = self::$defaultDirectory;
    }
    $template = NULL;
    if ($entity instanceof DrupalSubSite) {
      $template = $entity->getParentSite()->getSetting(SITE_SETTINGS_TEMPLATE, NULL, TRUE);
    }
    else {
      $template = $entity->getSetting(SITE_SETTINGS_TEMPLATE, NULL, TRUE);
    }
    if (empty($template)) { return FALSE; }
    $target = assemble_path($sitesDirectory, $targetDirectory, self::$settingsName);
    if ($update && file_exists($target)) {
      unlink($target);
    }
    copy($template, $target);
    if (!is_readable($target)) {
      $this->error(STRING_COULD_NOT_FIND_SETTINGS_PHP);
      return FALSE;
    }
    if (!$this->appendExtraSettings($entity, $target, FALSE)) {
      return FALSE;
    }
    $entity->setSetting(SITE_SETTINGS_FILE, $target);
    $entity->registerServerFile(assemble_path($sitesDirectory, $targetDirectory, self::$filesDirectory));
    return TRUE;
  }
  
  private function updateSettingsFile(GenericDrupalEntity $entity) {
    $top = $entity instanceof DrupalSubSite ? $entity->getParentSite() : $entity;
    $settingsFile = $entity->getSetting(SITE_SETTINGS_FILE);
    $templateFile = $top->getSetting(SITE_SETTINGS_TEMPLATE);
    unlink($settingsFile);
    copy($templateFile, $settingsFile);
    if (!is_readable($settingsFile)) {
      $this->error(STRING_COULD_NOT_FIND_SETTINGS_PHP);
      return FALSE;
    }
    if (!$this->appendExtraSettings($entity, $settingsFile, FALSE, TRUE)) {
      return FALSE;
    }
    return TRUE;
  }
  
  /**
   * Adds extra settings to a settings.php or default.settings.php file.
   * 
   * @param GenericDrupalEntity $entity
   *   The entity to add lines for.
   * @param string $settingsFile
   *   The path to the file that is being updated.
   * @param boolean $default
   *   Set to TRUE if this is for a default file (that will impact all subsites).
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function appendExtraSettings(GenericDrupalEntity $entity, $settingsFile, $default = FALSE, $forUpdate = FALSE) {
    $event = new DrupalSettingsEvent($entity, $default, $forUpdate);
    $this->events()->fireEvent(EVENT_GET_EXTRA_SETTINGS, $event);
    $settings = $event->getSettings();
    if ((!empty($settings)) && (count($settings) > 0)) {
      if (!file_append_contents($settingsFile, implode(PHP_EOL, $settings))) {
        $this->error(STRING_UNABLE_TO_APPEND_SETTINGS);
        return FALSE;
      }
    }
    return TRUE;
  }
  
  /**
   * Initializes a subsite's sites directories.
   * 
   * @param DrupalSubSite $subsite
   *   The subsite to build sites for.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function initializeSubSites(DrupalSubSite $subsite) {
    $this->working(STRING_WORKING_CREATE_SUBSITE_SITES);
    
    // Variables
    $currentBase = $subsite->getParentSite()->getSetting(SITE_SETTING_CURRENT_BUILD, NULL, TRUE);
    if (empty($currentBase)) { return FALSE; }
    $structureSites = $subsite->getParentSite()->getSetting(SITE_SITES_DIR, NULL, TRUE);
    if (empty($structureSites)) { return FALSE; }
    $primary = $subsite->getSetting(SITE_PRIMARY_URL, NULL, TRUE);
    if (empty($primary)) { return FALSE; }
    $root = $subsite->getParentSite()->getSetting(SITE_ROOTLINKS_DIR, NULL, TRUE);
    if (empty($root)) { return FALSE; }
    $rootDirectory = assemble_path($subsite->getParentSite()->getBuildFolder(), $root);
    
    // Build primary site folder.
    $primarySite = DrupalSite::convertURLToSiteName($primary);
    $primarySiteDirectory = assemble_path($subsite->getParentSite()->getBuildFolder(), $structureSites, $primarySite);
    mkdir($primarySiteDirectory);
    mkdir(assemble_path($primarySiteDirectory, 'files'));
    
    // Shared functionality
    if (!$this->writeSettingsFile(
        $subsite, 
        assemble_path($subsite->getParentSite()->getBuildFolder(), $structureSites), 
        $primarySite
    )) {
      return FALSE;
    }
    if (!$this->createRedundantSymlinks($subsite, $primarySite, assemble_path($subsite->getParentSite()->getBuildFolder(), $structureSites))) {
      return FALSE;
    }
    if (!$this->createRootLinks($rootDirectory, $subsite)) {
      return FALSE;
    }
    if (!$this->refreshSiteSymlinks($subsite->getParentSite())) {
      return FALSE;
    }
    $this->success(STRING_SUCCESS_CREATE_SUBSITE_SITES);
    return TRUE;
  }
    
  /**
   * Retrieves a list of root symlinks that should exist. Note that anything
   * returned by this function CANNOT be used as path in Drupal without
   * messing up the symlink pattern used.
   * 
   * @param GenericDrupalEntity $entity
   *   The entity to get paths for.
   * 
   * @return array
   *   An array of path components that need to exist as symlinks.
   */
  private function getRootSymlinks(GenericDrupalEntity $entity) {
    return $entity->getRootLinks();
  }
  
  /**
   * Refreshes all the site symlinks.
   * 
   * @param DrupalSite $site
   *   The site to update symlinks for.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE;
   */
  private function refreshSiteSymlinks(DrupalSite $site) {
    $currentBase = $site->getSetting(SITE_SETTING_CURRENT_BUILD, NULL, TRUE);
    if (empty($currentBase)) { return FALSE; }
    $rootLinksBase = $site->getSetting(SITE_ROOTLINKS_DIR, NULL, TRUE);
    if (empty($rootLinksBase)) { return FALSE; }
    $rootLinks = assemble_path($site->getBuildFolder(), $rootLinksBase);
    if (!$this->linkRootLinks($currentBase, $rootLinks)) {
      return FALSE;
    }
    if (!$this->symlinkAllSites($site)) {
      return FALSE;
    }
    return TRUE;
  }
  
  /**
   * Symlinks all the sites to the current build.
   * 
   * @param DrupalSite $site
   *   The site to use.
   * 
   * @return boolean
   *   TRUE if the sites could be symlinked, otherwise FALSE.
   */
  private function symlinkAllSites(DrupalSite $site) {
    $this->working(STRING_WORKING_SYMLINK_SITES);
    $staticSites = assemble_path($site->getBuildFolder(), $site->getSetting(SITE_SITES_DIR));
    $h = opendir($staticSites);
    if (empty($h)) {
      $this->error(STRING_COULD_NOT_READ_SITES_DIR);
      return FALSE;
    }
    $targetBase = assemble_path($site->getSetting(SITE_SETTING_CURRENT_BUILD), 'sites');
    while (($dir = readdir($h)) !== FALSE) {
      if ($dir != '.' && $dir != '..') {
        $this->working(STRING_WORKING_SYMLINK_SITE, array(
          '!site' => $dir,
        ));
        $full = assemble_path($staticSites, $dir);
        if (is_dir($full)) {
          $linkPath = assemble_path($targetBase, $dir);
          if (!is_link($linkPath)) {
            symlink($full, $linkPath);
            if (!is_link($linkPath)) {
              $this->error(STRING_UNABLE_TO_SYMLINK_SITE);
              return FALSE;
            }
          }
        }
      }
    }
    $this->success(STRING_SUCCESS_SYMLINK_SITES);
    return TRUE;
  }
  
  /**
   * Creates redundant symlinks within the sites directory. A redundant
   * symlink provides an alternative domain and/or path by which a site
   * can be accessed.
   * 
   * @param GenericDrupalEntity $site
   *   The entity to create symlinks for.
   * @param string $primary
   *   The name of the primary site.
   * @param string $path
   *   The root path to the sites directory.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function createRedundantSymlinks(GenericDrupalEntity $site, $primary, $path) {
    $this->working(STRING_WORKING_CREATE_REDUNDANT_SYMLINKS);
    $urls = $site->getAllURLs();
    $default = assemble_path($path, $primary);
    foreach ($urls as $url) {
      $name = DrupalSite::convertURLToSiteName($url);
      if ($name !== $primary) {
        $this->working(STRING_WORKING_CREATE_REDUNDANT_SYMLINK, array(
          '!name' => $name,
        ));
        $site->appendSettingValue(SITE_EXISTING_SITES, $name);
        $link = assemble_path($path, $name);
        symlink($default, $link);
        if (!is_link($link)) {
          $this->error(STRING_COULD_NOT_SYMLINK_SITE, array(
            '!name' => $name,
          ));
          return FALSE;
        }
      }
    }
    $this->success(STRING_SUCCESS_CREATE_REDUNDANT_SYMLINKS);
    return TRUE;
  }
  
}