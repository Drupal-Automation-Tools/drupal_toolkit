<?php
/**
 * @file Defines the PermissionsPlugin class.
 * 
 * @defgroup permission_types "Permission Types"
 * The different types of permissions that can be configured.
 */

/**
 * Responsible for managing permissions on new and updated sites.
 */
class PermissionsPlugin extends GenericPlugin implements EventListener {
  
  public function checkExtraRequirements() {
    if (!php_function_available('chmod')) {
      return FALSE;
    }
    if (!php_function_available('chown')) {
      return FALSE;
    }
    if (!php_function_available('chgrp')) {
      return FALSE;
    }
    return parent::checkExtraRequirements();
  }
  
  public function initialize() {
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_PERMISSIONS_IGNORE_ALL => FALSE,
      CONFIG_PERMISSIONS_DEFAULT_OWNER => NULL,
      CONFIG_PERMISSIONS_DEFAULT_GROUP => NULL,
      CONFIG_PERMISSIONS_DEFAULT_ACCESS => '755',
      CONFIG_PERMISSIONS_BUILD_OWNER => NULL,
      CONFIG_PERMISSIONS_BUILD_GROUP => NULL,
      CONFIG_PERMISSIONS_BUILD_ACCESS => '755',
      CONFIG_PERMISSIONS_IGNORE_BUILD => FALSE,
      CONFIG_PERMISSIONS_SERVER_OWNER => 'apache',
      CONFIG_PERMISSIONS_SERVER_GROUP => 'apache',
      CONFIG_PERMISSIONS_SERVER_ACCESS => '700',
      CONFIG_PERMISSIONS_IGNORE_SERVER => FALSE,
      CONFIG_PERMISSIONS_SYSTEM_OWNER => 'root',
      CONFIG_PERMISSIONS_SYSTEM_GROUP => 'root',
      CONFIG_PERMISSIONS_SYSTEM_ACCESS => '700',
      CONFIG_PERMISSIONS_IGNORE_SYSTEM => FALSE,
    ));
    $this->events()->registerListener(array(
      dtk_constant('EVENT_SITE_BUILT'),
      dtk_constant('EVENT_UPDATE_PREPARE_FOR_UPDATE'),
      dtk_constant('EVENT_SUBSITE_BUILD_COMPLETE'),
      dtk_constant('EVENT_UPDATE_PREPARE_SUBSITE'),
    ), $this);
  }
  
  /**
   * Applies permissions to one or more files based on a permission type.
   * 
   * @param array $target
   *   An array of file names to apply permissions to.
   * @param string $permissionType
   *   The permission type. See @ref permission_types "Permission Types"
   * @param boolean $recursive
   *   Set to TRUE to apply permissions to all files in $target and, if any of
   *   them are directories, all subfiles in those directories.
   * 
   * @return boolean|NULL
   *   Returns:
   *   - NULL if permissions were ignored (ignore condition).
   *   - FALSE if permissions could not be applied (error condition).
   *   - TRUE if permissions were applied completely and successfully.
   */
  private function applyPermissions($target, $permissionType, $recursive = FALSE) {
    if (!extra_empty($this->config()->getConfig(CONFIG_PERMISSIONS_IGNORE_ALL))) {
      return NULL;
    }
    if (!extra_empty($this->config()->getConfig('permissions-' . $permissionType . '-ignore'))) {
      return NULL;
    }
    $user = $this->config()->getConfig('permissions-' . $permissionType . '-owner');
    if (empty($user)) {
      $user = $this->config()->getConfig(CONFIG_PERMISSIONS_DEFAULT_OWNER);
      if (empty($user)) {
        $user = get_system_username();
      }
    }
    if (empty($user)) {
      $this->error(STRING_PERMISSIONS_NO_USER);
      return FALSE;
    }
    $group = $this->config()->getConfig('permissions-' . $permissionType . '-group');
    if (empty($group)) {
      $group = $this->config()->getConfig(CONFIG_PERMISSIONS_DEFAULT_GROUP);
      if (empty($group)) {
        $group = get_system_primary_group($user);
      }
    }
    if (empty($group)) {
      $this->error(STRING_PERMISSIONS_NO_GROUP);
      return FALSE;
    }
    $rawaccess = $this->config()->getConfig('permissions-' . $permissionType . '-access');
    if (empty($rawaccess)) {
      $rawaccess = $this->config()->getConfig(CONFIG_PERMISSIONS_DEFAULT_ACCESS);
    }
    if (empty($rawaccess)) {
      $this->error(STRING_PERMISSIONS_NO_ACCESS);
      return FALSE;
    }
    $access = octdec($rawaccess);
    if (!is_array($target)) {
      $target = array($target);
    }
    $failures = 0;
    foreach ($target as $tfile) {
      $this->working(STRING_PERMISSIONS_MESSAGE, array(
        '!file' => $tfile,
        '!user' => $user,
        '!group' => $group,
        '!access' => $rawaccess,
        '!recursion' => $recursive ? ' recursively' : '',
      ));
      $failures += chmog($tfile, $user, $group, $access, $recursive);
    }
    if (!empty($failures)) {
      $this->error(STRING_PERMISSIONS_FAILURES, array(
        '!failures' => $failures,
      ));
      return FALSE;
    }
    return TRUE;
  }
  
  public function captureEvent(DtkEvent &$context, $type) {
    switch ($type) {
      case EVENT_SITE_BUILT:
        if ($context->checkExecution()) {
          $site = $context->getEntity();
          $context->setResult($this->applyPermissions($site->getBuildFolder(), PERMISSION_TYPE_BUILD, TRUE));
        }
        if ($context->checkExecution()) {          
          $context->setResult($this->applyPermissions($site->getServerFiles(), PERMISSION_TYPE_SERVER, TRUE));
        }
        if ($context->checkExecution()) {
          $context->setResult($this->applyPermissions($site->getSystemFiles(), PERMISSION_TYPE_SYSTEM, TRUE));
        }
        break;
      case EVENT_UPDATE_PREPARE_FOR_UPDATE:
        if ($context->checkExecution()) {
          $site = $context->getEntity();
          $dir = $site->getSetting(SITE_CURRENT_SYMLINK);
          if (empty($dir)) {
            $dir = $site->getBuildFolder();
          }
          $context->setResult($this->applyPermissions($dir, PERMISSION_TYPE_BUILD, TRUE));
        }
        if ($context->checkExecution()) {          
          $context->setResult($this->applyPermissions($site->getServerFiles(), PERMISSION_TYPE_SERVER, TRUE));
        }
        if ($context->checkExecution()) {
          $context->setResult($this->applyPermissions($site->getSystemFiles(), PERMISSION_TYPE_SYSTEM, TRUE));
        }
        break;
      case EVENT_SUBSITE_BUILD_COMPLETE:
      case EVENT_UPDATE_PREPARE_SUBSITE:
        if ($context->checkExecution()) {  
          $site = $context->getEntity();        
          $context->setResult($this->applyPermissions($site->getServerFiles(), PERMISSION_TYPE_SERVER, TRUE));
        }
        if ($context->checkExecution()) {
          $context->setResult($this->applyPermissions($site->getSystemFiles(), PERMISSION_TYPE_SYSTEM, TRUE));
        }
        break;
    }
  }
  
}