<?php
/**
 * @file Defines the PermissionsPlugin class.
 * 
 * @defgroup permission_types "Permission Types"
 * The different types of permissions that can be configured.
 */

/**
 * Config key for whether or not all permission settings should be ignored.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_IGNORE_ALL', 'permissions-ignore-all');

/**
 * Config key for the default owner. Used as a fallback should a specific key
 * not be set. Defaults to the current system user.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_DEFAULT_OWNER', 'permissions-default-owner');

/**
 * Config key for the default group. Used as a fallback should a specific key
 * not be set. Defaults to the first group ever given to the current system
 * user.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_DEFAULT_GROUP', 'permissions-default-group');

/**
 * Config key for the default permissions. Should be a string with three octal
 * characters indicating RWX permissions for the file/directory. Used as a 
 * fallback should a specific key not be set.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_DEFAULT_ACCESS', 'permissions-default-access');

/**
 * Config key for the owner of build files.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_BUILD_OWNER', 'permissions-build-owner');

/**
 * Config key for the group of build files.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_BUILD_GROUP', 'permissions-build-group');

/**
 * Config key for the permissions of build files. Should be a string with three
 * octal characters indicating RWX permissions for the file/directory. Defaults
 * to 755.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_BUILD_ACCESS', 'permissions-build-access');

/**
 * Config key for whether or not we should ignore permissions for build files.
 * If set, none of the permissions for build files will be modified.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_IGNORE_BUILD', 'permissions-build-ignore');

/**
 * Config key for the owner of server files. This should be set to the web
 * server user.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_SERVER_OWNER', 'permissions-server-owner');

/**
 * Config key for the group of server files. This should be set to the 
 * web server group.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_SERVER_GROUP', 'permissions-server-group');

/**
 * Config key for the permissions of server files. Should be set to a sensible
 * three-character octal string indicating RWX permissions for owner/group/other.
 * Defaults to 700.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_SERVER_ACCESS', 'permissions-server-access');

/**
 * Config key for ignoring server file permissions. If set, none of the 
 * server permissions are set.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_IGNORE_SERVER', 'permissions-server-ignore');

/**
 * Config key for the system owner. Defaults to 'root'.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_SYSTEM_OWNER', 'permissions-system-owner');

/**
 * Config key for the system group. Defaults to 'root'.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_SYSTEM_GROUP', 'permissions-system-group');

/**
 * Config key for the system permissions. Defaults to 700.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_SYSTEM_ACCESS', 'permissions-system-access');

/**
 * Config key to ignore system permissions. If set, none of the system files
 * will get special permissions.
 * 
 * @ingroup config
 */
define('CONFIG_PERMISSIONS_IGNORE_SYSTEM', 'permissions-system-ignore');

/**
 * String token for when no user is detected.
 * 
 * @ingroup strings
 */
define('STRING_PERMISSIONS_NO_USER', 'permissions.error.no-user');

/**
 * String token for when no group is detected.
 * 
 * @ingroup strings
 */
define('STRING_PERMISSIONS_NO_GROUP' ,'permissions.error.no-group');

/**
 * String token for when no permissions are detected.
 * 
 * @ingroup strings
 */
define('STRING_PERMISSIONS_NO_ACCESS', 'permissions.error.no-access');

/**
 * String token for when file permissions are about to be applied.
 * 
 * @ingroup strings
 */
define('STRING_PERMISSIONS_MESSAGE', 'permissions.message.applying');

/**
 * String token for when there are errors in the permission application 
 * process.
 * 
 * @ingroup strings
 */
define('STRING_PERMISSIONS_FAILURES', 'permission.error.application');

/**
 * Permission type for system files.
 * 
 * @ingroup permission_types
 */
define('PERMISSION_TYPE_SYSTEM', 'system');

/**
 * Permission type for server files.
 * 
 * @ingroup permission_types
 */
define('PERMISSION_TYPE_SERVER', 'server');

/**
 * Permission type for build files.
 * 
 * @ingroup permission_types
 */
define('PERMISSION_TYPE_BUILD', 'build');

/**
 * Responsible for managing permissions on new and updated sites.
 */
class PermissionsPlugin extends GenericPlugin implements EventListener {
  
  public function checkExtraRequirements() {
    if (!php_function_available('chmod')) {
      return FALSE;
    }
    if (!php_function_available('chown')) {
      return FALSE;
    }
    if (!php_function_available('chgrp')) {
      return FALSE;
    }
    return parent::checkExtraRequirements();
  }
  
  public function initialize() {
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_PERMISSIONS_IGNORE_ALL => FALSE,
      CONFIG_PERMISSIONS_DEFAULT_OWNER => NULL,
      CONFIG_PERMISSIONS_DEFAULT_GROUP => NULL,
      CONFIG_PERMISSIONS_DEFAULT_ACCESS => '755',
      CONFIG_PERMISSIONS_BUILD_OWNER => NULL,
      CONFIG_PERMISSIONS_BUILD_GROUP => NULL,
      CONFIG_PERMISSIONS_BUILD_ACCESS => '755',
      CONFIG_PERMISSIONS_IGNORE_BUILD => FALSE,
      CONFIG_PERMISSIONS_SERVER_OWNER => 'apache',
      CONFIG_PERMISSIONS_SERVER_GROUP => 'apache',
      CONFIG_PERMISSIONS_SERVER_ACCESS => '700',
      CONFIG_PERMISSIONS_IGNORE_SERVER => FALSE,
      CONFIG_PERMISSIONS_SYSTEM_OWNER => 'root',
      CONFIG_PERMISSIONS_SYSTEM_GROUP => 'root',
      CONFIG_PERMISSIONS_SYSTEM_ACCESS => '700',
      CONFIG_PERMISSIONS_IGNORE_SYSTEM => FALSE,
    ));
    $this->events()->registerListener(array(
      EVENT_SITE_BUILT,
      EVENT_UPDATE_FINISH,
      EVENT_SUBSITE_BUILD_COMPLETE,
      EVENT_UPDATE_CLEANUP_SUBSITE,
    ), $this);
  }
  
  /**
   * Applies permissions to one or more files based on a permission type.
   * 
   * @param array $target
   *   An array of file names to apply permissions to.
   * @param string $permissionType
   *   The permission type. See @ref permission_types "Permission Types"
   * @param boolean $recursive
   *   Set to TRUE to apply permissions to all files in $target and, if any of
   *   them are directories, all subfiles in those directories.
   * 
   * @return boolean|NULL
   *   Returns:
   *   - NULL if permissions were ignored (ignore condition).
   *   - FALSE if permissions could not be applied (error condition).
   *   - TRUE if permissions were applied completely and successfully.
   */
  private function applyPermissions($target, $permissionType, $recursive = FALSE) {
    if (!extra_empty($this->config()->getConfig(CONFIG_PERMISSIONS_IGNORE_ALL))) {
      return NULL;
    }
    if (!extra_empty($this->config()->getConfig('permissions-' . $permissionType . '-ignore'))) {
      return NULL;
    }
    $user = $this->config()->getConfig('permissions-' . $permissionType . '-owner');
    if (empty($user)) {
      $user = $this->config()->getConfig(CONFIG_PERMISSIONS_DEFAULT_OWNER);
      if (empty($user)) {
        $user = get_system_username();
      }
    }
    if (empty($user)) {
      $this->error(STRING_PERMISSIONS_NO_USER);
      return FALSE;
    }
    $group = $this->config()->getConfig('permissions-' . $permissionType . '-group');
    if (empty($group)) {
      $group = $this->config()->getConfig(CONFIG_PERMISSIONS_DEFAULT_GROUP);
      if (empty($group)) {
        $group = get_system_primary_group($user);
      }
    }
    if (empty($group)) {
      $this->error(STRING_PERMISSIONS_NO_GROUP);
      return FALSE;
    }
    $rawaccess = $this->config()->getConfig('permissions-' . $permissionType . '-access');
    if (empty($rawaccess)) {
      $rawaccess = $this->config()->getConfig(CONFIG_PERMISSIONS_DEFAULT_ACCESS);
    }
    if (empty($rawaccess)) {
      $this->error(STRING_PERMISSIONS_NO_ACCESS);
      return FALSE;
    }
    $access = octdec($rawaccess);
    if (!is_array($target)) {
      $target = array($target);
    }
    $failures = 0;
    foreach ($target as $tfile) {
      $this->working(STRING_PERMISSIONS_MESSAGE, array(
        '!file' => $tfile,
        '!user' => $user,
        '!group' => $group,
        '!access' => $rawaccess,
        '!recursion' => $recursive ? ' recursively' : '',
      ));
      $failures += chmog($tfile, $user, $group, $access, $recursive);
    }
    if (!empty($failures)) {
      $this->error(STRING_PERMISSIONS_FAILURES, array(
        '!failures' => $failures,
      ));
      return FALSE;
    }
    return TRUE;
  }
  
  public function captureEvent(DtkEvent &$context, $type) {
    switch ($type) {
      case EVENT_SITE_BUILT:
      case EVENT_UPDATE_FINISH:
      case EVENT_SUBSITE_BUILD_COMPLETE:
      case EVENT_UPDATE_CLEANUP_SUBSITE:
        if ($context->checkExecution()) {
          $site = $context->getEntity();
          $context->setResult($this->applyPermissions($site->getBuildFolder(), PERMISSION_TYPE_BUILD, TRUE));
          $context->setResult($this->applyPermissions($site->getServerFiles(), PERMISSION_TYPE_SERVER, TRUE));
          $context->setResult($this->applyPermissions($site->getSystemFiles(), PERMISSION_TYPE_SYSTEM, TRUE));
        }
        break;
    }
  }
  
}