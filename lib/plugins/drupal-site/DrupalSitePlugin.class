<?php
/**
 * @file Defines the DrupalSitePlugin class.
 * 
 * @defgroup local_site_options "Local Site Options"
 * List of options for CONFIG_ALLOW_LOCAL_SITES
 * @see @ref config "Configuration options"
 */

/**
 * Config setting for the default build directory for non-local sites.
 * 
 * @ingroup config
 */
define('CONFIG_BUILD_DIRECTORY', 'build-directory');

/**
 * Config setting for whether or not local sites are allowed.
 * 
 * @see @ref local_site_options "Local site options
 * @ingroup config
 */
define('CONFIG_ALLOW_LOCAL_SITES', 'local-sites');

/**
 * Config option that allows local sites.
 * 
 * @ingroup local_site_options
 */
define('LOCAL_SITES_ALLOW', 'allow');

/**
 * Config option that prevents local sites from being created.
 * 
 * @ingroup local_site_options
 */
define('LOCAL_SITES_NEVER', 'never');

/**
 * Config option that forces local sites to always be created.
 * 
 * @ingroup local_site_options
 */
define('LOCAL_SITES_ALWAYS', 'force');

/**
 * Argument for making a site local.
 * 
 * @ingroup args
 */
define('ARG_IS_LOCAL', 'local');

/**
 * String token for when a site setting is missing.
 * 
 * @ingroup strings
 */
define('STRING_SITE_MISSING_SETTING', 'drupal_site.error.no-setting');

/**
 * Config key for the maximum number of builds to keep.
 * 
 * This value can be set as low as 2. Values of 1 or below will be treated like
 * FALSE. If set to FALSE, there is no maximum number of builds.
 * 
 * @ingroup config
 */
define('CONFIG_MAX_BUILDS', 'max-builds');

/**
 * Fired to cleanup old builds.
 * 
 * @ingroup events
 */
define('EVENT_CLEANUP_BUILD', 'drupal-build-cleanup');

/**
 * Fired to delete a specific build from a site.
 * 
 * @ingroup events
 */
define('EVENT_DELETE_BUILD', 'drupal-delete-build');

/**
 * String token for when the build history needs to be pruned.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_SITE_HISTORY_CLEANUP', 'drupal_site.working.history-cleanup');

/**
 * String token for when an old build is about to be pruned.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_SITE_HISTORY_DELETE_ITEM', 'drupal_site.working.history-cleanup-item');

/**
 * String token for when the build history has been pruned.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_SITE_HISTORY_CLEANUP', 'drupal_site.success.history-cleanup');

/**
 * Basic plugin that provides some useful classes and configuration settings
 * for working with Drupal sites. Most plugins that rely on the DrupalSite 
 * object will need to require this one.
 * 
 * @ingroup plugins
 */
class DrupalSitePlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $root = dirname(__FILE__);
    require assemble_path($root, 'GenericDrupalEntity.class');
    require assemble_path($root, 'DrupalSite.class');
    require assemble_path($root, 'DrupalSubSite.class');
    require assemble_path($root, 'GenericSiteCommand.class');
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_ALLOW_LOCAL_SITES => LOCAL_SITES_ALLOW,
      CONFIG_BUILD_DIRECTORY => '',
      CONFIG_MAX_BUILDS => 2,
    ));
    $this->events()->registerListener(array(
      EVENT_CLEANUP_BUILD,
    ), $this);
  }
  
  public function captureEvent(&$context, $eventType) {
    switch ($eventType) {
      case EVENT_CLEANUP_BUILD:
        if (empty($context->handled) || $context->success) {
          $context->success = $this->cleanupOldBuilds($context->site);
          $context->handled = TRUE;
        }
        break;
    }
  }
  
  /**
   * Cleans up old builds.
   * 
   * @param DrupalSite $site
   *   Site to cleanup old builds.
   * 
   * @return boolean
   *   TRUE if the builds were cleaned up, otherwise FALSE.
   */
  private function cleanupOldBuilds(DrupalSite $site) {
    $max = $this->config()->getConfig(CONFIG_MAX_BUILDS);
    if (extra_empty($max) || $max < 2) {
      return TRUE;
    }
    $builds = $site->getSetting(SITE_BUILD_IDS);
    if (count($builds) <= $max) {
      return TRUE;
    }
    $del = count($builds) - $max;
    $this->working(STRING_WORKING_SITE_HISTORY_CLEANUP, array(
      '!count' => $del,
    ));
    $ret = TRUE;
    foreach ($builds as $buildID) {
      if ($del > 0) {
        $this->working(STRING_WORKING_SITE_HISTORY_DELETE, array(
          '!buildID' => $buildID,
        ));
        if (!$site->deleteBuild($this->events(), $buildID)) {
          $ret = FALSE;
        }
        $del--;
      }
    }
    if ($ret) {
      $this->success(STRING_SUCCESS_SITE_HISTORY_CLEANUP);
    }
    return $ret;
  }
  
}