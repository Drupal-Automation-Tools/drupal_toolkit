<?php
/**
 * @file Defines the DrupalSitePlugin class.
 * 
 * @defgroup local_site_options "Local Site Options"
 * List of options for CONFIG_ALLOW_LOCAL_SITES
 * @see @ref config "Configuration options"
 * 
 * @defgroup command_step_types "Command Step Types"
 * List of different command step types that can be used.
 */

/**
 * Basic plugin that provides some useful classes and configuration settings
 * for working with Drupal sites. Most plugins that rely on the DrupalSite 
 * object will need to require this one.
 * 
 * @ingroup plugins
 */
class DrupalSitePlugin extends GenericPlugin implements EventListener {
    
  public function initialize() {
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_ALLOW_LOCAL_SITES => LOCAL_SITES_ALLOW,
      CONFIG_BUILD_DIRECTORY => '',
      CONFIG_MAX_BUILDS => 10,
    ));
    $this->events()->registerListener(array(
      EVENT_CLEANUP_BUILD,
      EVENT_GET_INFO,
    ), $this);
  }
  
  public function captureEvent(DtkEvent &$context, $eventType) {
    switch ($eventType) {
      case EVENT_GET_INFO:
        if ($context->checkExecution() && ($context instanceof SiteInfoEvent)) {
          $entity = $context->getEntity();
          $context->appendInfo($this->str(STRING_INFO_IDENTIFIER), $entity->getBuildName());
        }
        break;
      case EVENT_CLEANUP_BUILD:
        if ($context->checkExecution()) {
          $context->setResult($this->cleanupOldBuilds($context->getSite()));
        }
        break;
    }
  }
  
  /**
   * Cleans up old builds.
   * 
   * @param DrupalSite $site
   *   Site to cleanup old builds.
   * 
   * @return boolean
   *   TRUE if the builds were cleaned up, otherwise FALSE.
   */
  private function cleanupOldBuilds(DrupalSite $site) {
    $max = $this->config()->getConfig(CONFIG_MAX_BUILDS);
    if (extra_empty($max) || $max < 2) { return TRUE; }
    $builds = $site->getSetting(SITE_BUILD_IDS);
    if (count($builds) <= $max) { return TRUE; }
    $del = count($builds) - $max;
    $this->working(STRING_WORKING_SITE_HISTORY_CLEANUP, array(
      '!count' => $del,
    ));
    $ret = TRUE;
    foreach ($builds as $buildID) {
      if ($del > 0) {
        $this->working(STRING_WORKING_SITE_HISTORY_DELETE_ITEM, array(
          '!buildID' => $buildID,
        ));
        if (!$site->deleteBuild($this->events(), $buildID)) {
          $ret = FALSE;
        }
        $del--;
      }
    }
    if ($ret) {
      $this->success(STRING_SUCCESS_SITE_HISTORY_CLEANUP);
    }
    return $ret;
  }
  
}