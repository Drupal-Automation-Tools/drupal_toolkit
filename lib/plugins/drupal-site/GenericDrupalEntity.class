<?php
/**
 * @file Defines the GenericDrupalEntity class.
 */

/**
 * Provides common tools required by both Sites and Subsites.
 */
abstract class GenericDrupalEntity implements OutputDependency, StringDependency {

  /**
   * String manager DI variable.
   * 
   * @var StringManagerInterface
   */
  private $strings;
  
  /**
   * Output manager DI variable.
   * @var OutputManagerInterface
   */
  private $out;
  
  /**
   * Settings for the site. Plugins may extend these.
   * @var array
   */
  private $settings = array();
  
  /**
   * List of server files. These are key files that only the webserver
   * should have access to.
   * 
   * Only local files should be registered.
   * 
   * @var array
   */
  private $serverFiles = array();
  
  /**
   * List of system files. These are key files that only the system should
   * have access to.
   * 
   * Only local files should be registered.
   * 
   * @var array
   */
  private $systemFiles = array();
  
  /**
   * List of replacement strings keyed by their replacement values.
   * 
   * @var array
   */
  private $placeholders = array();
  
  /**
   * Flag for whether or not the settings have been loaded.
   * 
   * @var boolean
   */
  private $settingsLoaded = FALSE;
  
  /**
   * Flag for whether or not this entity is about to be deleted.
   * 
   * @var boolean
   */
  private $isDeleted = FALSE;
  
  public function setOutput(OutputManagerInterface $out) {
    $this->out = $out;
  }
  
  public function setStringManager(StringManagerInterface $sm) {
    $this->strings = $sm;
  }
  
  public function strings() {
    return $this->strings;
  }
  
  public function out() {
    return $this->out;
  }
  
  /**
   * Fires an error using string translation.
   * 
   * @param string $message
   *   The message token to look-up a string.
   * @param array $args
   *   A list of substitution variables.
   * @param int $level
   *   The level of error.
   */
  public function error($message, $args = array(), $level = CLOG_ERROR) {
    $message = $this->strings()->getString($message, $args);
    $this->out()->log($message, $level);
  }
  
  /**
   * Sets a token for the site.
   * 
   * @param string $token
   *   The token name to set. See @ref site_tokens "token types".
   * @param string $value
   *   The value for the token.
   */
  public function setToken($token, $value) {
    $this->placeholders[$token] = $value;
  }
  
  /**
   * Call to flag this entity as being deleted.
   */
  public function setDeletionFlag() {
    $this->isDeleted = TRUE;
  }
  
  /**
   * Checks to see if this entity is about to be deleted.
   * 
   * @return boolean
   */
  public function isDeleted() {
    return $this->isDeleted;
  }
  
  /**
   * Replaces all tokens in $in with their replacement values.
   * 
   * Note that all tokens should be upper case!
   * 
   * @param string $in
   *   An input string to replace tokens in.
   * 
   * @return string
   *   $in with all instances of tokens replaced.
   * 
   * @see @ref site_tokens "Site token types"
   */
  public function replaceTokens($in) {
    $replacements = $this->getDynamicTokens() + $this->placeholders;
    foreach ($replacements as $k => $v) {
      $in = str_replace('@@' . strtoupper($k), $v, $in);
    }
    return $in;
  }
  
  /**
   * Retrieves the drush alias for this site.
   * 
   * @return string
   *   The drush alias.
   */
  public function getDrushAlias($required = FALSE) {
    return $this->getSetting(SITE_DRUSH_ALIAS, FALSE, $required);
  }
  
  /**
   * Child entities can use this method to specify specific tokens
   * that have dynamic values (eg that are not set using setToken()). These
   * tokens will always override manual tokens.
   * 
   * @return array
   *   An array of tokens where the key is the token name and the value is
   *   the replacement value.
   */
  protected function getDynamicTokens() {
    return array();
  }
  
  /**
   * Retrieves a setting from the site.
   * 
   * @param string $key
   *   The key to retrieve.
   * @param mixed $default
   *   A default value to return if not found. Defaults to NULL.
   * @param boolean $required
   *   If set to TRUE, will cause an error message to be displayed if
   *   $key is not available;
   * 
   * @return mixed
   *   The value of the setting defined by $key or the value of $default if
   *   $key is not set.
   */
  public function getSetting($key, $default = NULL, $required = FALSE) {
    if (isset($this->settings[$key])) {
      return $this->settings[$key];
    }
    if ($required) {
      $this->error(STRING_SITE_MISSING_SETTING, array(
        '!key' => $key
      ));
    }
    return $default;
  }
  
  /**
   * Appends a setting value to the settings array.
   * 
   * Use this over setSetting() when you want to create an array of values
   * that is extensible.
   * 
   * @param string $key
   *   The key to extend.
   * @param mixed $value
   *   The value to append to the settings key.
   */
  public function appendSettingValue($key, $value) {
    if (empty($this->settings[$key])) {
      $this->settings[$key] = array();
    }
    elseif (!is_array($this->settings[$key])) {
      $this->settings[$key] = array($this->settings[$key]);
    }
    if (is_array($value)) {
      array_extend($this->settings[$key], $value);
    }
    else {
      $this->settings[$key][] = $value;
    }
    $this->settings[$key] = array_unique_numeric($this->settings[$key]);
  }
  
  /**
   * Registers a file as a system file.
   * 
   * @param string $file
   *   The path to a system file.
   */
  public function registerSystemFile($file) {
    $this->systemFiles[] = $file;
  }
  
  /**
   * Registers a file as a server file.
   * 
   * @param string $file
   *   The path to a server file.
   */
  public function registerServerFile($file) {
    $this->serverFiles[] = $file;
  }
  
  /**
   * Retrieves all server files.
   * 
   * @return array
   *   An array of server files.
   */
  public function getServerFiles() {
    return $this->serverFiles;
  }
  
  /**
   * Retrieves all system files.
   * 
   * @return array
   *   An array of system files.
   */
  public function getSystemFiles() {
    return $this->systemFiles;
  }
  
  /**
   * Sets the specified setting to $value.
   * 
   * @param string $key
   *   The setting key.
   * @param mixed $value
   *   The setting value.
   */
  public function setSetting($key, $value) {
    $this->settings[$key] = $value;
  }
  
  /**
   * Sets the primary URL.
   * 
   * @param string $url
   *   The primary URL.
   */
  public function setPrimaryURL($url) {
    $this->setSetting(SITE_PRIMARY_URL, $url);
  }
  
  /**
   * Adds an extra URL.
   * 
   * @param string $url
   *   The extra URL.
   */
  public function addExtraURL($url) {
    $this->settings[SITE_EXTRA_URLS][] = $url;
  }
  
  /**
   * Retrieves all the URLs (primary and extra).
   * 
   * @return array
   *   An array of URLs.
   */
  public function getAllURLs() {
    $urls = $this->getSetting(SITE_EXTRA_URLS, array());
    $p = $this->getSetting(SITE_PRIMARY_URL);
    if (!empty($p)) {
      $urls[] = $p;
    }
    return $urls;
  }
  
  /**
   * Extends the settings with more settings.
   * 
   * @param array $settings
   *   An array of settings
   * 
   * @see array_extend()
   */
  public function extendSettings(array $settings) {
    array_extend($this->settings, $settings);
  }
  
  /**
   * Saves the configuration file.
   * 
   * @return boolean
   *   TRUE if the file was saved, otherwise FALSE.
   */
  public function saveConfiguration() {
    $path = $this->getConfigurationPath();
    if (!is_writable($path)) {
      if (file_exists($path)) {
        return FALSE;
      }
      else {
        if (!is_writable(dirname($path))) {
          return FALSE;
        }
      }
    }
    $export = array(
      'settings' => $this->settings,
      'placeholders' => $this->placeholders,
    );
    return file_put_contents($path, serialize($export));
  }
  
  /**
   * Loads settings from the settings file.
   * 
   * @return boolean
   *   TRUE if the settings file was loaded correctly, otherwise FALSE.
   */
  public function loadSettings() {
    if (!$this->settingsLoaded && $this->exists()) {
      $contents = unserialize(file_get_contents($this->getConfigurationPath()));
      array_extend($this->settings, $contents['settings']);
      array_extend($this->placeholders, $contents['placeholders']);
      $this->settingsLoaded = TRUE;
    }
    return $this->settingsLoaded;
  }
  
  /**
   * Checks to see if the site exists already.
   * 
   * @return boolean
   *   Returns TRUE if the site already exists, otherwise FALSE.
   */
  public function exists() {
    return file_exists($this->getConfigurationPath());
  }
  
  /**
   * Checks to see if the site exists in an older format.
   * 
   * @return boolean
   *   Returns TRUE if the site existed from the last builder, otherwise FALSE.
   */
  public function existsBackwards() {
    $paths = $this->getOldConfigurationPaths();
    foreach ($paths as $path) {
      if (file_exists($path)) {
        return TRUE;
      }
    }
    return FALSE;
  }
  
  /**
   * Returns the configuration path for this entity.
   * 
   * @return string
   *   The configuration path.
   */
  protected abstract function getConfigurationPath();
  
  /**
   * Returns an array of possible older paths for this entity. 
   * If one of these files exists, it means that an older, incompatible
   * version of this tool was used.
   * 
   * @return array
   *   An array of old possible configuration paths.
   */
  protected function getOldConfigurationPaths() {
    return array();
  }
  
  /**
   * Returns a unique identifier for this object.
   * 
   * @return string
   *   A unique identifier.
   */
  public abstract function uuid();
  
  /**
   * Retrieves the build name.
   * 
   * @return string
   *   The name of the build.
   */
  public abstract function getBuildName();
}
