<?php
/**
 * @file Provides the DrupalSite class.
 * 
 * @defgroup site_settings Drupal Site Settings
 * These are settings that can be accessed via a DrupalSite object. Note that
 * some of them are only provided by certain plugins and may be empty.
 * 
 * @defgroup site_tokens Drupal Site Tokens
 * These are tokens that can be used in replacement patterns.
 * @see DrupalSite:replaceTokens().
 */

/**
 * Fired to remove everything that belongs with a site.
 * 
 * @ingroup events
 */
define('EVENT_REMOVE_ALL', 'remove-all');

/**
 * Whether or not the site is local.
 * 
 * @ingroup site_settings
 */
define('SITE_IS_LOCAL', 'is_local');

/**
 * The build directory.
 * 
 * @ingroup site_settings
 */
define('SITE_BUILD_DIR', 'build_dir');

/**
 * The unique build name.
 * 
 * @ingroup site_settings
 */
define('SITE_BUILD_NAME', 'build_name');

/**
 * A list of build IDs.
 * 
 * @ingroup site_settings
 */
define('SITE_BUILD_IDS', 'build_ids');

/**
 * The latest build ID.
 * 
 * @ingroup site_settings
 */
define('SITE_LATEST_BUILD_ID', 'latest_build_id');

/**
 * The primary URL for the site.
 * 
 * @ingroup site_settings
 */
define('SITE_PRIMARY_URL', 'primary_url');

/**
 * Extra URLs for the site.
 * 
 * @ingroup site_settings
 */
define('SITE_EXTRA_URLS', 'extra_urls');

/**
 * A list of subsite names.
 * 
 * @ingroup site_settings
 */
define('SITE_EXISTING_SITES', 'existing_sites');

/**
 * A token for SITE_BUILD_NAME.
 * 
 * @ingroup site_tokens
 */
define('SITE_TOKEN_BUILD_NAME', 'BUILD_NAME');

/**
 * A token for SITE_BUILD_DIR.
 * 
 * @ingroup site_tokens
 */
define('SITE_TOKEN_BUILD_DIR', 'BUILD_DIRECTORY');


/**
 * Site token for the Primary URL.
 * 
 * @ingroup site_tokens
 */
define('SITE_TOKEN_PRIMARY_URL', 'SITE_PRIMARY_URL');

/**
 * Site token for all the URLs.
 *
 * @ingroup site_tokens
 */
define('SITE_TOKEN_ALL_URLS', 'SITE_ALL_URLS');

/**
 * Site token for the primary domain.
 * 
 * @ingroup site_tokens
 */
define('SITE_TOKEN_PRIMARY_DOMAIN', 'SITE_DOMAIN');

/**
 * Site token for all the domains
 * 
 * @ingroup site_tokens
 */
define('SITE_TOKEN_ALL_DOMAINS', 'SITE_ALL_DOMAINS');

/**
 * Stores information about a site installation.
 */
class DrupalSite {
  
  /**
   * Settings for the site. Plugins may extend these.
   * @var array
   */
  private $settings = array();
  
  /**
   * List of server files. These are key files that only the webserver
   * should have access to.
   * 
   * Only local files should be registered.
   * 
   * @var array
   */
  private $serverFiles = array();
  
  /**
   * List of system files. These are key files that only the system should
   * have access to.
   * 
   * Only local files should be registered.
   * 
   * @var array
   */
  private $systemFiles = array();
  
  /**
   * List of replacement strings keyed by their replacement values.
   * 
   * @var type 
   */
  private $placeholders = array();
  
  /**
   * Constructs an instance of DrupalSite.
   * 
   * You should use the factory method instead.
   * 
   * @param string $name
   *   The build name.
   * @param string $folder
   *   The root folder for the build.
   * @param boolean $local
   *   Whether or not this is a local build.
   */
  private function __construct($name, $folder, $local = FALSE) {
    $this->setSetting(SITE_IS_LOCAL, !!$local);
    $this->setSetting(SITE_BUILD_DIR, $folder);
    $this->setSetting(SITE_BUILD_NAME, $name);
    $this->setSetting(SITE_BUILD_IDS, array());
    $this->setSetting(SITE_LATEST_BUILD_ID, NULL);
    $this->setSetting(SITE_PRIMARY_URL, NULL);
    $this->setSetting(SITE_EXTRA_URLS, array());
    $this->setSetting(SITE_EXISTING_SITES, array('default'));
    $this->setToken(SITE_TOKEN_BUILD_NAME, $name);
    $this->setToken(SITE_TOKEN_BUILD_DIR, $folder);
  }
  
  /**
   * Saves the configuration file.
   * 
   * @return boolean
   *   TRUE if the file was saved, otherwise FALSE.
   */
  public function saveConfiguration() {
    $export = '';
    $export .= '[settings]' . PHP_EOL;
    foreach ($this->settings as $k => $v) {
      if (is_array($v)) {
        foreach ($v as $value) {
          $export .= $k . '="' . $value . '"' . PHP_EOL;
        }
      }
      else {
        $export .= $k . '="' . $v . '"' . PHP_EOL;
      }
    }
    $export .= PHP_EOL . PHP_EOL . '[tokens]' . PHP_EOL;
    foreach ($this->placeholders as $k => $v) {
      $export .= $k . '="' . $v . '"' . PHP_EOL;
    }
    return file_put_contents(assemble_path($this->getBuildFolder(), 'webcms.scf'), $export);
  }
  
  /**
   * Sets a token for the site.
   * 
   * @param string $token
   *   The token name to set. See @ref site_tokens "token types".
   * @param string $value
   *   The value for the token.
   */
  public function setToken($token, $value) {
    $this->placeholders[$token] = $value;
  }
  
  /**
   * Replaces all tokens in $in with their replacement values.
   * 
   * Note that all tokens should be upper case!
   * 
   * @param string $in
   *   An input string to replace tokens in.
   * 
   * @return string
   *   $in with all instances of tokens replaced.
   * 
   * @see @ref site_tokens "Site token types"
   */
  public function replaceTokens($in) {
    foreach ($this->placeholders as $k => $v) {
      $in = str_replace('@@' . strtoupper($k), $v, $in);
    }
    return $in;
  }
  
  /**
   * Retrieves a unique ID for this site.
   * 
   * @return string
   *   A unique ID for the site.
   */
  public function uuid() {
    return $this->getBuildName();
  }

  /**
   * Registers a file as a system file.
   * 
   * @param string $file
   *   The path to a system file.
   */
  public function registerSystemFile($file) {
    $this->systemFiles[] = $file;
  }
  
  /**
   * Registers a file as a server file.
   * 
   * @param string $file
   *   The path to a server file.
   */
  public function registerServerFile($file) {
    $this->serverFiles = $file;
  }
  
  /**
   * Retrieves all server files.
   * 
   * @return array
   *   An array of server files.
   */
  public function getServerFiles() {
    return $this->serverFiles;
  }
  
  /**
   * Retrieves all system files.
   * 
   * @return array
   *   An array of system files.
   */
  public function getSystemFiles() {
    return $this->systemFiles;
  }
  
  /**
   * Converts a Drupal URL path (eg example.com/mydrupal) to a Drupal site name
   * (eg example.com.mydrupal).
   * 
   * @param string $url
   *   The Drupal URL path to convert.
   * 
   * @return string
   *   The Drupal site name equivalent.
   */
  public static function convertURLToSiteName($url) {
    $sitename = $url;
    // Remove protocol
    if (($protocol = strpos($sitename, '//')) !== FALSE) {
      $sitename = substr($sitename, $protocol + 2);
    }
    // No question marks
    if (($query = strpos($sitename, '?')) !== FALSE) {
      $sitename = substr($sitename, 0, $query);
    }
    // No fragments
    if (($frag = strpos($sitename, '#')) !== FALSE) {
      $sitename = substr($sitename, 0, $frag);
    }
    // No port numbers
    preg_replace('`:\d{1,}`', '', $sitename);
    // Convert slashes to dots
    $sitename = str_replace('/', '.', $sitename);
    return $sitename;
  }
  
  /**
   * Retrieves a setting from the site.
   * 
   * @param string $key
   *   The key to retrieve.
   * @param mixed $default
   *   A default value to return if not found. Defaults to NULL.
   * 
   * @return mixed
   *   The value of the setting defined by $key or the value of $default if
   *   $key is not set.
   */
  public function getSetting($key, $default = NULL) {
    if (isset($this->settings[$key])) {
      return $this->settings[$key];
    }
    return $default;
  }
  
  /**
   * Appends a setting value to the settings array.
   * 
   * Use this over setSetting() when you want to create an array of values
   * that is extensible.
   * 
   * @param string $key
   *   The key to extend.
   * @param mixed $value
   *   The value to append to the settings key.
   */
  public function appendSettingValue($key, $value) {
    if (empty($this->settings[$key])) {
      $this->settings[$key] = array();
    }
    elseif (!is_array($this->settings[$key])) {
      $this->settings[$key] = array($this->settings[$key]);
    }
    $this->settings[$key][] = $value;
  }
  
  /**
   * Sets the primary URL.
   * 
   * @param string $url
   *   The primary URL.
   */
  public function setPrimaryURL($url) {
    $this->setSetting(SITE_PRIMARY_URL, $url);
  }
  
  /**
   * Adds an extra URL.
   * 
   * @param string $url
   *   The extra URL.
   */
  public function addExtraURL($url) {
    $this->settings[SITE_EXTRA_URLS][] = $url;
  }
  
  /**
   * Retrieves all the URLs (primary and extra).
   * 
   * @return array
   *   An array of URLs.
   */
  public function getAllURLs() {
    $urls = $this->getSetting(SITE_EXTRA_URLS);
    $p = $this->getSetting(SITE_PRIMARY_URL);
    if (!empty($p)) {
      $urls[] = $p;
    }
    return $urls;
  }
  
  /**
   * Sets the specified setting to $value.
   * 
   * @param string $key
   *   The setting key.
   * @param mixed $value
   *   The setting value.
   */
  public function setSetting($key, $value) {
    $this->settings[$key] = $value;
  }
  
  /**
   * Retrieves the build folder.
   * 
   * @return string
   *   The path to the build folder.
   */
  public function getBuildFolder() {
    return $this->getSetting(SITE_BUILD_DIR);
  }
  
  /**
   * Retrieves the build name.
   * 
   * @return string
   *   The name of the build.
   */
  public function getBuildName() {
    return $this->getSetting(SITE_BUILD_NAME);
  }
  
  /**
   * Registers a new build ID.
   * 
   * @param string $buildID
   *   The build ID.
   */
  public function registerNewBuildID($buildID) {
    $this->settings[SITE_LATEST_BUILD_ID] = $buildID;
    $this->settings[SITE_BUILD_IDS][] = $buildID;
  }
  
  /**
   * Extends the settings with more settings.
   * 
   * @param array $settings
   *   An array of settings
   * 
   * @see array_extend()
   */
  public function extendSettings(array $settings) {
    array_extend($this->settings, $settings);
  }
  
  /**
   * Loads settings from the settings file.
   * 
   * @return boolean
   *   TRUE if the settings file was loaded correctly, otherwise FALSE.
   */
  public function loadSettings() {
    if ($this->exists()) {
      array_extend($this->settings, parse_ini_file(assemble_path($this->getBuildFolder(), 'webcms.scf')));
      return TRUE;
    }
    return FALSE;
  }
  
  /**
   * Checks to see if the site exists already.
   * 
   * @return boolean
   *   Returns TRUE if the site already exists, otherwise FALSE.
   */
  public function exists() {
    return file_exists(assemble_path($this->getBuildFolder(), 'webcms.scf'));
  }
  
  /**
   * Checks to see if the site exists in an older format.
   * 
   * @return boolean
   *   Returns TRUE if the site existed from the last builder, otherwise FALSE.
   */
  public function existsBackwards() {
    return file_exists(assemble_path($this->getBuildFolder(), 'webcms.cfg'));
  }
  
  /**
   * Creates a site object.
   * 
   * @param Configuration $config
   *   The configuration object. 
   * @param string $name
   *   The name of the site.
   * @param boolean $isLocal
   *   Whether or not the site is a local site.
   * 
   * @return DrupalSite
   *   An instance of DrupalSite or NULL if the information provided is invalid.
   */
  public static function createSite(Configuration $config, $name, $isLocal) {
    $path = $config->getConfig(CONFIG_BUILD_DIRECTORY);
    if ($isLocal) {
      $path = getcwd();
    }
    $path = expand_path($path);
    if (!is_writable($path)) {
      return NULL;
    }
    if (!$isLocal) {
      $path = assemble_path($path, $name);
    }
    return new DrupalSite($name, $path, $isLocal);
  }
  
}
