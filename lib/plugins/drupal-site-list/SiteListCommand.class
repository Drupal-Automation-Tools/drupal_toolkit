<?php
/**
 * @file Defines the SiteListCommand class.
 */

/**
 * Responsible for displaying a list of relevant information about the
 * sites installed to the build directory.
 * 
 * @ingroup commands
 */
class SiteListCommand extends GenericCommand {
  
  public function executeCommand() {
    $sites = DrupalSite::findSites($this->config());
    $headers = array(
      'name' => $this->strings()->getString(STRING_DISPLAY_BUILD_NAME),
      'alias' => $this->strings()->getString(STRING_DISPLAY_DRUSH_ALIAS),
      'installed' => $this->strings()->getString(STRING_DISPLAY_INSTALLED),
      'url' => $this->strings()->getString(STRING_DISPLAY_PRIMARY_URL),
    );
    $entries = array();
    $longest = array(
      'name' => strlen($headers['name']),
      'alias' => strlen($headers['alias']),
      'installed' => strlen($headers['installed']),
      'url' => strlen($headers['url']),
    );
    $installedOptions = array(
      'y' => $this->strings()->getString(STRING_DISPLAY_INSTALLED_YES),
      'n' => $this->strings()->getString(STRING_DISPLAY_INSTALLED_NO),
    );
    foreach ($sites as $key => $site) {
      $entries[$key] = array(
        'name' => $site->getBuildName(),
        'alias' => $site->getDrushAlias(),
        'installed' => extra_empty($site->getSetting(SITE_IS_INSTALLED)) ? $installedOptions['n'] : $installedOptions['y'],
        'primary' => $site->getSetting(SITE_PRIMARY_URL),
      );
      $ids = $site->getSubSites();
      foreach ($ids as $id) {
        $subsite = $site->getSubSite($id);
        if ($subsite->exists()) {
          $subsite->loadSettings();
          $entries[$key . '_' . $id] = array(
            'name' => '- ' . $subsite->getBuildName(),
            'alias' => $subsite->getDrushAlias(),
            'installed' => extra_empty($subsite->getSetting(SITE_IS_INSTALLED)) ? $installedOptions['n'] : $installedOptions['y'],
            'primary' => $subsite->getSetting(SITE_PRIMARY_URL),
          );
        }
      }
    }
    foreach ($entries as $set) {
      foreach ($set as $k => $v) {
        if (empty($longest[$k]) || $longest[$k] < strlen($v)) {
          $longest[$k] = strlen($v);
        }
      }
    }
    echo PHP_EOL;
    echo PHP_EOL;
    $header = '';
    $header .= str_pad($headers['name'], $longest['name']);
    $header .= ' | ';
    $header .= str_pad($headers['alias'], $longest['alias']);
    $header .= ' | ';
    $header .= str_pad($headers['installed'], $longest['installed']);
    $header .= ' | ';
    $header .= $headers['url'];
    $header .= PHP_EOL;
    echo terminal_color_string($header, TERMINAL_FOREGROUND_COLOR_WHITE);
    echo str_pad('', array_sum($longest) + 23, '-') . PHP_EOL;
    foreach ($entries as $entry) {
      echo str_pad($entry['name'], $longest['name']);
      echo ' | ';
      echo str_pad($entry['alias'], $longest['alias']);
      echo ' | ';
      echo str_pad($entry['installed'], $longest['installed']);
      echo ' | ';
      echo 'http://' . $entry['primary'];
      echo PHP_EOL;
    }
    echo PHP_EOL;
    echo PHP_EOL;
  }
  
}