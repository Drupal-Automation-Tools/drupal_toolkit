<?php
/**
 * @file Defines the DrushUpdatePlugin class.
 */

/**
 * String token for when the updb command fails.
 * 
 * @ingroup strings
 */
define('STRING_COULD_NOT_UPDATE_DB', 'drush_update.error.no-updb');

/**
 * String token for when the cc command fails.
 * 
 * @ingroup strings
 */
define('STRING_COULD_NOT_CLEAR_DRUPAL_CACHE', 'drush_update.error.cache-failure');

/**
 * String token for when we are about to wipe all caches.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CACHE_WIPE', 'drush_update.working.cache-wipe');

/**
 * String token for when a site is about to have it's cache wiped
 * 
 * @ingrou strings
 */
define('STRING_WORKING_CACHE_WIPE_ITEM', 'drush_update.working.cache-wipe-item');

/**
 * String token for when all the caches have been wiped successfully.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_CACHE_WIPE', 'drush_update.success.cache-wipe');

/**
 * String token for when all databases are about to be updated.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_DB_UPDATE', 'drush_update.working.db-update');

/**
 * String token for when a database is about to be updated.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_DB_UPDATE_ITEM', 'drush_update.working.db-update-item');

/**
 * String token for when all databases have been updated.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_DB_UPDATE', 'drush_update.success.db-update');

/**
 * Responsible for updating a Drupal site via drush.
 */
class DrushUpdatePlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_UPDATE_ACTIONS,
      EVENT_UPDATE_REFRESH,
      EVENT_ROLLBACK_CLEAN,
    ), $this);
  }
  
  public function captureEvent(&$context, $eventType) {
    switch ($eventType) {
      case EVENT_UPDATE_ACTIONS:
        if (empty($context->handled) || $context->success) {
          $context->success = $this->drushUpdate($context->site);
          $context->handled = TRUE;
        }
        break;
      case EVENT_ROLLBACK_CLEAN:
      case EVENT_UPDATE_REFRESH:
        if (empty($context->handled) || $context->success) {
          $context->success = $this->drushCacheWipe($context->site);
          $context->handled = TRUE;
        }
        break;
    }
  }
  
  /**
   * Wipes all Drupal caches via Drush.
   * 
   * @param DrupalSite $site
   *   The site to wipe caches for.
   *
   * @return boolean
   *   TRUE if all the caches were wiped successfully, otherwise FALSE.
   */
  private function drushCacheWipe(DrupalSite $site) {
    $aliases = $site->getSetting(SITE_DRUSH_ALIASES);
    if (empty($aliases)) {
      $this->error(STRING_SITE_MISSING_SETTING, array(
        '!key' => SITE_DRUSH_ALIASES,
      ));
      return FALSE;
    }
    $this->working(STRING_WORKING_CACHE_WIPE);
    foreach ($aliases as $alias) {
      $this->working(STRING_WORKING_CACHE_WIPE_ITEM, array(
        '!alias' => $alias,
      ));
      if (!drush_cache_clear($alias)) {
        $this->error(STRING_COULD_NOT_CLEAR_DRUPAL_CACHE);
        return FALSE;
      }
    }
    $this->working(STRING_SUCCESS_CACHE_WIPE);
    return TRUE;
  }
  
  /**
   * Responsible for updating the database.
   * 
   * @param DrupalSite $site
   *   The drupal site to update.
   * 
   * @return boolean
   *   TRUE if the site was updated successfully, otherwise FALSE.
   */
  private function drushUpdate(DrupalSite $site) {
    $aliases = $site->getSetting(SITE_DRUSH_ALIASES);
    if (empty($aliases)) {
      $this->error(STRING_SITE_MISSING_SETTING, array(
        '!key' => SITE_DRUSH_ALIASES,
      ));
      return FALSE;
    }
    $this->working(STRING_WORKING_DB_UPDATE);
    foreach ($aliases as $alias) {
      $this->working(STRING_WORKING_DB_UPDATE_ITEM, array(
        '!alias' => $alias,
      ));
      if (!drush_updb($alias)) {
        return FALSE;
      }
    }
    $this->success(STRING_SUCCESS_DB_UPDATE);
    return TRUE;
  }
  
}
