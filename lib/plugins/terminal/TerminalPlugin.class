<?php
/**
 * @file Defines the TerminalPlugin class.
 */

/**
 * Config key for whether or not to show timestamps on the command-line
 * output.
 * 
 * @ingroup config
 */
define('CONFIG_CLI_USE_TIMESTAMP', 'cli-use-timestamp');

/**
 * Config key for whether or not to show types on the command-line
 * output.
 * 
 * @ingroup config
 */
define('CONFIG_CLI_SHOW_TYPES', 'cli-show-types');

/**
 * Config key for whether or not to use auto-flex padding
 * 
 * @ingroup config
 */
define('CONFIG_CLI_AUTO_FLEX', 'cli-auto-flex-padding');

/**
 * Config key for how much padding to have around the type.
 * 
 * @ingroup config
 */
define('CONFIG_CLI_TYPE_PADDING', 'cli-type-padding');

/**
 * Config key for the timestamp format.
 * 
 * @see date()
 * @ingroup config
 */
define('CONFIG_CLI_TIMESTAMP_FORMAT', 'cli-timestamp-format');

/**
 * Config key for whether or not to write out non-critical messages.
 * 
 * @ingroup config
 */
define('CONFIG_CLI_NON_CRITICAL', 'cli-write-non-critical-messages');

/**
 * Responsible for registering the terminal as an output device.
 */
class TerminalPlugin extends GenericPlugin implements EventListener {
  
  public function __construct() {
    $this->includeFiles(dirname(__FILE__), array(
      'PHPTerminal.class',
    ));
  }
  
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_CORE_REGISTER_OUTPUTS,
    ), $this);
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_CLI_USE_TIMESTAMP => TRUE,
      CONFIG_CLI_SHOW_TYPES => TRUE,
      CONFIG_CLI_AUTO_FLEX => TRUE,
      CONFIG_CLI_TYPE_PADDING => 20,
      CONFIG_CLI_TIMESTAMP_FORMAT => 'H:i ',
      CONFIG_CLI_NON_CRITICAL => TRUE,
    ));
  }
  
  public function captureEvent(DtkEvent &$context, $type) {
    switch($type) {
      case EVENT_CORE_REGISTER_OUTPUTS:
        $this->registerTerminalHandler($context->debugLevel);
        break;
    }
  }
  
  /**
   * Responsible for registering the terminal handler.
   * 
   * @param int $debugLevel
   *   The debug level.
   */
  private function registerTerminalHandler($debugLevel) {
    $cli = new PHPTerminal();
    $cli->setAutoFlexPadding($this->config()->getConfig(CONFIG_CLI_AUTO_FLEX));
    $cli->setShowTypes($this->config()->getConfig(CONFIG_CLI_SHOW_TYPES));
    $cli->setTimestampFormat($this->config()->getConfig(CONFIG_CLI_TIMESTAMP_FORMAT));
    $cli->setTypePadding($this->config()->getConfig(CONFIG_CLI_TYPE_PADDING));
    $cli->setUseTimestamp($this->config()->getConfig(CONFIG_CLI_USE_TIMESTAMP));
    $cli->setWriteNonCriticalMessages($this->config()->getConfig(CONFIG_CLI_NON_CRITICAL));
    switch ($debugLevel) {
      case DEBUG_LEVEL_VERBOSE:
        $cli->setMinimumDebugLevel(CLOG_INFO);
        $cli->setWriteNonCriticalMessages(TRUE);
        break;
      case DEBUG_LEVEL_DEBUG:
        $cli->setMinimumDebugLevel(CLOG_DEBUG);
        $cli->setWriteNonCriticalMessages(TRUE);
        break;
      case DEBUG_LEVEL_SILENT:
        $cli->setMinimumDebugLevel(CLOG_ERROR);
        $cli->setWriteNonCriticalMessages(FALSE);
        break;
    }
    $this->out()->registerListener($cli);
  }
  
}