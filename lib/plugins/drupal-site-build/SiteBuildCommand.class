<?php
/**
 * @file Provides the SiteBuildCommand class.
 */

/**
 * Manages the creation of a new site. Plugins that want to do something should
 * capture one of the events and possibly disable some core plugins if you want
 * to override some of the one-step processes.
 * 
 * @ingroup commands
 */
class SiteBuildCommand extends GenericSiteCommand {
    
  /**
   * Whether or not to cleanup after the execution of the command.
   * 
   * @var boolean
   */
  private $cleanup = FALSE;
  
  /**
   * Execution steps.
   * 
   * @var array
   */
  private $steps = array(
    array(
      'event' => EVENT_SITE_BUILD_START,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_SITE_CONFIGURE,
      'error' => STRING_COULD_NOT_CONFIGURE_SITE,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_SITE_BUILD_STRUCTURE,
      'error' => STRING_COULD_NOT_BUILD_STRUCTURE,
    ),
    array(
      'event' => EVENT_SITE_BUILD_CODEBASE,
      'error' => STRING_COULD_NOT_CREATE_BUILD,
    ),
    array(
      'event' => EVENT_SITE_BUILD_SITES,
      'error' => STRING_COULD_NOT_SETUP_SITES,
    ),
    array(
      'event' => EVENT_SITE_BUILD_SERVER_STRUCTURE,
      'error' => STRING_COULD_NOT_STRUCTURE_SERVER,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_SITE_BUILD_CONFIGURE_SERVER,
      'error' => STRING_COULD_NOT_CONFIGURE_SERVER,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_SITE_BUILD_MORE_CONFIG,
      'error' => STRING_COULD_NOT_CONFIGURE_SERVER,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_SITE_BUILT,
      'optional' => TRUE,
    )
  );
  
  public function verifyArguments() {
    if (!$this->isLocal()) {
      if (!$this->requireConfig(CONFIG_BUILD_DIRECTORY)) {
        return FALSE;
      }
    }
    return parent::verifyArguments() && $this->requireNoSite();
  }
  
  /**
   * Custom version of executeSiteCommandStep() for this class that takes
   * into account deconstructing the build if there is an error.
   * 
   * @param string $event
   *   Error name.
   * @param string $error
   *   Error message code.
   * @param boolean $optional
   *   Whether or not the step is optional.
   * @param array $vars
   *   Extra variables
   * @return boolean
   *   TRUE if the step was successful.
   */
  private function fireEvent($event, $error, $optional = FALSE, $vars = array()) {
    if (!$this->executeSiteCommandStep($event, $optional, 0, $error, $vars)) {
      $this->error($error);
      if ($this->cleanup) {
        $this->executeSiteCommandStep(EVENT_REMOVE_ALL, FALSE, 0, STRING_UNABLE_TO_REMOVE, array(
          'fromBuild' => TRUE,
        ));
      }
      exit(1);
    }
    return TRUE;
  }
  
  public function executeCommand() {
    $this->getSite()->makeNew();
    $this->cleanup = !extra_empty($this->config()->getConfig(CONFIG_SITE_CLEANUP_ON_ERROR));
    $vars = array(
      'buildID' => dtk_generate_build_id(),
    );
    foreach ($this->steps as $step) {
      $this->fireEvent(
          $step['event'], 
          isset($step['error']) ? $step['error'] : NULL,
          !empty($step['optional']),
          $vars
      );
    }
    if (!$this->saveSiteConfiguration(FALSE)) {
      if ($this->cleanup) {
        $this->executeSiteCommandStep(EVENT_REMOVE_ALL, FALSE, 0, STRING_UNABLE_TO_REMOVE, array(
          'fromBuild' => TRUE,
        ));
      }
      exit(1);
    }
    echo PHP_EOL;
    dtk_execute_command('site-info');
  }
}
