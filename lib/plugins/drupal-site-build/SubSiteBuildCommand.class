<?php
/**
 * @file Defines the SubSiteBuildCommand class
 */

/**
 * Responsible for building a subsite.
 * 
 * @ingroup commands
 */
class SubSiteBuildCommand extends GenericSiteCommand {
  
  /**
   * The sequence of steps to execute.
   * 
   * @var array
   */
  private $steps = array(
    array( 
      'event' => EVENT_SUBSITE_BUILD_START,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_SUBSITE_BUILD_CONFIG,
    ),
    array(
      'event' => EVENT_SUBSITE_BUILD_CODEBASE,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_SUBSITE_BUILD_SERVER_CONFIG,
      'optional' => TRUE,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_SUBSITE_BUILD_PARENT_SERVER_REFRESH,
      'optional' => TRUE,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_SUBSITE_BUILD_EXTRAS,
      'optional' => TRUE,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_SUBSITE_BUILD_COMPLETE,
      'optional' => TRUE,
      'continue' => TRUE,
    ),
  );
  
  public function verifyArguments() {
    if (!$this->isLocal()) {
      if (!$this->requireConfig(CONFIG_BUILD_DIRECTORY)) {
        return FALSE;
      }
    }
    return parent::verifyArguments() && $this->requireNoSubSite();
  }
  
  public function executeCommand() {
    $this->executeAllSteps($this->steps, array(
      'error' => STRING_SUBSITE_BUILD_GENERIC_ERROR,
      'type' => COMMAND_STEP_SUBSITE,
    ));
    $site = $this->getSubSite()->getParentSite();
    $site->registerSubSite($this->getSubSite());
    $this->saveSubSiteConfiguration();
    $this->saveSiteConfiguration();
    echo PHP_EOL;
    dtk_execute_command('subsite-info');
  }
  
}
