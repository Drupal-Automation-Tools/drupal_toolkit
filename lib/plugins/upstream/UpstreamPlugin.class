<?php
/**
 * @file Defines the UpstreamPlugin class.
 */

/**
 * Generic plugin that supports the concept of upstream servers.
 * 
 * @ingroup plugins
 */
class UpstreamPlugin extends GenericPlugin implements EventListener, ServerInteractionDependency {
  
  private $servers;
  
  public function setServerManager(ServerInteractionManagerInterface $servers) {
    $this->servers = $servers;
  }
  
  public function servers() {
    return $this->servers;
  }
  
  public function initialize() {
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_IGNORE_UPSTREAM => TRUE,
    ));
    $this->events()->registerListener(array(
      EVENT_UPDATE_PRIOR_ACTIONS,
      EVENT_UPDATE_PRIOR_SUBSITE_ACTIONS,
    ), $this);
  }
  
  public function captureEvent(DtkEvent &$context, $eventType) {
    switch ($eventType) {
      case EVENT_UPDATE_PRIOR_SUBSITE_ACTIONS:
      case EVENT_UPDATE_PRIOR_ACTIONS:
        if ($context->checkExecution()) {
          $context->setResult($this->triggerUpstreamPull($context->getEntity()));
        }
        break;
    }
  }
  
  /**
   * Retrieves the upstream server that is in use.
   * 
   * @return PhysicalServerInterface
   *   The upstream server that is in use, or NULL if there is not one.
   */
  private function getUpstreamServer() {
    $servers = $this->servers()->findServers(SERVER_TYPE_UPSTREAM_SERVER, FALSE);
    if (!empty($servers)) {
      return end($servers);
    }
    return NULL;
  }
  
  /**
   * Fires an event that triggers the upstream pull.
   * 
   * @param GenericDrupalEntity $site
   *   The DrupalSite to pull from upstream.
   * 
   * @return boolean
   *   TRUE if upstream pull was successful.
   */
  private function triggerUpstreamPull(GenericDrupalEntity $site) {
    if (!extra_empty($this->config()->getConfig(CONFIG_IGNORE_UPSTREAM))) {
      return TRUE;
    }
    $this->working(STRING_WORKING_PULL_UPSTREAM);
    $server = $this->getUpstreamServer();
    // Bail on the process if there is no upstream server defined.
    if (empty($server)) {
      $this->error(STRING_MISSING_UPSTREAM_SERVER);
      return FALSE;
    }
    $drushAlias = $site->getDrushAlias(TRUE);
    if (empty($drushAlias)) { return FALSE; }
    $event = new UpstreamPullEvent($site, $server);
    $this->events()->fireEvent(EVENT_UPSTREAM_PULL, $event);
    if ($event->success()) {
      $this->success(STRING_SUCCESS_PULL_UPSTREAM);
    }
    return $event->success();
  }
  
}
