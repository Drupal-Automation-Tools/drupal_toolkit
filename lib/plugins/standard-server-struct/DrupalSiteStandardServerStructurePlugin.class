<?php
/**
 * @file Defines the DrupalSiteStandardServerStructurePlugin class.
 */

/**
 * Config key for the server sites directory.
 * 
 * @ingroup config
 */
define('CONFIG_SERVER_SITES_DIR', 'server-sites-dir');

/**
 * Site token for the document root.
 * 
 * @ingroup site_tokens
 */
define('SITE_TOKEN_DOCROOT', 'SITE_DOCROOT');

/**
 * Site setting for the document root.
 * 
 * @ingroup site_settings
 */
define('SITE_SETTING_DOCROOT', 'server-doc-root');

/**
 * String token for if the site structure already exists.
 * 
 * @ingroup strings
 */
define('STRING_SERVER_STRUCTURE_ALREADY_EXISTS', 'standard_server_structure.error.already-exists');

/**
 * String token for if the site structure could not be created.
 * 
 * @ingroup strings
 */
define('STRING_SERVER_STRUCTURE_CREATE_FAILURE', 'standard_server_structure.error.could-not-create');

/**
 * String token for when the server structure is about to be deleted.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_DELETE_SERVER_STRUCT', 'standard_server_structure.working.delete-structure');

/**
 * String token for when the server structure was successfully removed.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_DELETE_SERVER_STRUCT', 'standard_server_structure.success.delete-structure');

/**
 * String token for when the server structure was not removed.
 * 
 * @ingroup strings
 */
define('STRING_FAILURE_DELETE_SERVER_STRUCT', 'standard_server_structure.failure.delete-structure');

/**
 * String token for when the server structure is about to be created.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CREATE_SERVER_STRUCT', 'standard_server_structure.working.create-structure');

/**
 * String token for when the server structure was successfully created.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_CREATE_SERVER_STRUCT', 'standard_server_structure.success.create-structure');

/**
 * Responsible for setting up some special things for the server.
 * 
 * We keep a folder of symlinks to the current builds of each site, for 
 * convienence. This is usually in the webroot of the server. The builds are
 * often located in a hidden folder.
 */
class DrupalSiteStandardServerStructurePlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_SITE_BUILD_SERVER_STRUCTURE,
      EVENT_REMOVE_ALL,
      EVENT_UPDATE_PREPARE_SERVER,
      EVENT_SUBSITE_BUILD_CONFIG,
    ), $this);
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_SERVER_SITES_DIR => '',
    ));
  }
  
  /**
   * Handles configuration for local sites.
   * 
   * @param DrupalSite $site
   *   A local Drupal site.
   * 
   * @return boolean
   *   TRUE if the site was configured correctly, otherwise FALSE.
   */
  private function initializeLocalStructure(DrupalSite $site) {
    $site->setSetting(SITE_SETTING_DOCROOT, assemble_path($site->getBuildFolder(), 'current'));
    $site->setToken(SITE_TOKEN_DOCROOT, $site->getSetting(SITE_SETTING_DOCROOT));
    return TRUE;
  }
  
  /**
   * Handles configuration for sites.
   * 
   * Local sites are delegated to initializeLocalStructure().
   * 
   * @param DrupalSite $site
   *   The site to configure.
   * 
   * @return boolean
   *   TRUE if the site was configured correctly, otherwise FALSE.
   */
  private function initializeServerStructure(DrupalSite $site) {
    $this->working(STRING_WORKING_CREATE_SERVER_STRUCT);
    if ($site->getSetting(SITE_IS_LOCAL)) {
      return $this->initializeLocalStructure($site);
    }
    $config = $this->getConfig(array(
      CONFIG_SERVER_SITES_DIR
    ));
    if (empty($config)) {
      return FALSE;
    }
    $serverDir = $config[CONFIG_SERVER_SITES_DIR];
    $link = assemble_path($serverDir, $site->getBuildName());
    if (is_link($link)) {
      $this->error(STRING_SERVER_STRUCTURE_ALREADY_EXISTS);
      return FALSE;
    }
    symlink(assemble_path($site->getBuildFolder(), 'current'), $link);
    if (!is_link($link)) {
      $this->error(STRING_SERVER_STRUCTURE_CREATE_FAILURE);
      return FALSE;
    }
    $site->setSetting(SITE_SETTING_DOCROOT, $link);
    $site->setToken(SITE_TOKEN_DOCROOT, $site->getSetting(SITE_SETTING_DOCROOT));
    $this->success(STRING_SUCCESS_CREATE_SERVER_STRUCT);
    return TRUE;
  }
  
  /**
   * Responsible for deleting the server structure.
   * 
   * @param DrupalSite $site
   *   The server structure.
   * 
   * @return boolean
   *   TRUE if the server docroot was removed successfully, otherwise FALSE.
   */
  private function deleteServerStructure(DrupalSite $site) {
    // We don't handle local sites.
    if ($site->getSetting(SITE_IS_LOCAL)) {
      return TRUE;
    }
    $this->working(STRING_WORKING_DELETE_SERVER_STRUCT);
    $path = $site->getSetting(SITE_SETTING_DOCROOT);
    if (!empty($path)) {
      unlink($path);
    }
    $ret = !is_link($path);
    if ($ret) {
      $this->success(STRING_SUCCESS_DELETE_SERVER_STRUCT);
    }
    else {
      $this->failure(STRING_FAILURE_DELETE_SERVER_STRUCT);
    }
    return $ret;
  }

  /**
   * Configures a subsite to have the necessary items from its parent item.
   * 
   * @param DrupalSubSite $subsite
   *   Subsite to configure
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function configureSubsite(DrupalSubSite $subsite) {    
    $subsite->setSetting(SITE_SETTING_DOCROOT, $subsite->getParentSite()->getSetting(SITE_SETTING_DOCROOT));
    $subsite->setToken(SITE_TOKEN_DOCROOT, $subsite->getParentSite()->getSetting(SITE_SETTING_DOCROOT));
    return TRUE;
  }
  
  public function captureEvent(&$context, $type) {
    switch ($type) {
      case EVENT_SITE_BUILD_SERVER_STRUCTURE:
        $context->success = $this->initializeServerStructure($context->site);
        $context->stopPropagation = TRUE;
        break;
      case EVENT_REMOVE_ALL:
        $context->success = $this->deleteServerStructure($context->site) && $context->success;
        break;
      case EVENT_SUBSITE_BUILD_CONFIG:
        if (empty($context->handled) || $context->success) {
          $context->success = $this->configureSubsite();
        }
        break;
    }
  }
  
}