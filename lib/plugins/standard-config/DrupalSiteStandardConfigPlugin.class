<?php
/**
 * @file Defines the DrupalSiteStandardConfigPlugin class.
 */

/**
 * Config setting to specify a prefix for all created URLs.
 * 
 * Usually the non-prefixed versions will be created as well.
 * 
 * @ingroup config
 */
define('CONFIG_SITE_URL_PREFIX', 'site-url-prefix');

/**
 * Config setting to specify a pattern for the primary URL.
 * 
 * @see DrupalSite::replaceTokens().
 * @ingroup config
 */
define('CONFIG_SITE_URL_PATTERN', 'site-url-pattern');

/**
 * Config setting to specify a pattern for a subsite's primary URL.
 */
define('CONFIG_SUBSITE_URL_PATTERN', 'subsite-url-pattern');

/**
 * Argument to provide extra URLs for the site.
 * 
 * @ingroup args
 */
define('OPTION_SITE_URLS', 'site-extra-urls');

/**
 * Argument to specify the site's primary URL.
 * 
 * @ingroup args
 */
define('OPTION_SITE_URL', 'site-url');

define('STRING_HELP_OPTION_SITE_URL', 'help.option.site-url');

define('STRING_HELP_OPTION_SITE_URLS', 'help.option.site-extra-urls');

/**
 * Responsible for some basic configuratino settings that everyone is likely
 * to need with this tool.
 */
class DrupalSiteStandardConfigPlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_SITE_URL_PATTERN => '@@BUILD_NAME.localhost',
      CONFIG_SUBSITE_URL_PATTERN => '@@SUBSITE_PARENT_ID.localhost/@@SUBSITE_ID',
    ));
    $this->events()->registerListener(array(
      EVENT_SITE_CONFIGURE,
      EVENT_SUBSITE_BUILD_CONFIG,
      EVENT_UPDATE_PREPARE,
      EVENT_SITE_BUILD_START,
      EVENT_ALTER_HELP_INSTRUCTIONS,
    ), $this);
  }
  
  public function captureEvent(DtkEvent &$context, $type) {
    switch ($type) {
      case EVENT_ALTER_HELP_INSTRUCTIONS:
        if ($context instanceof HelpInstructionsEvent) {
          $instruction = $context->findInstructions('site-build');
          if (!empty($instruction)) {
            $instruction->defineOption(OPTION_SITE_URL, $this->str(STRING_HELP_OPTION_SITE_URL));
            $instruction->defineOption(OPTION_SITE_URLS, $this->str(STRING_HELP_OPTION_SITE_URLS));
          }
          $instruction = $context->findInstructions('subsite-build');
          if (!empty($instruction)) {
            $instruction->defineOption(OPTION_SITE_URL, $this->str(STRING_HELP_OPTION_SITE_URL));
            $instruction->defineOption(OPTION_SITE_URLS, $this->str(STRING_HELP_OPTION_SITE_URLS));
          }
        }
        break;
      case EVENT_SITE_BUILD_START:
      case EVENT_UPDATE_PREPARE:
        if ($context->checkExecution()) {
          $context->setResult($this->setUpdateVariables($context->getEntity(), $context->getVariable('buildID')));
        }
        break;
      case EVENT_SUBSITE_BUILD_CONFIG:
      case EVENT_SITE_CONFIGURE:
        if ($context->checkExecution()) {
          $context->setResult($this->addEntityDomains($context->getEntity()));
        }
        break;
    }
  } 
  
  /**
   * Set any variables that need to be set on update.
   * 
   * @param GenericDrupalEntity $entity
   *   The entity being updated.
   * @param string $buildID
   *   The new build ID.
   * 
   * @return boolean
   *   TRUE if successful, otherwise FALSE.
   */
  private function setUpdateVariables(GenericDrupalEntity $entity, $buildID) {
    $entity->registerNewBuildID($buildID);
    return TRUE;
  }
  
  /**
   * Retrieves a list of extra URLs.
   * 
   * @return array
   */
  protected function getExtraURLs() {
    $urls = array();
    $fromArg = $this->args()->getOption(OPTION_SITE_URLS);
    if (!empty($fromArg)) {
      $urls = array_merge($urls, explode(DEFAULT_SPLIT_CHARACTER, $fromArg));
    }
    return array_unique($urls);
  }
  
  /**
   * Retrieves the primary site URL
   * 
   * @param GenericDrupalEntity $site
   *   The site or subsite we're operating on.
   * 
   * @return string
   *   The primary URL or null if we cannot figure out one.
   */
  private function getSiteURL(GenericDrupalEntity $site) {
    $fromArg = $this->args()->getOption(OPTION_SITE_URL);
    if (!empty($fromArg)) {
      return $fromArg;
    }
    $pattern = $this->config()->getConfig(CONFIG_SITE_URL_PATTERN);
    if ($site instanceof DrupalSubSite) {
      $pattern = $this->config()->getConfig(CONFIG_SUBSITE_URL_PATTERN);
    }    
    if (!empty($pattern)) {
      return $site->replaceTokens($pattern);
    }
    return NULL;
  }
  
  /**
   * Retrieves the domain from a URL.
   * 
   * @param string $url
   *   A URL to parse
   * 
   * @return string
   *   The domain name of URL
   */
  private function fetchDomain($url) {
    // domains that don't begin with a protocol are not handled correctly
    // by parse_url().
    if (strpos($url, '://') === FALSE) {
      $url = 'http://' . $url;
    }
    $pieces = parse_url($url);
    if (isset($pieces['host'])) {
      return $pieces['host'];
    }
    return NULL;
  }
  
  /**
   * Appends all the information needed about the site or subsite in concern
   * of domains and URLs.
   * 
   * @param GenericDrupalEntity $entity
   *   The entity to configure
   */
  private function addEntityDomains(GenericDrupalEntity $entity) {
    $primary = trim($this->getSiteURL($entity));
    $entity->setPrimaryURL($primary);
    $entity->setToken(SITE_TOKEN_PRIMARY_URL, $primary);
    $entity->setToken(SITE_TOKEN_PRIMARY_DOMAIN, $this->fetchDomain($primary));
    $domains = array(
      $this->fetchDomain($primary),
    );
    $prefix = $this->config()->getConfig(CONFIG_SITE_URL_PREFIX);
    if (!empty($prefix)) {
      $prefixedPrimary = $prefix . $primary;
      $entity->addExtraURL($prefixedPrimary);
      $domains[] = $this->fetchDomain($prefixedPrimary);
    }
    foreach ($this->getExtraURLs() as $url) {
      $url = trim($url);
      if ($url !== $primary) {
        $entity->addExtraURL($url);
        $d = $this->fetchDomain($url);
        if (!in_array($d, $domains)) {
          $domains[] = $d;
        }
        if (!empty($prefix)) {
          $entity->addExtraURL($prefix . $url);
          $prefixedDomain = $prefix . $d;
          if (!in_array($prefixedDomain, $domains)) {
            $domains[] = $prefixedDomain;
          }
        }
      }
    }
    $entity->setSetting(SITE_SETTING_ALL_DOMAINS, $domains);
    $entity->setToken(SITE_TOKEN_ALL_DOMAINS, implode(', ', $domains));
    return TRUE;
  }
  
}