<?php
/**
 * @file Defines the GatewayConfigurationPlugin.
 */

/**
 * Event to register gateway servers.
 * 
 * @ingroup events
 */
define('EVENT_FIND_GATEWAY_SERVERS', 'find-gateway-servers');

/**
 * Config key to set whether or not the local server is a gateway server.
 * 
 * @ingroup config
 */
define('CONFIG_GATEWAY_USE_LOCAL', 'gateway-local');

/**
 * Config key to set the default gateway type.
 * 
 * @ingroup config
 */
define('CONFIG_GATEWAY_TYPE', 'gateway-server-type');

/**
 * Config key to set the default gateway config template.
 * 
 * @ingroup config
 */
define('CONFIG_GATEWAY_CONFIG_TEMPLATE', 'gateway-config-template');

/**
 * Config key to set the default gateway filename template.
 * 
 * @ingroup config
 */
define('CONFIG_GATEWAY_FILENAME_TEMPLATE', 'gateway-config-filename-template');

/**
 * Config key to prevent config files from being updated.
 * 
 * @ingroup config
 */
define('CONFIG_GATEWAY_STATIC_CONFIG', 'gateway-config-static');

/**
 * Config key underneath the servers away for gateway servers
 * 
 * @ingroup server_types
 */
define('SERVER_TYPE_GATEWAY', 'gateway');

/**
 * Set to TRUE to prevent the local server from being used as an gateway server.
 * 
 * @ingroup config
 */
define('CONFIG_DISABLE_LOCAL_GATEWAY', 'si-disable-local-gateway');

/**
 * Server setting to override the default gateway filename template.
 * 
 * @ingroup server_settings
 */
define('SERVER_SETTING_GATEWAY_FILENAME_TMEPLATE', 'gateway-filename-template');

/**
 * Server setting to override the default gateway configuration.
 * 
 * @ingroup server_settings
 */
define('SERVER_SETTING_GATEWAY_CONFIG_TEMPLATE', 'gateway-template-file');

/**
 * Server setting to prevent the server's gateway config from being overridden
 * on update.
 * 
 * @ingroup server_settings
 */
define('SERVER_SETTING_GATEWAY_STATIC_CONFIG', 'gateway-static-config');

/**
 * Server setting to override the default gateway type.
 * 
 * @ingroup server_settings
 */
define('SERVER_SETTING_GATEWAY_TYPE', 'gateway-type');

/**
 * String token for when there is no gateway template file defined.
 * 
 * @ingroup strings
 */
define('STRING_MISSING_GATEWAY_TEMPLATE', 'gateway.error.no-template');

/**
 * String token for when a write could not be performed to a gateway server.
 * 
 * @ingroup strings
 */
define('STRING_GATEWAY_BAD_WRITE', 'gateway.error.bad-write');

/**
 * Set to TRUE in order to use this plugin.
 * 
 * @ingroup config
 */
define('CONFIG_HAS_GATEWAY', 'has-gateways');

/**
 * String token for when gateway configuration is about to be published.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CONFIGURE_GATEWAY', 'gateway.working.configure');

/**
 * String token for when a specific server's gateway configuration is about to
 * be published.
 * 
 * @ingroup strings
 */
define('STRING_WORKING_CONFIGURE_GATEWAY_ITEM', 'gateway.working.configure-item');

/**
 * String token for when all gateway configuration was published successfully.
 * 
 * @ingroup strings
 */
define('STRING_SUCCESS_CONFIGURE_GATEWAY', 'gateway.success.configure');

/**
 * Responsible for configuring any gateway servers that have been defined.
 */
class GatewayConfigurationPlugin extends GenericPlugin implements EventListener, ServerInteractionDependency {

  /**
   * Dependency injection storage for the ServerInteractionManagerInterface 
   * object. 
   * 
   * @var ServerInteractionManagerInterface
   */
  private $servers;
  
  public function setServerManager(ServerInteractionManagerInterface $servers) {
    $this->servers = $servers;
  }
  
  public function servers() {
    return $this->servers;
  }
  
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_FIND_GATEWAY_SERVERS,
      EVENT_SITE_BUILD_MORE_CONFIG,
      EVENT_UPDATE_REFRESH_SERVER_CONFIG,
      EVENT_SUBSITE_BUILD_PARENT_SERVER_REFRESH,
    ), $this);
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_HAS_GATEWAY => FALSE,
      CONFIG_GATEWAY_STATIC_CONFIG => FALSE,
      CONFIG_GATEWAY_USE_LOCAL => FALSE,
      CONFIG_GATEWAY_TYPE => '',
      CONFIG_GATEWAY_CONFIG_TEMPLATE => '',
      CONFIG_GATEWAY_FILENAME_TEMPLATE => '@@BUILD_NAME',
      CONFIG_SERVER_LIST => array(
        SERVER_TYPE_GATEWAY => array(),
      ),
    ));
  }
  
  public function requiredPlugins() {
    return array('DrupalSitePlugin', 'ServerInteractionPlugin', 'HttpConfigurationPlugin');
  }
  
  public function captureEvent(DtkEvent &$context, $type) {
    switch ($type) {
      case EVENT_SITE_BUILD_CONFIGURE_SERVER:
      case EVENT_SUBSITE_BUILD_PARENT_SERVER_REFRESH:
        if ($context->checkExecution()) {
          $context->setResult($this->publishGatewayConfig($context->getSite()));
        }
        break;
      case EVENT_UPDATE_REFRESH_SERVER_CONFIG:
      case EVENT_REMOVE_SUBSITE_CLEANUP:
        if ($context->checkExecution()) {
          $context->setResult($this->updateAll($context->getSite()));
        }
        break;
    }
  }
  
  /**
   * Updates all the gateway configuration files as needed.
   * 
   * @param DrupalSite $site
   */
  private function updateAll(DrupalSite $site) {
    if (extra_empty($this->config()->getConfig(CONFIG_GATEWAY_STATIC_CONFIG))) {
      return $this->publishGatewayconfig($site, TRUE);
    }
    return TRUE;
  }
  
  /**
   * Publishes the gateway configuration settings to all the gateway servers.
   * 
   * @param DrupalSite $site
   *   The site to publish configuration for.
   * @param boolean $update
   *   Whether or not this is an update operation.
   * 
   * @return boolean
   *   TRUE if the configuration was published successfully, otherwise FALSE.
   */
  private function publishGatewayConfig(DrupalSite $site, $update = FALSE) {
    if (extra_empty($this->config()->getConfig(CONFIG_HAS_GATEWAY))) {
      return TRUE;
    }
    $this->working(STRING_WORKING_CONFIGURE_GATEWAY);
    $c = $this->getConfig(array(
      'template' => CONFIG_GATEWAY_CONFIG_TEMPLATE,
      'fn_template' => CONFIG_GATEWAY_FILENAME_TEMPLATE,
    ));
    if (empty($c)) { return FALSE; }
    if (!is_readable($c['template'])) {
      $this->error(STRING_MISSING_GATEWAY_TEMPLATE);
      return FALSE;
    }
    $defaultConfig = file_get_contents($c['template']);
    $servers = $this->servers()->getServerList(
        SERVER_TYPE_GATEWAY,
        EVENT_CAST_HTTP_SERVER,
        SERVER_SETTING_GATEWAY_TYPE,
        $this->config()->getConfig(CONFIG_GATEWAY_TYPE),
        !extra_empty($this->config()->getConfig(CONFIG_GATEWAY_USE_LOCAL))
    );
    $gatewayRegistry = array();
    foreach ($servers as $key => $gatewayServer) {
      if ($gatewayServer instanceof GenericHttpServer) {
        if ($update) {
          if (!extra_empty($gatewayServer->machine()->getSetting(SERVER_SETTING_GATEWAY_STATIC_CONFIG))) {
            continue;
          }
        }
        if (!$this->writeGatewayTemplate($gatewayServer, $key, $site, $defaultConfig, $c['fn_template'])) {
          return FALSE;
        }
        $gatewayRegistry[] = array(
          'server' => $gatewayServer->machine(),
          'file' => $gatewayServer->getConfigFilePath($file),
        );
      }
    }
    $site->appendSettingValue(SITE_REMOTE_FILES, $gatewayRegistry);
    $this->success(STRING_SUCCESS_CONFIGURE_GATEWAY);
    return TRUE;
  }
  
  /**
   * Writes a configuration file to the gateway server.
   * 
   * @param GenericHttpServer $gatewayServer
   *   Gateway server to write to.
   * @param string $key
   *   Name of the gateway server.
   * @param DrupalSite $site
   *   DrupalSite that is writing the configuration. Note that subsites 
   *   rely on their parent site to write one configuration file.
   * @param string $defaultConfig
   *   Default configuration file contents.
   * @param string $defaultFileTemplate
   *   Default file template contents.
   * @return boolean
   */
  private function writeGatewayTemplate(GenericHttpServer $gatewayServer, $key, DrupalSite $site, $defaultConfig, $defaultFileTemplate) {
    $this->working(STRING_WORKING_CONFIGURE_GATEWAY_ITEM, array(
      '!name' => $key,
    ));
    $rawconfig = $defaultConfig;
    $configFile = $gatewayServer->machine()->getSetting(SERVER_SETTING_GATEWAY_CONFIG_TEMPLATE);
    if (is_readable($configFile)) {
      $rawconfig = file_get_contents($configFile);
    }
    $rawfile = $gatewayServer->machine()->getSetting(SERVER_SETTING_GATEWAY_FILENAME_TMEPLATE);
    if (empty($rawfile)) {
      $rawfile = $defaultFileTemplate;
    }
    $config = $site->replaceTokens($rawconfig);
    $file = $site->replaceTokens($rawfile);
    if (!$gatewayServer->writeConfig($file, $config)) {
      $this->error(STRING_GATEWAY_BAD_WRITE);
      return FALSE;
    }
    $gatewayServer->doReboot();
    return TRUE;
  }
  
}
