<?php
/*
 * @file Defines the DrupalSiteDeletePlugin class.
 */

/**
 * String token for when we are unable to remove the site entirely.
 * 
 * @ingroup strings
 */
define('STRING_UNABLE_TO_REMOVE', 'drupal_site_delete.error.unable-to-remove');

/**
 * Event fired to remove all evidence that a subsite ever existed.
 * 
 * @ingroup events
 */
define('EVENT_REMOVE_SUBSITE_ALL', 'subsite-remove');

/**
 * Generic message if there is an error removing the subsite.
 * 
 * @ingroup strings
 */
define('STRING_ERROR_REMOVE_SUBSITE', 'drupal_site_delete.error.removing-subsite');

/**
 * Event fired after the subsite has been removed to cleanup the parent
 * site object.
 * 
 * @ingroup events
 */
define('EVENT_REMOVE_SUBSITE_CLEANUP', 'subsite-remove-cleanup');

/**
 * Responsible for registering the SiteDeleteCommand object and its
 * configuration, etc.
 */
class DrupalSiteDeletePlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $base = dirname(__FILE__);
    require assemble_path($base, 'SiteDeleteCommand.class');
    require assemble_path($base, 'SubSiteDeleteCommand.class');
    $this->events()->registerListener(array(
      EVENT_CORE_REGISTER_COMMANDS,
    ), $this);
  }
  
  public function requiredPlugins() {
    return array('DrupalSitePlugin');
  }
  
  public function captureEvent(&$context, $eventType) {
    switch ($eventType) {
      case EVENT_CORE_REGISTER_COMMANDS:
        $this->router()->addCommand('site-delete', new SiteDeleteCommand());
        $this->router()->addCommand('subsite-delete', new SubSiteDeleteCommand());
        break;
    }
  }
  
}
