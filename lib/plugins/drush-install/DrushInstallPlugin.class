<?php
/**
 * @file Defines the DrushInstallPlugin class.
 */

/**
 * Takes ownership of the install task using drush si.
 * 
 * @ingroup plugins
 */
class DrushInstallPlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_INSTALL_TASK,
    ), $this);
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_INSTALL_PROFILE => 'standard',
      CONFIG_INSTALL_DEFAULT_EMAIL => '',
      CONFIG_INSTALL_DEFAULT_USER => '',
      CONFIG_INSTALL_DEFAULT_PASSWORD => '',
      CONFIG_INSTALL_EXTRAS => array(),
      CONFIG_INSTALL_SITE_NAME => '',
      CONFIG_INSTALL_SITE_EMAIL => '',
      CONFIG_INSTALL_SITE_OPTIONS => array(),
      CONFIG_INSTALL_MODULES => array(),
    ));
    $this->config()->extendFromOption(CONFIG_INSTALL_PROFILE, OPTION_INSTALL_PROFILE);
    $this->config()->extendFromOption(CONFIG_INSTALL_DEFAULT_EMAIL, OPTION_INSTALL_EMAIL);
    $this->config()->extendFromOption(CONFIG_INSTALL_DEFAULT_USER, OPTION_INSTALL_USER);
    $this->config()->extendFromOption(CONFIG_INSTALL_DEFAULT_PASSWORD, OPTION_INSTALL_PASSWORD);
    $this->config()->extendFromOption(CONFIG_INSTALL_EXTRAS, OPTION_INSTALL_SETTINGS, NULL, TRUE);
    $this->config()->extendFromOption(CONFIG_INSTALL_SITE_EMAIL, OPTION_INSTALL_SITE_EMAIL);
    $this->config()->extendFromOption(CONFIG_INSTALL_SITE_NAME, OPTION_INSTALL_SITE_NAME);
    $this->config()->extendFromOption(CONFIG_INSTALL_SITE_OPTIONS, OPTION_INSTALL_OPTIONS, NULL, TRUE);
    $this->config()->extendFromOption(CONFIG_INSTALL_MODULES, OPTION_INSTALL_MODULES, NULL, TRUE);
    $this->config()->extendFromOption(CONFIG_INSTALL_MODULES_FILE, OPTION_INSTALL_MODULES_FILE);
  }
    
  public function captureEvent(DtkEvent &$context, $type) {
    switch ($type) {
      case EVENT_SUBSITE_REFRESH_CONFIGURATION:
      case EVENT_SITE_REFRESH_CONFIGURATION:
        if ($context->checkExecution()) {
          $context->setResult($this->installSite($context->getEntity(), TRUE));
        }
        break;
      case EVENT_INSTALL_TASK:
        if ($context->checkExecution()) {
          $context->setResult($this->installSite($context->getEntity()));
        }
        break;
    }
  }
  
  /**
   * Responsible for the site install command.
   * 
   * @param GenericDrupalEntity $site
   *   The site to install.
   * 
   * @return boolean
   *   TRUE if the site was installed successfully, otherwise FALSE.
   */
  private function installSite(GenericDrupalEntity $site, $forRefresh = FALSE) {
    $drushAlias = $site->getDrushAlias(TRUE);
    if (empty($drushAlias)) { return FALSE; }
    if (empty($forRefresh)) {
      $this->working(STRING_WORKING_INSTALL_DRUPAL);
      if (!$this->installDrupal($drushAlias)) {
        $this->error(STRING_COULD_NOT_INSTALL);
        return FALSE;
      }
      $this->success(STRING_SUCCESS_INSTALL_DRUPAL);
    }
    $this->working(STRING_WORKING_INSTALL_MODULES);
    if (!$this->installModules($drushAlias)) {
      $this->error(STRING_COULD_NOT_INSTALL_MODULES);
      return FALSE;
    }
    $this->success(STRING_SUCCESS_INSTALL_MODULES);
    return TRUE;
  }
  
  /**
   * Installs the modules as defined.
   * 
   * @param string $alias
   *   The alias to install to.
   * 
   * @return boolean
   *   TRUE if the modules were all installed, otherwise FALSE.
   */
  private function installModules($alias) {
    $modules = $this->config()->getConfig(CONFIG_INSTALL_MODULES);
    $file = $this->config()->getConfig(CONFIG_INSTALL_MODULES_FILE);
    if (!empty($file) && is_readable($file)) {
      $modules = array_unique(array_merge($modules, file($file)));
    }
    if (!extra_empty($modules) && count($modules) > 0) {
      return drush_install_modules($modules, $alias);
    }
    return TRUE;
  }
  
  /**
   * Installs Drupal.
   * 
   * @param string $alias
   *   The alias to install to.
   * 
   * @return boolean
   *   TRUE if Drupal was installed, otherwise FALSE.
   */
  private function installDrupal($alias) {
    $profile = $this->config()->getConfig(CONFIG_INSTALL_PROFILE);
    if (empty($profile)) {
      return FALSE;
    }
    $config = $this->getConfig(array(), array(
      '!admin-email' => CONFIG_INSTALL_DEFAULT_EMAIL,
      '!admin-user' => CONFIG_INSTALL_DEFAULT_USER,
      '!admin-password' => CONFIG_INSTALL_DEFAULT_PASSWORD,
      '!site-name' => CONFIG_INSTALL_SITE_NAME,
      '!site-email' => CONFIG_INSTALL_SITE_EMAIL,
    ));
    if (empty($config)) {
      return FALSE;
    }
    $extra = array();
    if (!empty($config['!admin-email'])) {
      $extra[] = ' --account-mail=!admin-email';
    }
    if (!empty($config['!admin-user'])) {
      $extra[] = ' --account-name=!admin-user';
    }
    if (!empty($config['!admin-password'])) {
      $extra[] = ' --account-pass=!admin-password';
    }
    if (!empty($config['!site-name'])) {
      $extra[] = ' --site-name=!site-name';
    }
    if (!empty($config['!site-mail'])) {
      $extra[] = ' --site-mail=!site-mail';
    }
    $extra[] = ' -y';
    $options = $this->config()->getConfig(CONFIG_INSTALL_SITE_OPTIONS);
    foreach ($options as $option) {
      if (!extra_empty($option)) {
        $extra[] = ' --' . $option;
      }
    }
    $args = $this->config()->getConfig(CONFIG_INSTALL_EXTRAS);
    foreach ($args as $arg) {
      if (!extra_empty($arg)) {
        $extra[] = ' ' . $arg;
      }
    }
    return drush_site_install($profile, $alias, $extra, $config);
  }
  
}
