<?php
/**
 * @file Provides the DummyMySqlDBM class.
 */

/**
 * Database management implementation to support dummy MySQL servers. This means
 * that they do not execute actual commands but instead merely write the SQL
 * to a file.
 * 
 * Supports the following @ref db_settings "host keys":
 * - \c DB_HOST_QUERY_FILE
 * 
 * @ingroup db_typedefs
 */
class DummyMySqlDBM extends GenericDBM {
  
  /**
   * Constructs a DBM for MySQL.
   * 
   * @param array $settings
   *   The settings information from the server configuration.
   */
  public function __construct($settings) {
    parent::__construct('mysql', $settings);
  }
  
  public function available() {
    return TRUE;
  }
  
  /**
   * Fakes executing a mySQL command and writes it to a file.
   * 
   * @param string $query
   *   The query to execute
   * @param string $filename
   *   The filename to write to.
   * 
   * @return boolean
   *   TRUE if the query executed with no errors, otherwise FALSE.
   */
  private function mysqlCommand($query, $filename) {
    $file = assemble_path("~/dtk_mysql/", $filename . ".sql");
    $commands = array();
    if (file_exists($file)) {
      $commands = file($file);
    }
    $commands[] = $query;
    return file_put_contents($file, implode(PHP_EOL, $commands));
  }
  
  private function cleanName($name) {
    return strtolower(preg_replace('`[^A-Za-z0-9]`i', '', $name));
  }
  
  public function sanitizeDatabaseName($database) {
    $database = parent::sanitizeDatabaseName($this->cleanName($database));
    if (strlen($database) > 64) {
      $database = substr($database, 0, 32) . substr($database, -32);
    }
    return $database;
  }
  
  public function sanitizeUsername($username) {
    $username = parent::sanitizeUsername($this->cleanName($username));
    if (strlen($username) > 16) {
      $username = substr($username, 0, 8) . substr($username, -8);
    }
    return $username;
  }
  
  public function deleteUser($username, $host = NULL) {
    $hosts = array('%');
    if (is_array($host)) {
      $hosts = $host;
    }
    elseif (!empty($host)) {
      $hosts = array($host);
    }
    $replacements = array(
      '!USER' => $username,
    );
    $query = '';
    $k = 1;
    foreach ($hosts as $h) {
      $query .= 'DROP USER \'!USER\'';
      if (!empty($host)) {
        $query .= '@\'!HOST'.$k.'\'';
      }
      $replacements['!HOST' . $k] = $h;
      $k++;
    }
    $q = str_replace_all($query, $replacements);
    return $this->mysqlCommand($q, $username);
  }
  
  public function deleteDatabase($dbname) {
    $query = 'DROP DATABASE IF EXISTS !db_name;';
    $q = str_replace_all($query, array(
      '!db_name' => $dbname,
    ));
    return $this->mysqlCommand($q, $dbname);
  }
  
  public function createDatabase($database, $username = NULL, $password = NULL, $host = NULL) {
    $q = "CREATE DATABASE IF NOT EXISTS !DB;";
    $hosts = array('%');
    if (is_array($host)) {
      $hosts = $host;
    }
    elseif (!empty($host)) {
      $hosts = array($host);
    }
    $replacements = array(
      '!DB' => $database,
      '!USER' => $username,
      '!PASSWORD' => $password,
    );
    if (!empty($username)) {
      $k = 1;
      foreach ($hosts as $h) {
        $q .= " GRANT ALL ON !DB.* TO '!USER'";
        $q .= "@'!HOST".$k."'";
        $replacements['!HOST' . $k] = $h;
        if (!empty($password)) {
          $q .= " IDENTIFIED BY '!PASSWORD'";
        }
        $q .= ";";
        $k++;
      }
    }
    $q .= ' FLUSH PRIVILEGES;';
    $q = str_replace_all($q, $replacements);
    return $this->mysqlCommand($q, $database);
  }
  
}

