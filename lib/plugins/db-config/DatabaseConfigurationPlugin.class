<?php
/**
 * @file Defines the DatabaseConfigurationPlugin
 * 
 * @defgroup db_settings Database Host Settings
 * The host settings for database servers.
 * 
 * @defgroup db_types Database Type Keys
 * The keys that can be used for database servers.
 * 
 * @defgroup db_typedefs Database Types
 * Implementations of DatabaseManagerInterface.
 */

/**
 * DB server type constant for MySQL servers.
 * 
 * @ingroup db_types
 */
define('DB_SERVER_TYPE_MYSQL', 'mysql');

/**
 * Event to cast a DB server based on its type.
 * 
 * This event is fired when we want to convert an array of settings into
 * an instance of DatabaseManagerInterface. Listeners can check whether or 
 * not they support the specified type and, if so, return the appropriate
 * DatabaseManagerInterface object and stop propagation.
 * 
 * Context object properties:
 * - @c dbServer: This should be set to the appropriate DatabaseManagerInterface
 *   when found.
 * - @c type: The type name, see @ref db_types "Database Type Keys".
 * - @c settings: The settings array, which should be passed to the implementing
 *   object so it can act on it. See @ref db_settings "Database Host Settings"
 *   for available settings (not every type uses every setting).
 * 
 * 
 * @see DatabaseConfigurationPlugin::getCastedDBServer()
 * 
 * @ingroup events
 */
define('EVENT_CAST_DB_SERVER', 'cast-db-server');

/**
 * Event to find DB servers.
 * 
 * This event is fired to allow plugins to provide any DB servers. 
 * 
 * Context object properties:
 * - @c servers: An array of DatabaseManagerInterface objects. Plugins should
 *   add to this array.
 * 
 * @see DatabaseConfigurationPlugin::createDatabase().
 * 
 * @ingroup events
 */
define('EVENT_FIND_DB_SERVERS', 'find-db-servers');

/**
 * Random password constant.
 */
define('DB_RANDOM_PASSWORD', '__RANDOM__');

/**
 * Argument to specify the database name.
 * 
 * It should be a valid database name string. If not provided, the pattern
 * defined by CONFIG_SITE_NAME_PATTERN will be used.
 * 
 * @ingroup args
 */
define('ARG_DB_NAME', 'db-name');

/**
 * Argument to specify the database username.
 * 
 * It should be a valid database username. If not provided, the pattern defined
 * by CONFIG_SITE_USER_PATTERN will be used.
 * 
 * @ingroup args
 */
define('ARG_DB_USER', 'db-user');

/**
 * Argument to specify the database password.
 * 
 * It should be a valid database password. If not provided, the default defined
 * by CONFIG_DB_DEFAULT_PASSWORD will be used.
 * 
 * @ingroup args
 */
define('ARG_DB_PASSWORD', 'db-pass');

/**
 * The pattern to use for the DB username.
 * 
 * @see DrupalSite::replaceTokens().
 * 
 * @ingroup config
 */
define('CONFIG_SITE_DB_USER_PATTERN', 'site-db-username-pattern');

/**
 * The pattern to use for the DB name.
 * 
 * @see DrupalSite::replaceTokens().
 * 
 * @ingroup config
 */
define('CONFIG_SITE_DB_NAME_PATTERN', 'site-db-name-pattern');

/**
 * A host restriction for the created user.
 * 
 * @ingroup config
 */
define('CONFIG_SITE_DB_HOST_RESTRICTION', 'site-db-host-limit');

/**
 * The default server type to use.
 * 
 * This is used in the default implementation of EVENT_CAST_DB_SERVER in
 * case a type is not provided by the host configuration.
 * 
 * @see @ref db_types "Database Types"
 * @ingroup config
 */
define('CONFIG_DB_DEFAULT_TYPE', 'db-default-server-type');

/**
 * The default password to use.
 * 
 * For a random password, set to the value of DB_RANDOM_PASSWORD.
 * 
 * @ingroup config
 */
define('CONFIG_DB_DEFAULT_PASSWORD', 'db-default-new-password');

/**
 * The list of database servers.
 * 
 * This is used for the default implementation of EVENT_FIND_DB_SERVERS.
 * 
 * @ingroup config
 */
define('CONFIG_DB_SERVERS', 'db-servers');

/**
 * The key within each DB host for its server type.
 * 
 * @ingroup db_settings
 */
define('DB_HOST_TYPE', 'type');

/**
 * The host key for the host information.
 * 
 * @ingroup db_settings
 */
define('DB_HOST_HOST', 'host');

/**
 * The host key for the user name.
 * 
 * @ingroup db_settings
 */
define('DB_HOST_USER', 'user');

/**
 * The host key for the password.
 * 
 * @ingroup db_settings
 */
define('DB_HOST_PASSWORD', 'password');

/**
 * String token for when the database could not be created.
 * 
 * @ingroup strings
 */
define('STRING_CANNOT_CREATE_DB', 'db_config.error.cannot-create-db');
  
/**
 * This plugin manages the database for a Drupal site.
 * 
 * @ingroup plugins
 */
class DatabaseConfigurationPlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $base = dirname(__FILE__);
    require assemble_path($base, 'DatabaseManagerInterface.iface');
    require assemble_path($base, 'GenericDBM.class');
    require assemble_path($base, 'MySqlDBM.class');
    $this->events()->registerListener(array(
      EVENT_SITE_BUILD_MORE_CONFIG,
      EVENT_CAST_DB_SERVER,
      EVENT_FIND_DB_SERVERS,
    ), $this);
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_SITE_DB_USER_PATTERN => '@@BUILD_NAME',
      CONFIG_SITE_DB_NAME_PATTERN => '@@BUILD_NAME',
      CONFIG_SITE_DB_HOST_RESTRICTION => '',
      CONFIG_DB_DEFAULT_TYPE => '',
      CONFIG_DB_DEFAULT_PASSWORD => DB_RANDOM_PASSWORD,
      CONFIG_DB_SERVERS => array(),
    ));
  }
  
  public function requiredPlugins() {
    return array('DrupalSitePlugin');
  }
  
  public function captureEvent(&$context, $type) {
    switch ($type) {
      case EVENT_SITE_BUILD_MORE_CONFIG:
        if ($context->success) {
          $context->success = $this->createDatabase($context->site);
        }
        break;
      case EVENT_CAST_DB_SERVER:
        $server = $this->castDatabaseServer($context->settings, $context->type);
        if (!empty($server)) {
          $context->dbServer = $server;
          $context->stopPropagation = TRUE;
        }
        break;
      case EVENT_FIND_DB_SERVERS:
        $context->servers = array_merge($context->servers, $this->getDatabaseServers());
        break;
    }
  }
  
  /**
   * Callback for site-build-additional-config that creates a database.
   * 
   * @see DrupalSiteBuildPlugin
   * 
   * @param DrupalSite $site
   *   The DrupalSite we're configuring
   * 
   * @return
   */
  private function createDatabase(DrupalSite $site) {
    $context = (object) array(
      'servers' => array(),
    );
    $host = $this->config()->getConfig(CONFIG_SITE_DB_HOST_RESTRICTION);
    if (empty($host)) {
      $host = NULL;
    }
    $this->events()->fireEvent(EVENT_FIND_DB_SERVERS);
    $username = $this->args()->getOption(ARG_DB_USER);
    if (empty($username)) {
      $username = $site->replaceTokens($this->config()->getConfig(CONFIG_SITE_DB_USER_PATTERN));
    }
    $dbname = $this->args()->getOption(ARG_DB_NAME);
    if (empty($dbname)) {
      $dbname = $site->replaceTokens($this->config()->getConfig(CONFIG_SITE_DB_NAME_PATTERN));
    }
    $dbpass = $this->args()->getOption(ARG_DB_PASSWORD);
    if (empty($dbpass)) {
      $dbpass = $this->config()->getConfig(CONFIG_DB_DEFAULT_PASSWORD);
    }
    foreach ($context->servers as $server) {
      if ($server instanceof DatabaseManagerInterface) {
        $server->sanitizeDatabaseName($dbname);
        $server->sanitizeUsername($username);
        if ($dbpass == DB_RANDOM_PASSWORD) {
          $dbpass = $server->randomPassword();
        }
      }
    }
    foreach ($context->servers as $server) {
      if ($server instanceof DatabaseManagerInterface) {
        if (!$server->createDatabase($dbname, $username, $dbpass, $host)) {
          $this->error(STRING_CANNOT_CREATE_DB);
          return FALSE;
        }
      }
    }
    return TRUE;
  }
  
  /**
   * Creates a DatabaseManagerInterface object around the settings. 
   * 
   * @param array $settings
   *   The settings array.
   * @param string $type
   *   The type of server.
   * 
   * @return DatabaseManagerInterface
   *   A database manager, or NULL if the type was not recognized.
   */
  private function castDatabaseServer($settings, $type) {
    switch ($type) {
      case DB_SERVER_TYPE_MYSQL:
        return new MySqlDBM($settings);
    }
    return NULL;
  }
  
  /**
   * Retrieves a list of database servers.
   * 
   * @return array
   *   An array of DatabaseManagerInterface objects.
   */
  private function getDatabaseServers() {
    $defaultType = $this->config()->getConfig(CONFIG_DB_DEFAULT_TYPE);
    $servers = $this->config()->getConfig(CONFIG_DB_SERVERS);
    $dbServers = array();
    foreach ($servers as $server) {
      $type = isset($server[DB_HOST_TYPE]) ? $server[DB_HOST_TYPE] : $defaultType;
      $dbServer = $this->getCastedDBServer($server, $type);
      if ($dbServer instanceof DatabaseManagerInterface) {
        if ($dbServer->available()) {
          $dbServers[] = $dbServer;
        }
      }
    }
    return $dbServers;
  }
  
  /**
   * Casts the server settings into a DatabaseManagerInterface object.
   * 
   * @param array $settings
   *   An array of settings.
   * @param string $type
   *   The detected type of the server.
   * 
   * @return DatabaseManagerInterface
   *   An instance of DatabaseManagerInterface corresponding to $type or NULL
   *   if none was found.
   */
  private function getCastedDBServer($settings, $type) {
    $context = (object) array(
      'type' => $type,
      'settings' => $settings,
      'dbServer' => NULL,
    );
    $this->events()->fire(EVENT_CAST_DB_SERVER, $context);
    return $context->dbServer;
  }
  
}
