<?php
/**
 * @file Defines the DatabaseConfigurationPlugin
 * 
 * @defgroup db_settings Database Host Settings
 * The host settings for database servers.
 * 
 * @defgroup db_types Database Type Keys
 * The keys that can be used for database servers.
 * 
 * @defgroup db_typedefs Database Types
 * Implementations of DatabaseManagerInterface.
 */

/**
 * This plugin manages the database for a Drupal site.
 * 
 * @ingroup plugins
 */
class DatabaseConfigurationPlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_SITE_BUILD_MORE_CONFIG,
      EVENT_CAST_DB_SERVER,
      EVENT_FIND_DB_SERVERS,
      EVENT_REMOVE_ALL,
      EVENT_SUBSITE_BUILD_SERVER_CONFIG,
      EVENT_GET_INFO,
    ), $this);
    $this->config()->extendDefaultConfiguration(array(
      CONFIG_SITE_DB_USER_PATTERN => '@@SITE_UUID',
      CONFIG_SITE_DB_NAME_PATTERN => '@@SITE_UUID',
      CONFIG_SITE_DB_HOST_RESTRICTION => 'localhost',
      CONFIG_DB_DEFAULT_TYPE => '',
      CONFIG_DB_DEFAULT_PASSWORD => DB_RANDOM_PASSWORD,
      CONFIG_DB_SERVERS => array(),
      CONFIG_DB_PREFIX => '',
    ));
    $this->config()->extendFromOption(CONFIG_DB_PREFIX, OPTION_DB_PREFIX);
  }
  
  public function captureEvent(DtkEvent &$context, $type) {
    switch ($type) {
      case EVENT_GET_INFO:
        $entity = $context->getEntity();
        $servers = $entity->getSetting(SITE_DATABASE_LIST);
        foreach ($servers as $server) {
          $context->appendInfo($this->str(STRING_INFO_DB, array(
            '!type' => $server['dbSettings'][DB_HOST_DRUPAL_CATEGORY],
            '!mode' => $server['dbSettings'][DB_HOST_DRUPAL_MODE],
          )), $server['dbSettings'][DB_HOST_TYPE] . '://' . $server['username'] . '@' . $server['host'] . ':' . $server['database']);          
        }
        break;
      case EVENT_SITE_BUILD_MORE_CONFIG:
      case EVENT_SUBSITE_BUILD_SERVER_CONFIG:
        if ($context->checkExecution()) {
          $context->setResult($this->createDatabase($context->getEntity()));
        }
        break;
      case EVENT_CAST_DB_SERVER:
        $server = $this->castDatabaseServer($context->getVariable('settings'), $context->getVariable('type'));
        if (!empty($server)) {
          $context->stopFiring();
          $context->setVariable('db-server', $server);
        }
        break;
      case EVENT_FIND_DB_SERVERS:
        $servers = array_merge($context->getVariable('servers'), $this->getDatabaseServers());
        $context->setVariable('servers', $servers);
        break;
      case EVENT_REMOVE_SUBSITE_ALL:
      case EVENT_REMOVE_ALL:
        if ($context->checkExecution()) {
          $context->setResult($this->deleteDatabases($context->getEntity()));
        }
        break;
    }
  }
  
  /**
   * Responsible for deleting all the databases and users created for this
   * site.
   * 
   * @param GenericDrupalEntity $site
   *   The site to delete databases for.
   * 
   * @return boolean
   *   TRUE if all the databases/users were deleted, or FALSE if even one had
   *   an error.
   */
  private function deleteDatabases(GenericDrupalEntity $site) {
    $servers = $site->getSetting(SITE_DATABASE_LIST);
    if (empty($servers)) {
      return TRUE;
    }
    $ret = TRUE;
    $this->working(STRING_WORKING_DB_DELETE);
    foreach ($servers as $key => $serverData) {
      $server = $this->castDatabaseServer($serverData['dbSettings'], $serverData['type']);
      $this->working(STRING_WORKING_DB_DELETE_ITEM, array(
        '!server' => $key,
        '!name' => $serverData['database'],
      ));
      if ($server instanceof DatabaseManagerInterface) {
        if (!$server->deleteDatabase($serverData['database'])) {
          $this->warn(STRING_UNABLE_TO_DELETE_DB, array(
            '!name' => $serverData['database'],
          ));
          $ret = FALSE;
        }
        if (!$server->deleteUser($serverData['username'], $serverData['host'])) {
          $this->warn(STRING_UNABLE_TO_DELETE_USER, array(
            '!name' => $serverData['username'],
          ));
          $ret = FALSE;
        }
      }
      else {
        $this->warn(STRING_UNABLE_TO_USE_DB, array(
          '!type' => $serverData['type'],
        ));
        $ret = FALSE;
      }
    }
    if ($ret) {
      $this->success(STRING_SUCCESS_DB_DELETE);
    }
    return $ret;
  }
  
  /**
   * Builds the database configuration.
   * 
   * @param GenericDrupalEntity $site
   *   The site to build database configuration for.
   * 
   * @return array
   *   An array of configuration data.
   */
  private function getDatabaseConfiguration(GenericDrupalEntity $site) {
    $config = array(
      'host_restriction' => $this->config()->getConfig(CONFIG_SITE_DB_HOST_RESTRICTION),
      'username' => $this->args()->getOption(OPTION_DB_USER),
      'database' => $this->args()->getOption(OPTION_DB_NAME),
      'password' => $this->args()->getOption(OPTION_DB_PASSWORD),
      'prefix' => $this->config()->getConfig(CONFIG_DB_PREFIX),
    );
    if (empty($config['host_restriction'])) { $config['host_restriction'] = NULL; }
    if (empty($config['username'])) {
      $config['username'] = $site->replaceTokens($this->config()->getConfig(CONFIG_SITE_DB_USER_PATTERN));
    }
    if (empty($config['database'])) {
      $config['database'] = $site->replaceTokens($this->config()->getConfig(CONFIG_SITE_DB_NAME_PATTERN));
    }
    if (empty($config['password'])) {
      $config['password'] = $this->config()->getConfig(CONFIG_DB_DEFAULT_PASSWORD);
    }
    return $config;
  }
  
  /**
   * Retrieves all the databases.
   * 
   * @return array
   *   An array of database information.
   */
  private function getDatabaseServerList() {
    $event = new DtkEvent(TRUE, array(
      'servers' => array(),
    ));
    $this->events()->fireEvent(EVENT_FIND_DB_SERVERS, $event);
    return $event->getVariable('servers');
  }
  
  /**
   * Sanitizes the database configuration.
   * 
   * @param GenericDBM $dbm
   *   The database manager
   * @param array $config
   *   The database configuration.
   */
  private function sanitizeDatabaseConfiguration(GenericDBM $dbm, &$config) {
    $config['database'] = $dbm->sanitizeDatabaseName($config['database']);
    $config['username'] = $dbm->sanitizeUsername($config['username']);
    if ($config['password'] == DB_RANDOM_PASSWORD) {
      $config['password'] = $dbm->randomPassword();
    }
  }
  
  /**
   * Callback for site-build-additional-config that creates a database.
   * 
   * @see DrupalSiteBuildPlugin
   * 
   * @param GenericDrupalEntity $site
   *   The site or subsite we're configuring
   * 
   * @return
   */
  private function createDatabase(GenericDrupalEntity $site) {
    $this->working(STRING_WORKING_DB_CREATE);
    $servers = $this->getDatabaseServerList();
    $config = $this->getDatabaseConfiguration($site);
    $drupalSettings = array();
    $dbStorage = array();
    $connectionKeys = array();
    // sanitize all the data first.
    foreach ($servers as $server) {
      $this->sanitizeDatabaseConfiguration($server, $config);
    }
    foreach ($servers as $key => $server) {
      $this->working(STRING_WORKING_DB_CREATE_ITEM, array(
        '!name' => $config['database'],
        '!server' => $key,
      ));
      if (!$server->createDatabase($config['database'], $config['username'], $config['password'], $config['host_restriction'])) {
        $this->error(STRING_CANNOT_CREATE_DB);
        return FALSE;
      }
      $dbStorage[$key] = array(
        'type' => $server->getSetting(DB_HOST_TYPE),
        'dbSettings' => $server->getSettings(),
        'username' => $config['username'],
        'database' => $config['database'],
        'host' => $config['host_restriction'],
      );
      $drupalSettings[$server->getDatabaseCategory()][$server->getDatabaseMode()] = array(
        'driver' => $server->getDriver(),
        'database' => $config['database'],
        'username' => $config['username'],
        'password' => $config['password'],
        'host' => $server->getHost(),
        'prefix' => $config['prefix'],
      );
      $connectionKeys[$server->getDatabaseCategory()] = $server->getDatabaseCategory();
    }
    if (!$this->writeDatabaseSettings($site, $drupalSettings)) {
      $this->error(STRING_CANNOT_WRITE_SETTINGS);
      return FALSE;
    }
    $site->setSetting(SITE_DB_CONNECTION_KEYS, $connectionKeys);
    $site->setSetting(SITE_DATABASE_LIST, $dbStorage);
    $this->success(STRING_SUCCESS_DB_CREATE);
    return TRUE;
  }
  
  /**
   * Converts the database settings array to a string for output.
   * 
   * @param array $settings
   *   A database settings array.
   * 
   * @return string
   *   A valid PHP statement to recreate the database settings.
   */
  private function convertSettingsToString(array $settings) {
    $str = '';
    $str = '$databases = array(' . PHP_EOL;
    foreach ($settings as $dbcat => $dbs) {
      $str .= '  "' . $dbcat . '" => array(' . PHP_EOL;
      foreach ($dbs as $dbmode => $db) {
        $str .= '    "' . $dbmode . '" => array(' . PHP_EOL;
        foreach ($db as $key => $value) {
          $str .= '      "' . $key . '" => "' . $value . '",' . PHP_EOL;
        }
        $str .= '  ),' . PHP_EOL;
      }
      $str .= '),' . PHP_EOL;
    }
    $str .= ');';
    return $str;
  }
  
  /**
   * Writes the database settings to the settings.php file for the site.
   * 
   * @param GenericDrupalEntity $site
   *   The site to write settings for.
   * @param array $dbSettings
   *   The database settings to write.
   * 
   * @return boolean
   *   TRUE if successful, otherwise false.
   * 
   * @see DatabaseConfigurationPlugin::convertSettingsToString()
   */
  private function writeDatabaseSettings(GenericDrupalEntity $site, array $dbSettings) {
    $settingsFile = $site->getSetting(SITE_SETTINGS_FILE);
    if (empty($settingsFile)) {
      return FALSE;
    }
    if (!is_writable($settingsFile)) {
      return FALSE;
    }
    $h = fopen($settingsFile, 'a');
    if (empty($h)) {
      return FALSE;
    }
    if (!fwrite($h, $this->convertSettingsToString($dbSettings))) {
      fclose($h);
      return FALSE;
    }
    fclose($h);
    return TRUE;
  }
  
  /**
   * Creates a DatabaseManagerInterface object around the settings. 
   * 
   * @param array $settings
   *   The settings array.
   * @param string $type
   *   The type of server.
   * 
   * @return DatabaseManagerInterface
   *   A database manager, or NULL if the type was not recognized.
   */
  private function castDatabaseServer($settings, $type) {
    switch ($type) {
      case DB_SERVER_TYPE_MYSQL:
        return new MySqlDBM($settings);
    }
    return NULL;
  }
  
  /**
   * Retrieves a list of database servers.
   * 
   * @return array
   *   An array of DatabaseManagerInterface objects.
   */
  private function getDatabaseServers() {
    $defaultType = $this->config()->getConfig(CONFIG_DB_DEFAULT_TYPE);
    $servers = $this->config()->getConfig(CONFIG_DB_SERVERS);
    $dbServers = array();
    foreach ($servers as $k => $server) {
      $type = isset($server[DB_HOST_TYPE]) ? $server[DB_HOST_TYPE] : $defaultType;
      $server[DB_HOST_TYPE] = $type;
      $dbServer = $this->getCastedDBServer($server, $type);
      if ($dbServer instanceof DatabaseManagerInterface) {
        if ($dbServer->available()) {
          $dbServers[$k] = $dbServer;
        }
      }
    }
    return $dbServers;
  }
  
  /**
   * Casts the server settings into a DatabaseManagerInterface object.
   * 
   * @param array $settings
   *   An array of settings.
   * @param string $type
   *   The detected type of the server.
   * 
   * @return DatabaseManagerInterface
   *   An instance of DatabaseManagerInterface corresponding to $type or NULL
   *   if none was found.
   */
  private function getCastedDBServer($settings, $type) {
    $event = new DtkEvent(FALSE, array(
      'settings' => $settings,
      'type' => $type,
    ));
    $this->events()->fireEvent(EVENT_CAST_DB_SERVER, $event);
    return $event->getVariable('db-server');
  }
  
}
