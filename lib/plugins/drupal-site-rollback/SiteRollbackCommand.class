<?php
/**
 * @file Defines the SiteRollbackCommand class.
 */

/**
 * The rollback command undoes what was done in the update command.
 */
class SiteRollbackCommand extends GenericSiteCommand {
  
  /**
   * The steps that must be executed for a rollback command.
   * 
   * @var array
   */
  private $steps = array(
    array(
      'event' => EVENT_ROLLBACK_PREPARE,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_ROLLBACK_BACKUP,
    ),
    array(
      'event' => EVENT_ROLLBACK_SUBSITE_PREP,
      'type' => COMMAND_STEP_ALL_SUBSITES,
    ),
    array(
      'event' => EVENT_ROLLBACK_START,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_ROLLBACK_PHASE1,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_ROLLBACK_PHASE2,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_ROLLBACK_SUBSITES,
      'type' => COMMAND_STEP_ALL_SUBSITES,
    ),
    array(
      'event' => EVENT_ROLLBACK_PHASE3,
      'continue' => TRUE,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_ROLLBACK_FINISH,
      'continue' => TRUE,
    ),
    array(
      'event' => EVENT_ROLLBACK_CLEAN,
      'continue' => TRUE,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_ROLLBACK_SUBSITE_CLEAN,
      'continue' => TRUE,
      'optional' => TRUE,
      'type' => COMMAND_STEP_ALL_SUBSITES,
    ),
    array(
      'event' => EVENT_ROLLBACK_COMPLETE,
      'optional' => TRUE,
      'continue' => TRUE,
    ),
  );
  
  public function verifyRequirements() {
    if (!$this->requireSite()) {
      return FALSE;
    }
    $site = $this->getSite();
    $lastBuild = $site->getPreviousBuildID();
    if (empty($lastBuild)) {
      $this->error(STRING_ROLLBACK_REQUIRES_TWO_BUILDS);
      return FALSE;
    }
    return parent::verifyRequirements();
  }
  
  
  public function executeCommand() {
    $site = $this->getSite();
    $current = $site->getBuildID();
    $this->executeAllSteps($this->steps, array(
      'vars' => array(
        'revertBuild' => $site->getPreviousBuildID(),
        'currentBuild' => $current,
      ),
      'type' => COMMAND_STEP_SITE,
    ));
    $site->deleteBuild($this->events(), $current);
    $this->saveSiteConfiguration();
  }
  
}
