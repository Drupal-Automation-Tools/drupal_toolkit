<?php
/**
 * Defines the DrupalSiteInstallPlugin class.
 */

/**
 * String token for when the subsite has already been installed.
 * 
 * @ingroup strings
 */
define('STRING_ERROR_SUBSITE_INSTALLED', 'drupal_site.error.subsite-already-installed.');

/**
 * Fired before the install process begins.
 * 
 * @ingroup events
 */
define('EVENT_INSTALL_START', 'drupal-install-start');

/**
 * Fired after the install process is done.
 * 
 * @ingroup events
 */
define('EVENT_INSTALL_DONE', 'drupal-install-done');

/**
 * Fired to install the site, which one plugin must take responsibility for
 * for the task to succeed.
 * 
 * @ingroup events
 */
define('EVENT_INSTALL_TASK', 'drupal-install-task');

/**
 * Fired for extra install tasks.
 * 
 * @ingroup events
 */
define('EVENT_INSTALL_EXTRAS', 'drupal-install-extras');

/**
 * String token for the generic error message should the install fail.
 * 
 * @ingroup strings
 */
define('STRING_INSTALL_ERROR', 'drupal_site_install.error.install-error');

/**
 * Sets up the site-install command.
 */
class DrupalSiteInstallPlugin extends GenericPlugin implements EventListener {
  
  public function __construct() {
    $this->includeFiles(dirname(__FILE__), array(
      'SiteInstallCommand.class',
      'SubSiteInstallCommand.class',
    ));
  }
  
  public function initialize() {
    $this->events()->registerListener(array(
      EVENT_CORE_REGISTER_COMMANDS,
    ), $this);
  }
  
  public function requiredPlugins() {
    return array('DrupalSitePlugin');
  }
  
  public function captureEvent(DtkEvent &$context, $eventType) {
    switch ($eventType) {
      case EVENT_CORE_REGISTER_COMMANDS:
        $this->router()->addCommand('site-install', new SiteInstallCommand());
        $this->router()->addCommand('subsite-install', new SubSiteInstallCommand());
        break;
    }
  }
  
}