<?php
/**
 * @file Defines the SubSiteInstallCommand class.
 */

/**
 * Responsible for the command that installs a subsite. This proceeds in
 * a similar fashion to installing the site itself, except that different
 * variables may be used.
 */
class SubSiteInstallCommand extends GenericSiteCommand {
  
  /**
   * The necessary steps for installing a site.
   * 
   * @var array
   */
  private $steps = array(
    array(
      'event' => EVENT_INSTALL_START,
      'optional' => TRUE,
    ),
    array(
      'event' => EVENT_INSTALL_TASK,
    ),
    array(
      'event' => EVENT_INSTALL_EXTRAS,
    ),
    array(
      'event' => EVENT_INSTALL_DONE,
      'optional' => TRUE,
    ),
  );
  
  public function verifyRequirements() {
    if (!$this->requireSubSite()) {
      return FALSE;
    }
    if (!extra_empty($this->getSubSite()->getSetting(SITE_IS_INSTALLED))) {
      $this->error(STRING_ERROR_SUBSITE_INSTALLED);
      return FALSE;
    }
    return parent::verifyRequirements();
  }
  
  public function executeCommand() {
    $this->executeAllSteps($this->steps, array(
      'error' => STRING_INSTALL_ERROR,
      'type' => COMMAND_TYPE_SUBSITE,
    ));
    $this->getSubSite()->setSetting(SITE_IS_INSTALLED, "1");
    $this->saveSubSiteConfiguration();
  }
  
}