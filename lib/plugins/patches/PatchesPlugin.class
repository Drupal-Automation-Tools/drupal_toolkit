<?php
/**
 * @file Defines the PatchesPlugin class.
 */

/**
 * Responsible for patching older sites that may cause problems
 * with new versions of the toolkit.
 */
class PatchesPlugin extends GenericPlugin implements EventListener {
  
  public function initialize() {
    $this->events()->registerListener(array(
      dtk_constant('EVENT_DRUPAL_SITE_CONSTRUCTOR'),
    ), $this);
  }
  
  public function captureEvent(DtkEvent &$context, $type) {
    switch ($type) {
      case EVENT_DRUPAL_SITE_CONSTRUCTOR:
        if ($context->checkExecution()) {
          $context->setResult($this->applyFilesDirectoryPatch($context->getEntity()));
        }
        if ($context->checkExecution()) {
          $context->setResult($this->applyRootlinkPatch($context->getEntity()));
        }
        if ($context->checkExecution()) {
          $context->setResult($this->applyPrefixPatch($context->getEntity()));
        }
        break;
      case EVENT_CLEANUP_BUILD:
        if ($context->checkExecution()) {
          $context->setResult($this->removeOrphanBuilds($context->getSite()));
        }
        break;
    }
  }
  
  /**
   * Older sites were not removing codebase directories completely. This
   * patch is here to fix that.
   * 
   * @param DrupalSite $site
   */
  private function removeOrphanBuilds(DrupalSite $site) {
    if (!$site->isNew()) {
      $cbs = $site->getSetting(SITE_BUILD_IDS);
      $cbDir = $site->getSetting(SITE_CODEBASE_DIR, NULL, TRUE);
      if (empty($cbDir)) { return FALSE; }
      $dir = assemble_path($site->getBuildFolder(), $cbDir);
      $h = opendir($dir);
      if (empty($h)) { return FALSE; }
      while (($f = readdir($h)) !== FALSE) {
        if ($f != '.' && $f != '..') {
          if (!in_array($f, $cbs)) {
            $site->deleteBuild($this->events(), $f);
          }
        }
      } 
    }
    return TRUE;
  }
  
  /**
   * Some older sites will not have a ROOTLINKS directory, if they were made 
   * before there was a rootlinks directory. It can be created manually,
   * this patch merely sets up the setting properly.
   * 
   * @param GenericDrupalEntity $entity The entity to setup rootlinks for.
   * 
   */
  private function applyRootlinkPatch(GenericDrupalEntity $entity) {
    $rl = $entity->getSetting(SITE_ROOTLINKS_DIR);
    if (empty($rl)) {
      $entity->setSetting(SITE_ROOTLINKS_DIR, 'rootlinks');
    }
    return TRUE;
  }
  
  /**
   * Verifies that the PREFIXED_DOMAINS settings are all valid.
   * 
   * @param GenericDrupalEntity $entity
   *   The entity to fix.
   */
  private function applyPrefixPatch(GenericDrupalEntity $entity) {
    if (!$entity->isNew()) {
      $domains = $entity->getSetting(SITE_SETTING_PREFIXED_DOMAINS);
      $prefix = $this->config()->getConfig(CONFIG_SITE_URL_PREFIX);
      if (empty($domains) && !empty($prefix)) {
        $existing = $entity->getSetting(SITE_SETTING_ALL_DOMAINS);
        if (!empty($existing)) {
          $domains = array();
          foreach ($existing as $d) {
            if (substr($d, 0, strlen($prefix)) === $prefix) {
              $domains[] = $d;
            }
          }
        }
        $entity->setSetting(SITE_SETTING_PREFIXED_DOMAINS, $domains);
      }
    }
    return TRUE;
  }
  
  /**
   * Prior to 0.9.1, the serverFiles and systemFiles were not being preserved 
   * during a save/load of the configuration. This caused the files directory
   * to not have the correct permissions after an update. After patching the
   * GenericDrupalEntity class to preserve the files, older sites needed to have
   * the sites/X/files directory added back into their configuration. This
   * patch accomplishes that.
   * 
   * @param GenericDrupalEntity $entity
   *   The site or subsite to patch.
   * 
   * @return boolean
   *   TRUE upon success, otherwise FALSE.
   */
  private function applyFilesDirectoryPatch(GenericDrupalEntity $entity) {
    if (!$entity->minVersion('0.9.1') && !$entity->isNew()) {
      $sites = '';
      $target = 'default';
      if ($entity instanceof DrupalSite) {
        $sites = $entity->getSetting(SITE_SITES_DIR, NULL, TRUE);
      } elseif ($entity instanceof DrupalSubSite) {
        $sites = $entity->getParentSite()->getSetting(SITE_SITES_DIR, NULL, TRUE);
        $target = DrupalSite::convertURLToSiteName($entity->getSetting(SITE_PRIMARY_URL, NULL, TRUE));
      }
      if (empty($sites)) { return FALSE; }
      if (empty($target)) { return FALSE; }
      $filesDir = assemble_path($entity->getBuildFolder(), $sites, $target, 'files');
      dtk_info('Patching the site to have a files directory of !fdir', array(
        '!fdir' => $filesDir,
      ));
      $entity->registerServerFile($filesDir);
    }
    return TRUE;
  }
  
}