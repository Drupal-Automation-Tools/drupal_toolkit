<?php
/**
 * @file Defines the StringManager class.
 */

/**
 * Implements StringManagerInterface.
 */
class StringManager implements StringManagerInterface, EventDependency {
  
  /**
   * The event manager.
   * 
   * @var EventManagerInterface
   */
  private $events;
  
  /**
   * Cached string lookup results.
   * 
   * @var array
   */
  private $stringCache = array();
  
  public function setEventManager(EventManagerInterface $em) {
    $this->events = $em;
  }
  
  public function events() {
    return $this->events;
  }
  
  public function getString($key, array $args = array(), $default = NULL) {
    if (!isset($this->stringCache[$key])) {
      // This prevents recursion for string lookups - if the event that
      // is fired requires the strings being looked up already, they'll
      // fallback to the $default or the $key if $default is empty.
      $this->stringCache[$key] = empty($default) ? $key : $default;
      $this->stringCache[$key] = $this->findString($key, $default);
    }
    $str = $this->stringCache[$key];
    return str_replace_all($str, $args);
  }
  
  /**
   * Attempts to find a relevant string translation using events.
   * 
   * @param string $key
   *   The key to lookup.
   * @param string $default
   *   The default to fall back on.
   * 
   * @return string
   *   The appropriate string if one was found, or $default if not empty, or
   *   $key itself as a last resort.
   */
  private function findString($key, $default = NULL) {
    $event = new StringEvent($key);
    $this->events()->fireEvent(EVENT_GET_STRING, $event);
    if ($event->success()) {
      return $event->getTranslation();
    }
    return empty($default) ? $key : $default;
  }
  
}