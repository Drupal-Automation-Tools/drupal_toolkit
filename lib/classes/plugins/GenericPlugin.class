<?php
/**
 * @file Defines the GenericPlugin class.
 */

/**
 * String token for when a plugin is missing configuration.
 * 
 * @ingroup strings
 */
define('STRING_PLUGIN_NO_CONFIG', 'plugin.error.missing-config');

/**
 * Provides a generic plugin that can be easily extended as needed.
 */
abstract class GenericPlugin implements PluginInterface {
  
  /**
   * Dependency injection variable for ArgsInterface.
   * 
   * @var ArgsInterface
   */
  private $args;
  
  /**
   * Dependency injection variable for ConfigurationManagerInterface
   * 
   * @var ConfigurationManagerInterface
   */
  private $config;
  
  /**
   * Dependency injection variable for EventManagerInterface
   * 
   * @var EventManagerInterface 
   */
  private $events;
  
  /**
   * Dependency injection variable for OutputManagerInterface
   * 
   * @var OutputManagerInterface
   */
  private $out;
  
  /**
   * Dependency injection variable for RouterInterface
   * 
   * @var RouterInterface
   */
  private $router;
  
  /**
   * Dependency injection variable for StringManagerInterface
   * 
   * @var StringManagerInterface
   */
  private $sm;
  
  /**
   *  Dependency manager object.
   * 
   * @var DependencyManagerInterface
   */
  private $dm;
  
  public function setArgs(ArgsInterface $a) {
    $this->args = $a;
  }
  
  public function setConfiguration(ConfigurationManagerInterface $c) {
    $this->config = $c;
  }
  
  public function setEventManager(EventManagerInterface $m) {
    $this->events = $m;
  }
  
  public function setOutput(OutputManagerInterface $o) {
    $this->out = $o;
  }
  
  public function setRouter(RouterInterface $r) {
    $this->router = $r;
  }
  
  public function setStringManager(StringManagerInterface $sm) {
    $this->sm = $sm;
  }
  
  public function setDependencyManager(DependencyManagerInterface $dm) {
    $this->dm = $dm;
  }
  
  public function dm() {
    return $this->dm;
  }
  
  /**
   * Wrapper around StringManagerInterface::getString().
   */
  protected function str($key, $args = array(), $default = NULL) {
    return $this->strings()->getString($key, $args, $default);
  }
  
  
  public function strings() { return $this->sm; }
  
  public function args() { return $this->args; }
  
  public function config() { return $this->config; }
  
  public function events() { return $this->events; }
  
  public function out() { return $this->out; }
  
  public function router() { return $this->router; }

  public function requiredPlugins() { return array(); }
  
  public function translate() {
    
  }
  
  public function checkExtraRequirements() {
    return TRUE;
  }
  
  /**
   * Facade method to show an error to the user.
   * 
   * @param string $messageKey
   *   The error message.
   * @param array $args
   *   Arguments to pass to the translation engine.
   * @param int $level
   *   One of the @ref log_levels "log level constants".
   */
  protected function error($messageKey, array $args = array(), $level = CLOG_ERROR) {
    $this->out()->log($this->strings()->getString($messageKey, $args), $level);
  }
  
  /**
   * Facade method to show a warning to the user.
   * 
   * @param string $messageKey
   *   The warning message.
   * @param array $args
   *   Arguments to pass to the translation engine.
   */
  protected function warn($messageKey, array $args = array()) {
    $this->out()->log($this->strings()->getString($messageKey, $args), CLOG_WARNING);
  }
  
  /**
   * Shows a working message to the user.
   * 
   * @param string $messageKey
   *   The message.
   * @param array $args
   *   Arguments to pass to the translation engine.
   */
  protected function showWork($messageKey, array $args = array()) {
    $this->out()->message($this->strings()->getString($messageKey, $args), MESSAGE_WORKING);
  }
  
  /**
   * Alias of GenericPlugin::showWork().
   */
  protected function working($messageKey, array $args = array()) {
    return $this->showWork($messageKey, $args);
  }
  
  /**
   * Shows a success message to the user.
   * 
   * @param string $messageKey
   *   The message.
   * @param array $args
   *   Arguments to pass to the translation engine.
   */
  protected function showSuccess($messageKey, array $args = array()) {
    $this->out()->message($this->strings()->getString($messageKey, $args), MESSAGE_SUCCESS);
  }
  
  
  /**
   * Alias of GenericPlugin::showSuccess().
   */
  protected function success($messageKey, array $args = array()) {
    return $this->showSuccess($messageKey, $args);
  }
  
  /**
   * Shows a failure message to the user.
   * 
   * @param string $messageKey
   *   The message.
   * @param array $args
   *   Arguments to pass to the translation engine.
   */
  protected function showFailure($messageKey, array $args = array()) {
    $this->out()->message($this->strings()->getString($messageKey, $args), MESSAGE_FAILURE);
  }
  
  /**
   * Alias of GenericPlugin::showFailure().
   */
  protected function failure($messageKey, array $args = array()) {
    return $this->showFailure($messageKey, $args);
  }
  
  /**
   * Retrieves a set of configuration for the plugin.
   * 
   * This provides automatic error messages for some of the keys if they are
   * not defined and should be used when you need to load lots of required
   * keys.
   * 
   * @param array $keys
   *   An array of keys to fetch from the configuration. The value is the name
   *   of the configuration setting, the key is the name in the array it will
   *   be returned under. If one of these keys is empty, the function returns
   *   FALSE. Using a non-associative array or integer keys will result in the
   *   configuration setting key being used as the array key.
   * @param array $optional
   *   Optional keys to append to the array. Follows same rules as $keys but
   *   without the return value of FALSE if a key is not set.
   * @return array|FALSE
   *   The array of config keys or FALSE if a required key was missing.
   */
  protected function getConfig(array $keys, array $optional = NULL) {
    $results = array();
    foreach ($keys as $newKey => $key) {
      if (is_int($newKey)) {
        $newKey = $key;
      }
      $c = $this->config()->getConfig($key);
      if (extra_empty($c)) {
        $this->error(STRING_PLUGIN_NO_CONFIG, array(
          '!key' => $key,
        ));
        return FALSE;
      }
      $results[$newKey] = $c;
    }
    if (!empty($optional)) {
      foreach ($optional as $newKey => $key) {
        if (is_int($newKey)) {
          $newKey = $key;
        }
        $results[$newKey] = $this->config()->getConfig($key);
      }
    }
    return $results;
  }
  
}
