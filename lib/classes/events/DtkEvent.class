<?php
/**
 * @file Defines the DtkEvent class.
 */

/**
 * Provides a base framework for event handling.
 * 
 * @ingroup event_objects
 */
class DtkEvent {
  
  
  /**
   * Whether or not a plug-in has attempted to deal with this event.
   * 
   * @var boolean
   */
  private $handled = FALSE;
  
  /**
   * Whether or not all plug-ins were successful in dealing with this event.
   * 
   * @var boolean
   */
  private $success = FALSE;
  
  /**
   * Whether or not this plug-in is optional.
   * 
   * @var boolean
   */
  private $optional;
  
  /**
   * Additional variables for this event.
   * 
   * @var array
   */
  private $variables = array();
  
  /**
   * Whether or not the event should continue executing.
   *  
   * @var boolean
   */
  private $propagate = TRUE;

  /**
   * Whether or not failure is cause to fail execution.
   * 
   * @var boolean
   */
  private $continueOnFail = FALSE;
  
  /**
   * 
   * @param boolean $optional
   *   Whether or not this event is optional.
   * @param array $variables
   *   Extra variables.
   */
  public function __construct($optional = FALSE, $variables = array(), $continueOnFail = FALSE) {
    $this->optional = $optional;
    $this->variables = $variables;
    $this->continueOnFail = $continueOnFail;
  }
  
  /**
   * Resets some key variables so that this event can be executed again.
   */
  public function reset() {
    $this->success = FALSE;
    $this->propagate = TRUE;
  }
  
  /**
   * Checks to see if the event handlers should keep firing.
   * 
   * @return boolean
   *   Whether or not to continue firing.
   */
  public function checkContinueFiring() {
    return $this->propagate;
  }
  
  /**
   * Stop further handlers from firing.
   */
  public function stopFiring() {
    $this->propagate = FALSE;
  }
  
  
  /**
   * Retrieves an extra variable value.
   * 
   * @param string $key
   *   The extra variable's key name.
   * @param mixed $default
   *   The default return value if it is not set. Defaults to FALSE.
   * 
   * @return mixed
   *   The value of the variable.
   */
  public function getVariable($key, $default = FALSE) {
    if (isset($this->variables[$key])) {
      return $this->variables[$key];
    }
    return $default;
  }
  
  /**
   * Sets the value of a variable.
   * 
   * @param string $key
   *   The key to set.
   * @param mixed $value
   *   The value to set.
   */
  public function setVariable($key, $value) {
    $this->variables[$key] = $value;
  }
  
  /**
   * Extends a variable with more data. Should only be used if the firing
   * class expects the data to be an array.
   * 
   * @param string $key
   *   The variable key to update.
   * @param array|mixed $value
   *   A value to append to the array OR an array of values to append.
   * @param mixed $arrayKey
   *   If $value is not an array, use this parameter to specify a key in the
   *   array for the value (if $value is an array, it's keys are used). 
   *   Empty or numeric keys are ignored and an incremental int key is used.
   */
  public function extendVariable($key, $value, $arrayKey = NULL) {
    if (!isset($this->variables[$key])) {
      $this->variables[$key] = array();
    }
    elseif (!is_array($this->variables[$key])) {
      $this->variables[$key] = array($this->variables[$key]);
    }
    if (is_array($value)) {
      array_extend($this->variables[$key], $value);
      return;
    }
    if (empty($arrayKey) || is_numeric($arrayKey)) {
      $this->variables[$key][] = $value;
    }
    else {
      $this->variables[$key][$arrayKey] = $value;
    }
  }
  
  /**
   * Sets whether or not a plug-in's attempt to deal with an event was
   * successful or not.
   * 
   * @param boolean $result
   *   TRUE if successful, otherwise FALSE. 
   */
  public function setResult($result) {
    if (!$this->handled) {
      $this->success = !!$result;
      $this->handled = TRUE;
    }
    else {
      $this->success = (!!$result) && $this->success;
    }
  }
  
  /**
   * Checks to see if the event was successfully dealt with.
   * 
   * @return boolean
   *   TRUE if successful, or optional and not handled.
   */
  public function success() {
    return $this->success || ($this->optional && empty($this->handled));
  }
  
  /**
   * Checks to see if a handler should be executed.
   * 
   * @return boolean
   */
  public function checkExecution() {
    return empty($this->handled) || $this->continueOnFail || $this->success;
  }
  
  
}
